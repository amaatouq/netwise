{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["Match","check"],"specifiers":[{"kind":"named","imported":"Match","local":"Match"},{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"./logging","imported":["debugLog"],"specifiers":[{"kind":"named","imported":"debugLog","local":"debugLog"}]},{"source":"./published_document_list","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PublishedDocumentList"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/reywood:publish-composite/lib/publication.js","filenameRelative":"packages/reywood:publish-composite/lib/publication.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/reywood:publish-composite/lib/publication.js.map","sourceFileName":"packages/reywood:publish-composite/lib/publication.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"publication"},"ignored":false,"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n    Meteor(v) {\n        Meteor = v;\n    }\n\n}, 0);\nlet Match, check;\nmodule.watch(require(\"meteor/check\"), {\n    Match(v) {\n        Match = v;\n    },\n\n    check(v) {\n        check = v;\n    }\n\n}, 1);\n\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n    _(v) {\n        _ = v;\n    }\n\n}, 2);\nlet debugLog;\nmodule.watch(require(\"./logging\"), {\n    debugLog(v) {\n        debugLog = v;\n    }\n\n}, 3);\nlet PublishedDocumentList;\nmodule.watch(require(\"./published_document_list\"), {\n    default(v) {\n        PublishedDocumentList = v;\n    }\n\n}, 4);\n\nclass Publication {\n    constructor(subscription, options, args) {\n        check(options, {\n            find: Function,\n            children: Match.Optional([Object]),\n            collectionName: Match.Optional(String)\n        });\n        this.subscription = subscription;\n        this.options = options;\n        this.args = args || [];\n        this.childrenOptions = options.children || [];\n        this.publishedDocs = new PublishedDocumentList();\n        this.collectionName = options.collectionName;\n    }\n\n    publish() {\n        this.cursor = this._getCursor();\n\n        if (!this.cursor) {\n            return;\n        }\n\n        const collectionName = this._getCollectionName(); // Use Meteor.bindEnvironment to make sure the callbacks are run with the same\n        // environmentVariables as when publishing the \"parent\".\n        // It's only needed when publish is being recursively run.\n\n\n        this.observeHandle = this.cursor.observe({\n            added: Meteor.bindEnvironment(doc => {\n                const alreadyPublished = this.publishedDocs.has(doc._id);\n\n                if (alreadyPublished) {\n                    debugLog('Publication.observeHandle.added', `${collectionName}:${doc._id} already published`);\n                    this.publishedDocs.unflagForRemoval(doc._id);\n\n                    this._republishChildrenOf(doc);\n\n                    this.subscription.changed(collectionName, doc._id, doc);\n                } else {\n                    this.publishedDocs.add(collectionName, doc._id);\n\n                    this._publishChildrenOf(doc);\n\n                    this.subscription.added(collectionName, doc);\n                }\n            }),\n            changed: Meteor.bindEnvironment(newDoc => {\n                debugLog('Publication.observeHandle.changed', `${collectionName}:${newDoc._id}`);\n\n                this._republishChildrenOf(newDoc);\n            }),\n            removed: doc => {\n                debugLog('Publication.observeHandle.removed', `${collectionName}:${doc._id}`);\n\n                this._removeDoc(collectionName, doc._id);\n            }\n        });\n        this.observeChangesHandle = this.cursor.observeChanges({\n            changed: (id, fields) => {\n                debugLog('Publication.observeChangesHandle.changed', `${collectionName}:${id}`);\n                this.subscription.changed(collectionName, id, fields);\n            }\n        });\n    }\n\n    unpublish() {\n        debugLog('Publication.unpublish', this._getCollectionName());\n\n        this._stopObservingCursor();\n\n        this._unpublishAllDocuments();\n    }\n\n    _republish() {\n        this._stopObservingCursor();\n\n        this.publishedDocs.flagAllForRemoval();\n        debugLog('Publication._republish', 'run .publish again');\n        this.publish();\n        debugLog('Publication._republish', 'unpublish docs from old cursor');\n\n        this._removeFlaggedDocs();\n    }\n\n    _getCursor() {\n        return this.options.find.apply(this.subscription.meteorSub, this.args);\n    }\n\n    _getCollectionName() {\n        return this.collectionName || this.cursor && this.cursor._getCollectionName();\n    }\n\n    _publishChildrenOf(doc) {\n        _.each(this.childrenOptions, function createChildPublication(options) {\n            const pub = new Publication(this.subscription, options, [doc].concat(this.args));\n            this.publishedDocs.addChildPub(doc._id, pub);\n            pub.publish();\n        }, this);\n    }\n\n    _republishChildrenOf(doc) {\n        this.publishedDocs.eachChildPub(doc._id, publication => {\n            publication.args[0] = doc;\n\n            publication._republish();\n        });\n    }\n\n    _unpublishAllDocuments() {\n        this.publishedDocs.eachDocument(doc => {\n            this._removeDoc(doc.collectionName, doc.docId);\n        }, this);\n    }\n\n    _stopObservingCursor() {\n        debugLog('Publication._stopObservingCursor', 'stop observing cursor');\n\n        if (this.observeHandle) {\n            this.observeHandle.stop();\n            delete this.observeHandle;\n        }\n\n        if (this.observeChangesHandle) {\n            this.observeChangesHandle.stop();\n            delete this.observeChangesHandle;\n        }\n    }\n\n    _removeFlaggedDocs() {\n        this.publishedDocs.eachDocument(doc => {\n            if (doc.isFlaggedForRemoval()) {\n                this._removeDoc(doc.collectionName, doc.docId);\n            }\n        }, this);\n    }\n\n    _removeDoc(collectionName, docId) {\n        this.subscription.removed(collectionName, docId);\n\n        this._unpublishChildrenOf(docId);\n\n        this.publishedDocs.remove(docId);\n    }\n\n    _unpublishChildrenOf(docId) {\n        debugLog('Publication._unpublishChildrenOf', `unpublishing children of ${this._getCollectionName()}:${docId}`);\n        this.publishedDocs.eachChildPub(docId, publication => {\n            publication.unpublish();\n        });\n    }\n\n}\n\nmodule.exportDefault(Publication);","map":{"version":3,"sources":["packages/reywood:publish-composite/lib/publication.js"],"names":["Meteor","module","watch","require","v","Match","check","_","debugLog","PublishedDocumentList","default","Publication","constructor","subscription","options","args","find","Function","children","Optional","Object","collectionName","String","childrenOptions","publishedDocs","publish","cursor","_getCursor","_getCollectionName","observeHandle","observe","added","bindEnvironment","doc","alreadyPublished","has","_id","unflagForRemoval","_republishChildrenOf","changed","add","_publishChildrenOf","newDoc","removed","_removeDoc","observeChangesHandle","observeChanges","id","fields","unpublish","_stopObservingCursor","_unpublishAllDocuments","_republish","flagAllForRemoval","_removeFlaggedDocs","apply","meteorSub","each","createChildPublication","pub","concat","addChildPub","eachChildPub","publication","eachDocument","docId","stop","isFlaggedForRemoval","_unpublishChildrenOf","remove","exportDefault"],"mappings":"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","file":"packages/reywood:publish-composite/lib/publication.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { _ } from 'meteor/underscore';\n\nimport { debugLog } from './logging';\nimport PublishedDocumentList from './published_document_list';\n\n\nclass Publication {\n    constructor(subscription, options, args) {\n        check(options, {\n            find: Function,\n            children: Match.Optional([Object]),\n            collectionName: Match.Optional(String),\n        });\n\n        this.subscription = subscription;\n        this.options = options;\n        this.args = args || [];\n        this.childrenOptions = options.children || [];\n        this.publishedDocs = new PublishedDocumentList();\n        this.collectionName = options.collectionName;\n    }\n\n    publish() {\n        this.cursor = this._getCursor();\n        if (!this.cursor) { return; }\n\n        const collectionName = this._getCollectionName();\n\n        // Use Meteor.bindEnvironment to make sure the callbacks are run with the same\n        // environmentVariables as when publishing the \"parent\".\n        // It's only needed when publish is being recursively run.\n        this.observeHandle = this.cursor.observe({\n            added: Meteor.bindEnvironment((doc) => {\n                const alreadyPublished = this.publishedDocs.has(doc._id);\n\n                if (alreadyPublished) {\n                    debugLog('Publication.observeHandle.added', `${collectionName}:${doc._id} already published`);\n                    this.publishedDocs.unflagForRemoval(doc._id);\n                    this._republishChildrenOf(doc);\n                    this.subscription.changed(collectionName, doc._id, doc);\n                } else {\n                    this.publishedDocs.add(collectionName, doc._id);\n                    this._publishChildrenOf(doc);\n                    this.subscription.added(collectionName, doc);\n                }\n            }),\n            changed: Meteor.bindEnvironment((newDoc) => {\n                debugLog('Publication.observeHandle.changed', `${collectionName}:${newDoc._id}`);\n                this._republishChildrenOf(newDoc);\n            }),\n            removed: (doc) => {\n                debugLog('Publication.observeHandle.removed', `${collectionName}:${doc._id}`);\n                this._removeDoc(collectionName, doc._id);\n            },\n        });\n\n        this.observeChangesHandle = this.cursor.observeChanges({\n            changed: (id, fields) => {\n                debugLog('Publication.observeChangesHandle.changed', `${collectionName}:${id}`);\n                this.subscription.changed(collectionName, id, fields);\n            },\n        });\n    }\n\n    unpublish() {\n        debugLog('Publication.unpublish', this._getCollectionName());\n        this._stopObservingCursor();\n        this._unpublishAllDocuments();\n    }\n\n    _republish() {\n        this._stopObservingCursor();\n\n        this.publishedDocs.flagAllForRemoval();\n\n        debugLog('Publication._republish', 'run .publish again');\n        this.publish();\n\n        debugLog('Publication._republish', 'unpublish docs from old cursor');\n        this._removeFlaggedDocs();\n    }\n\n    _getCursor() {\n        return this.options.find.apply(this.subscription.meteorSub, this.args);\n    }\n\n    _getCollectionName() {\n        return this.collectionName || (this.cursor && this.cursor._getCollectionName());\n    }\n\n    _publishChildrenOf(doc) {\n        _.each(this.childrenOptions, function createChildPublication(options) {\n            const pub = new Publication(this.subscription, options, [doc].concat(this.args));\n            this.publishedDocs.addChildPub(doc._id, pub);\n            pub.publish();\n        }, this);\n    }\n\n    _republishChildrenOf(doc) {\n        this.publishedDocs.eachChildPub(doc._id, (publication) => {\n            publication.args[0] = doc;\n            publication._republish();\n        });\n    }\n\n    _unpublishAllDocuments() {\n        this.publishedDocs.eachDocument((doc) => {\n            this._removeDoc(doc.collectionName, doc.docId);\n        }, this);\n    }\n\n    _stopObservingCursor() {\n        debugLog('Publication._stopObservingCursor', 'stop observing cursor');\n\n        if (this.observeHandle) {\n            this.observeHandle.stop();\n            delete this.observeHandle;\n        }\n\n        if (this.observeChangesHandle) {\n            this.observeChangesHandle.stop();\n            delete this.observeChangesHandle;\n        }\n    }\n\n    _removeFlaggedDocs() {\n        this.publishedDocs.eachDocument((doc) => {\n            if (doc.isFlaggedForRemoval()) {\n                this._removeDoc(doc.collectionName, doc.docId);\n            }\n        }, this);\n    }\n\n    _removeDoc(collectionName, docId) {\n        this.subscription.removed(collectionName, docId);\n        this._unpublishChildrenOf(docId);\n        this.publishedDocs.remove(docId);\n    }\n\n    _unpublishChildrenOf(docId) {\n        debugLog('Publication._unpublishChildrenOf', `unpublishing children of ${this._getCollectionName()}:${docId}`);\n\n        this.publishedDocs.eachChildPub(docId, (publication) => {\n            publication.unpublish();\n        });\n    }\n}\n\nexport default Publication;\n"]},"hash":"46d31b2dc895bed382fad08eeb5b4009b148358c"}
