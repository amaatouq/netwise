{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"semver","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"semver"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]}],"exports":{"exported":["checkNpmVersions"],"specifiers":[{"kind":"local","local":"checkNpmVersions","exported":"checkNpmVersions"}]}}},"options":{"filename":"packages/tmeasday:check-npm-versions/check-npm-versions.js","filenameRelative":"packages/tmeasday:check-npm-versions/check-npm-versions.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/tmeasday:check-npm-versions/check-npm-versions.js.map","sourceFileName":"packages/tmeasday:check-npm-versions/check-npm-versions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"check-npm-versions"},"ignored":false,"code":"const module1 = module;\nmodule1.export({\n  checkNpmVersions: () => checkNpmVersions\n});\nlet semver;\nmodule1.watch(require(\"semver\"), {\n  default(v) {\n    semver = v;\n  }\n\n}, 0);\n\nlet _;\n\nmodule1.watch(require(\"meteor/underscore\"), {\n  _(v) {\n    _ = v;\n  }\n\n}, 1);\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nconst compatibleVersionIsInstalled = (name, range) => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;\n\n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    // XXX add something to the tool to make this more reliable\n    const message = e.toString(); // One message comes out of the install npm package the other from npm directly\n\n    if (message.match(\"Cannot find module\") || message.match(\"Can't find npm module\")) {\n      return false;\n    } else {\n      throw e;\n    }\n  }\n};\n\nconst checkNpmVersions = (packages, packageName) => {\n  const failures = {};\n\n  _.forEach(packages, (range, name) => {\n    const failure = compatibleVersionIsInstalled(name, range);\n\n    if (failure !== true) {\n      failures[name] = failure;\n    }\n  });\n\n  if (_.keys(failures).length === 0) {\n    return true;\n  }\n\n  const errors = [];\n\n  _.forEach(failures, (installed, name) => {\n    const requirement = `${name}@${packages[name]}`;\n\n    if (installed) {\n      errors.push(` - ${name}@${installed} installed, ${requirement} needed`);\n    } else {\n      errors.push(` - ${name}@${packages[name]} not installed.`);\n    }\n  });\n\n  const qualifier = packageName ? `(for ${packageName}) ` : '';\n  console.warn(`WARNING: npm peer requirements ${qualifier}not installed:\n${errors.join('\\n')}\n\nRead more about installing npm peer dependencies:\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n`);\n};","map":{"version":3,"sources":["packages/tmeasday:check-npm-versions/check-npm-versions.js"],"names":["module1","module","export","checkNpmVersions","semver","watch","require","default","v","_","compatibleVersionIsInstalled","name","range","installedVersion","version","satisfies","e","message","toString","match","packages","packageName","failures","forEach","failure","keys","length","errors","installed","requirement","push","qualifier","console","warn","join"],"mappings":"AAAA,MAAMA,UAAQC,MAAd;AAAqBD,QAAQE,MAAR,CAAe;AAACC,oBAAiB,MAAIA;AAAtB,CAAf;AAAwD,IAAIC,MAAJ;AAAWJ,QAAQK,KAAR,CAAcC,QAAQ,QAAR,CAAd,EAAgC;AAACC,UAAQC,CAAR,EAAU;AAACJ,aAAOI,CAAP;AAAS;;AAArB,CAAhC,EAAuD,CAAvD;;AAA0D,IAAIC,CAAJ;;AAAMT,QAAQK,KAAR,CAAcC,QAAQ,mBAAR,CAAd,EAA2C;AAACG,IAAED,CAAF,EAAI;AAACC,QAAED,CAAF;AAAI;;AAAV,CAA3C,EAAuD,CAAvD;;AAGxJ;AACA;AACA;AACA;AACA,MAAME,+BAA+B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpD,MAAI;AACF,UAAMC,mBAAmBP,QAAS,GAAEK,IAAK,eAAhB,EAAgCG,OAAzD;;AACA,QAAIV,OAAOW,SAAP,CAAiBF,gBAAjB,EAAmCD,KAAnC,CAAJ,EAA+C;AAC7C,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAOC,gBAAP;AACD;AACF,GAPD,CAOE,OAAOG,CAAP,EAAU;AACV;AACA,UAAMC,UAAUD,EAAEE,QAAF,EAAhB,CAFU,CAGV;;AACA,QAAID,QAAQE,KAAR,CAAc,oBAAd,KAAuCF,QAAQE,KAAR,CAAc,uBAAd,CAA3C,EAAmF;AACjF,aAAO,KAAP;AACD,KAFD,MAEO;AACL,YAAMH,CAAN;AACD;AACF;AACF,CAlBD;;AAoBO,MAAMb,mBAAmB,CAACiB,QAAD,EAAWC,WAAX,KAA2B;AACzD,QAAMC,WAAW,EAAjB;;AACAb,IAAEc,OAAF,CAAUH,QAAV,EAAoB,CAACR,KAAD,EAAQD,IAAR,KAAiB;AACnC,UAAMa,UAAUd,6BAA6BC,IAA7B,EAAmCC,KAAnC,CAAhB;;AACA,QAAIY,YAAY,IAAhB,EAAsB;AACpBF,eAASX,IAAT,IAAiBa,OAAjB;AACD;AACF,GALD;;AAOA,MAAIf,EAAEgB,IAAF,CAAOH,QAAP,EAAiBI,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,WAAO,IAAP;AACD;;AAED,QAAMC,SAAS,EAAf;;AACAlB,IAAEc,OAAF,CAAUD,QAAV,EAAoB,CAACM,SAAD,EAAYjB,IAAZ,KAAqB;AACvC,UAAMkB,cAAe,GAAElB,IAAK,IAAGS,SAAST,IAAT,CAAe,EAA9C;;AAEA,QAAIiB,SAAJ,EAAe;AACbD,aAAOG,IAAP,CAAa,MAAKnB,IAAK,IAAGiB,SAAU,eAAcC,WAAY,SAA9D;AACD,KAFD,MAEO;AACLF,aAAOG,IAAP,CAAa,MAAKnB,IAAK,IAAGS,SAAST,IAAT,CAAe,iBAAzC;AACD;AACF,GARD;;AAUA,QAAMoB,YAAYV,cAAe,QAAOA,WAAY,IAAlC,GAAwC,EAA1D;AACAW,UAAQC,IAAR,CAAc,kCAAiCF,SAAU;EACzDJ,OAAOO,IAAP,CAAY,IAAZ,CAAkB;;;;CADlB;AAMD,CA/BM","file":"packages/tmeasday:check-npm-versions/check-npm-versions.js.map","sourcesContent":["import semver from 'semver';\nimport { _ } from 'meteor/underscore';\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nconst compatibleVersionIsInstalled = (name, range) => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;  \n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    // XXX add something to the tool to make this more reliable\n    const message = e.toString();\n    // One message comes out of the install npm package the other from npm directly\n    if (message.match(\"Cannot find module\") || message.match(\"Can't find npm module\")) {\n      return false;\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport const checkNpmVersions = (packages, packageName) => {\n  const failures = {};\n  _.forEach(packages, (range, name) => {\n    const failure = compatibleVersionIsInstalled(name, range);\n    if (failure !== true) {\n      failures[name] = failure;\n    }\n  });\n\n  if (_.keys(failures).length === 0) {\n    return true;\n  }\n\n  const errors = [];\n  _.forEach(failures, (installed, name) => {\n    const requirement = `${name}@${packages[name]}`;\n\n    if (installed) {\n      errors.push(` - ${name}@${installed} installed, ${requirement} needed`);\n    } else {\n      errors.push(` - ${name}@${packages[name]} not installed.`);\n    }\n  });\n\n  const qualifier = packageName ? `(for ${packageName}) ` : '';\n  console.warn(`WARNING: npm peer requirements ${qualifier}not installed:\n${errors.join('\\n')}\n\nRead more about installing npm peer dependencies:\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n`);\n};\n"]},"hash":"a1e20383ca475b3502e3d8e8054eba8e02aa2fda"}
