[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ReactMeteorData;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"react-meteor-data\":{\"react-meteor-data.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/react-meteor-data/react-meteor-data.jsx                                                    //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nmodule.watch(require(\"./createContainer.jsx\"), {\n  default(v) {\n    exports.createContainer = v;\n  }\n\n}, 1);\nmodule.watch(require(\"./ReactMeteorData.jsx\"), {\n  default(v) {\n    exports.withTracker = v;\n  }\n\n}, 2);\nmodule.watch(require(\"./ReactMeteorData.jsx\"), {\n  ReactMeteorData(v) {\n    exports.ReactMeteorData = v;\n  }\n\n}, 3);\nlet checkNpmVersions;\nmodule.watch(require(\"meteor/tmeasday:check-npm-versions\"), {\n  checkNpmVersions(v) {\n    checkNpmVersions = v;\n  }\n\n}, 0);\ncheckNpmVersions({\n  react: '15.3 - 16'\n}, 'react-meteor-data');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ReactMeteorData.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/react-meteor-data/ReactMeteorData.jsx                                                      //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nvar _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.export({\n  ReactMeteorData: () => ReactMeteorData,\n  default: () => connect\n});\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Tracker;\nmodule.watch(require(\"meteor/tracker\"), {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 2);\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n\n    if (!component.getMeteorData) {\n      return null;\n    } // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n\n\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data; // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n\n    this.computation = Tracker.nonreactive(() => Tracker.autorun(c => {\n      if (c.firstRun) {\n        const savedSetState = component.setState;\n\n        try {\n          component.setState = () => {\n            throw new Error('Can\\'t call `setState` inside `getMeteorData` as this could ' + 'cause an endless loop. To respond to Meteor data changing, ' + 'consider making this component a \\\"wrapper component\\\" that ' + 'only fetches data and passes it in as props to a child ' + 'component. Then you can use `componentWillReceiveProps` in ' + 'that child component.');\n          };\n\n          data = component.getMeteorData();\n        } finally {\n          component.setState = savedSetState;\n        }\n      } else {\n        // Stop this computation instead of using the re-run.\n        // We use a brand-new autorun for each call to getMeteorData\n        // to capture dependencies on any reactive data sources that\n        // are accessed.  The reason we can't use a single autorun\n        // for the lifetime of the component is that Tracker only\n        // re-runs autoruns at flush time, while we need to be able to\n        // re-call getMeteorData synchronously whenever we want, e.g.\n        // from componentWillUpdate.\n        c.stop(); // Calling forceUpdate() triggers componentWillUpdate which\n        // recalculates getMeteorData() and re-renders the component.\n\n        component.forceUpdate();\n      }\n    }));\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach(key => {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn('Warning: you are returning a Mongo cursor from getMeteorData. ' + 'This value will not be reactive. You probably want to call ' + '`.fetch()` on the cursor before returning it.');\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (!(newData && typeof newData === 'object')) {\n      throw new Error('Expected object returned from getMeteorData');\n    } // update componentData in place based on newData\n\n\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    } // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n\n\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n\n    this.oldData = newData;\n  }\n\n}\n\nconst ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n\n    const newData = this._meteorDataManager.calculateData();\n\n    this._meteorDataManager.updateData(newData);\n  },\n\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  }\n\n};\n\nclass ReactComponent extends React.Component {}\n\nObject.assign(ReactComponent.prototype, ReactMeteorData);\n\nclass ReactPureComponent extends React.PureComponent {}\n\nObject.assign(ReactPureComponent.prototype, ReactMeteorData);\n\nfunction connect(options) {\n  let expandedOptions = options;\n\n  if (typeof options === 'function') {\n    expandedOptions = {\n      getMeteorData: options\n    };\n  }\n\n  const {\n    getMeteorData,\n    pure = true\n  } = expandedOptions;\n  const BaseComponent = pure ? ReactPureComponent : ReactComponent;\n  return WrappedComponent => class ReactMeteorDataComponent extends BaseComponent {\n    getMeteorData() {\n      return getMeteorData(this.props);\n    }\n\n    render() {\n      return React.createElement(WrappedComponent, (0, _extends3.default)({}, this.props, this.data));\n    }\n\n  };\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"createContainer.jsx\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/react-meteor-data/createContainer.jsx                                                      //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nmodule.export({\n  default: () => createContainer\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet React;\nmodule.watch(require(\"react\"), {\n  default(v) {\n    React = v;\n  }\n\n}, 1);\nlet connect;\nmodule.watch(require(\"./ReactMeteorData.jsx\"), {\n  default(v) {\n    connect = v;\n  }\n\n}, 2);\nlet hasDisplayedWarning = false;\n\nfunction createContainer(options, Component) {\n  if (!hasDisplayedWarning && Meteor.isDevelopment) {\n    console.warn('Warning: createContainer was deprecated in react-meteor-data@0.2.13. Use withTracker instead.\\n' + 'https://github.com/meteor/react-packages/tree/devel/packages/react-meteor-data#usage');\n    hasDisplayedWarning = true;\n  }\n\n  return connect(options)(Component);\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/react-meteor-data/react-meteor-data.jsx\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['react-meteor-data'] = exports, {\n  ReactMeteorData: ReactMeteorData\n});\n\n})();\n","servePath":"/packages/react-meteor-data.js","sourceMap":{"version":3,"sources":["packages/react-meteor-data/react-meteor-data.jsx","packages/react-meteor-data/ReactMeteorData.jsx","packages/react-meteor-data/createContainer.jsx"],"names":["module","watch","require","default","v","exports","createContainer","withTracker","ReactMeteorData","checkNpmVersions","react","export","connect","React","Meteor","Tracker","MeteorDataManager","constructor","component","computation","oldData","dispose","stop","calculateData","getMeteorData","isServer","data","nonreactive","autorun","c","firstRun","savedSetState","setState","Error","forceUpdate","Package","mongo","Mongo","Object","keys","forEach","key","Cursor","console","warn","updateData","newData","componentWillMount","_meteorDataManager","componentWillUpdate","nextProps","nextState","saveProps","props","saveState","state","componentWillUnmount","ReactComponent","Component","assign","prototype","ReactPureComponent","PureComponent","options","expandedOptions","pure","BaseComponent","WrappedComponent","ReactMeteorDataComponent","render","hasDisplayedWarning","isDevelopment"],"mappings":"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","file":"/packages/react-meteor-data.js","sourcesContent":["import { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\n\ncheckNpmVersions({\n  react: '15.3 - 16',\n}, 'react-meteor-data');\n\nexport { default as createContainer } from './createContainer.jsx';\nexport { default as withTracker } from './ReactMeteorData.jsx';\nexport { ReactMeteorData } from './ReactMeteorData.jsx';\n","/* global Package */\n/* eslint-disable react/prefer-stateless-function */\n\nimport React from 'react';\nimport { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n\n    if (!component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(() => (\n      Tracker.autorun((c) => {\n        if (c.firstRun) {\n          const savedSetState = component.setState;\n          try {\n            component.setState = () => {\n              throw new Error(\n                'Can\\'t call `setState` inside `getMeteorData` as this could '\n                + 'cause an endless loop. To respond to Meteor data changing, '\n                + 'consider making this component a \\\"wrapper component\\\" that '\n                + 'only fetches data and passes it in as props to a child '\n                + 'component. Then you can use `componentWillReceiveProps` in '\n                + 'that child component.');\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      })\n    ));\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach((key) => {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\n            'Warning: you are returning a Mongo cursor from getMeteorData. '\n            + 'This value will not be reactive. You probably want to call '\n            + '`.fetch()` on the cursor before returning it.'\n          );\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (!(newData && (typeof newData) === 'object')) {\n      throw new Error('Expected object returned from getMeteorData');\n    }\n    // update componentData in place based on newData\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n    this.oldData = newData;\n  }\n}\n\nexport const ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    const newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  },\n};\n\nclass ReactComponent extends React.Component {}\nObject.assign(ReactComponent.prototype, ReactMeteorData);\nclass ReactPureComponent extends React.PureComponent {}\nObject.assign(ReactPureComponent.prototype, ReactMeteorData);\n\nexport default function connect(options) {\n  let expandedOptions = options;\n  if (typeof options === 'function') {\n    expandedOptions = {\n      getMeteorData: options,\n    };\n  }\n\n  const { getMeteorData, pure = true } = expandedOptions;\n\n  const BaseComponent = pure ? ReactPureComponent : ReactComponent;\n  return (WrappedComponent) => (\n    class ReactMeteorDataComponent extends BaseComponent {\n      getMeteorData() {\n        return getMeteorData(this.props);\n      }\n      render() {\n        return <WrappedComponent {...this.props} {...this.data} />;\n      }\n    }\n  );\n}\n","/**\n * Container helper using react-meteor-data.\n */\n\nimport { Meteor } from 'meteor/meteor';\nimport React from 'react';\nimport connect from './ReactMeteorData.jsx';\n\nlet hasDisplayedWarning = false;\n\nexport default function createContainer(options, Component) {\n  if (!hasDisplayedWarning && Meteor.isDevelopment) {\n    console.warn(\n      'Warning: createContainer was deprecated in react-meteor-data@0.2.13. Use withTracker instead.\\n' +\n        'https://github.com/meteor/react-packages/tree/devel/packages/react-meteor-data#usage',\n    );\n    hasDisplayedWarning = true;\n  }\n\n  return connect(options)(Component);\n}\n"]}}]