[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar EJSON = Package.ejson.EJSON;\nvar GeoJSON = Package['geojson-utils'].GeoJSON;\nvar IdMap = Package['id-map'].IdMap;\nvar MongoID = Package['mongo-id'].MongoID;\nvar OrderedDict = Package['ordered-dict'].OrderedDict;\nvar Random = Package.random.Random;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar MinimongoTest, MinimongoError, LocalCollection, Minimongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"minimongo\":{\"minimongo_client.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/minimongo_client.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./minimongo_common.js\"));                                                                        // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/common.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");                                          //\n                                                                                                                       //\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //\n                                                                                                                       //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                                //\n                                                                                                                       //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  hasOwn: function () {                                                                                                // 1\n    return hasOwn;                                                                                                     // 1\n  },                                                                                                                   // 1\n  ELEMENT_OPERATORS: function () {                                                                                     // 1\n    return ELEMENT_OPERATORS;                                                                                          // 1\n  },                                                                                                                   // 1\n  compileDocumentSelector: function () {                                                                               // 1\n    return compileDocumentSelector;                                                                                    // 1\n  },                                                                                                                   // 1\n  equalityElementMatcher: function () {                                                                                // 1\n    return equalityElementMatcher;                                                                                     // 1\n  },                                                                                                                   // 1\n  expandArraysInBranches: function () {                                                                                // 1\n    return expandArraysInBranches;                                                                                     // 1\n  },                                                                                                                   // 1\n  isIndexable: function () {                                                                                           // 1\n    return isIndexable;                                                                                                // 1\n  },                                                                                                                   // 1\n  isNumericKey: function () {                                                                                          // 1\n    return isNumericKey;                                                                                               // 1\n  },                                                                                                                   // 1\n  isOperatorObject: function () {                                                                                      // 1\n    return isOperatorObject;                                                                                           // 1\n  },                                                                                                                   // 1\n  makeLookupFunction: function () {                                                                                    // 1\n    return makeLookupFunction;                                                                                         // 1\n  },                                                                                                                   // 1\n  nothingMatcher: function () {                                                                                        // 1\n    return nothingMatcher;                                                                                             // 1\n  },                                                                                                                   // 1\n  pathsToTree: function () {                                                                                           // 1\n    return pathsToTree;                                                                                                // 1\n  },                                                                                                                   // 1\n  populateDocumentWithQueryFields: function () {                                                                       // 1\n    return populateDocumentWithQueryFields;                                                                            // 1\n  },                                                                                                                   // 1\n  projectionDetails: function () {                                                                                     // 1\n    return projectionDetails;                                                                                          // 1\n  },                                                                                                                   // 1\n  regexpElementMatcher: function () {                                                                                  // 1\n    return regexpElementMatcher;                                                                                       // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar LocalCollection = void 0;                                                                                          // 1\nmodule.watch(require(\"./local_collection.js\"), {                                                                       // 1\n  \"default\": function (v) {                                                                                            // 1\n    LocalCollection = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 3\nvar ELEMENT_OPERATORS = {                                                                                              // 17\n  $lt: makeInequality(function (cmpValue) {                                                                            // 18\n    return cmpValue < 0;                                                                                               // 18\n  }),                                                                                                                  // 18\n  $gt: makeInequality(function (cmpValue) {                                                                            // 19\n    return cmpValue > 0;                                                                                               // 19\n  }),                                                                                                                  // 19\n  $lte: makeInequality(function (cmpValue) {                                                                           // 20\n    return cmpValue <= 0;                                                                                              // 20\n  }),                                                                                                                  // 20\n  $gte: makeInequality(function (cmpValue) {                                                                           // 21\n    return cmpValue >= 0;                                                                                              // 21\n  }),                                                                                                                  // 21\n  $mod: {                                                                                                              // 22\n    compileElementSelector: function (operand) {                                                                       // 23\n      if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');                                               // 27\n      } // XXX could require to be ints or round or something                                                          // 28\n                                                                                                                       //\n                                                                                                                       //\n      var divisor = operand[0];                                                                                        // 31\n      var remainder = operand[1];                                                                                      // 32\n      return function (value) {                                                                                        // 33\n        return typeof value === 'number' && value % divisor === remainder;                                             // 33\n      };                                                                                                               // 33\n    }                                                                                                                  // 36\n  },                                                                                                                   // 22\n  $in: {                                                                                                               // 38\n    compileElementSelector: function (operand) {                                                                       // 39\n      if (!Array.isArray(operand)) {                                                                                   // 40\n        throw Error('$in needs an array');                                                                             // 41\n      }                                                                                                                // 42\n                                                                                                                       //\n      var elementMatchers = operand.map(function (option) {                                                            // 44\n        if (option instanceof RegExp) {                                                                                // 45\n          return regexpElementMatcher(option);                                                                         // 46\n        }                                                                                                              // 47\n                                                                                                                       //\n        if (isOperatorObject(option)) {                                                                                // 49\n          throw Error('cannot nest $ under $in');                                                                      // 50\n        }                                                                                                              // 51\n                                                                                                                       //\n        return equalityElementMatcher(option);                                                                         // 53\n      });                                                                                                              // 54\n      return function (value) {                                                                                        // 56\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.                                                  // 57\n        if (value === undefined) {                                                                                     // 58\n          value = null;                                                                                                // 59\n        }                                                                                                              // 60\n                                                                                                                       //\n        return elementMatchers.some(function (matcher) {                                                               // 62\n          return matcher(value);                                                                                       // 62\n        });                                                                                                            // 62\n      };                                                                                                               // 63\n    }                                                                                                                  // 64\n  },                                                                                                                   // 38\n  $size: {                                                                                                             // 66\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we                                         // 67\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a                                         // 68\n    // possible value.                                                                                                 // 69\n    dontExpandLeafArrays: true,                                                                                        // 70\n    compileElementSelector: function (operand) {                                                                       // 71\n      if (typeof operand === 'string') {                                                                               // 72\n        // Don't ask me why, but by experimentation, this seems to be what Mongo                                       // 73\n        // does.                                                                                                       // 74\n        operand = 0;                                                                                                   // 75\n      } else if (typeof operand !== 'number') {                                                                        // 76\n        throw Error('$size needs a number');                                                                           // 77\n      }                                                                                                                // 78\n                                                                                                                       //\n      return function (value) {                                                                                        // 80\n        return Array.isArray(value) && value.length === operand;                                                       // 80\n      };                                                                                                               // 80\n    }                                                                                                                  // 81\n  },                                                                                                                   // 66\n  $type: {                                                                                                             // 83\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should                                          // 84\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:                                          // 85\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but                                          // 86\n    // should *not* include it itself.                                                                                 // 87\n    dontIncludeLeafArrays: true,                                                                                       // 88\n    compileElementSelector: function (operand) {                                                                       // 89\n      if (typeof operand !== 'number') {                                                                               // 90\n        throw Error('$type needs a number');                                                                           // 91\n      }                                                                                                                // 92\n                                                                                                                       //\n      return function (value) {                                                                                        // 94\n        return value !== undefined && LocalCollection._f._type(value) === operand;                                     // 94\n      };                                                                                                               // 94\n    }                                                                                                                  // 97\n  },                                                                                                                   // 83\n  $bitsAllSet: {                                                                                                       // 99\n    compileElementSelector: function (operand) {                                                                       // 100\n      var mask = getOperandBitmask(operand, '$bitsAllSet');                                                            // 101\n      return function (value) {                                                                                        // 102\n        var bitmask = getValueBitmask(value, mask.length);                                                             // 103\n        return bitmask && mask.every(function (byte, i) {                                                              // 104\n          return (bitmask[i] & byte) === byte;                                                                         // 104\n        });                                                                                                            // 104\n      };                                                                                                               // 105\n    }                                                                                                                  // 106\n  },                                                                                                                   // 99\n  $bitsAnySet: {                                                                                                       // 108\n    compileElementSelector: function (operand) {                                                                       // 109\n      var mask = getOperandBitmask(operand, '$bitsAnySet');                                                            // 110\n      return function (value) {                                                                                        // 111\n        var bitmask = getValueBitmask(value, mask.length);                                                             // 112\n        return bitmask && mask.some(function (byte, i) {                                                               // 113\n          return (~bitmask[i] & byte) !== byte;                                                                        // 113\n        });                                                                                                            // 113\n      };                                                                                                               // 114\n    }                                                                                                                  // 115\n  },                                                                                                                   // 108\n  $bitsAllClear: {                                                                                                     // 117\n    compileElementSelector: function (operand) {                                                                       // 118\n      var mask = getOperandBitmask(operand, '$bitsAllClear');                                                          // 119\n      return function (value) {                                                                                        // 120\n        var bitmask = getValueBitmask(value, mask.length);                                                             // 121\n        return bitmask && mask.every(function (byte, i) {                                                              // 122\n          return !(bitmask[i] & byte);                                                                                 // 122\n        });                                                                                                            // 122\n      };                                                                                                               // 123\n    }                                                                                                                  // 124\n  },                                                                                                                   // 117\n  $bitsAnyClear: {                                                                                                     // 126\n    compileElementSelector: function (operand) {                                                                       // 127\n      var mask = getOperandBitmask(operand, '$bitsAnyClear');                                                          // 128\n      return function (value) {                                                                                        // 129\n        var bitmask = getValueBitmask(value, mask.length);                                                             // 130\n        return bitmask && mask.some(function (byte, i) {                                                               // 131\n          return (bitmask[i] & byte) !== byte;                                                                         // 131\n        });                                                                                                            // 131\n      };                                                                                                               // 132\n    }                                                                                                                  // 133\n  },                                                                                                                   // 126\n  $regex: {                                                                                                            // 135\n    compileElementSelector: function (operand, valueSelector) {                                                        // 136\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {                                               // 137\n        throw Error('$regex has to be a string or RegExp');                                                            // 138\n      }                                                                                                                // 139\n                                                                                                                       //\n      var regexp = void 0;                                                                                             // 141\n                                                                                                                       //\n      if (valueSelector.$options !== undefined) {                                                                      // 142\n        // Options passed in $options (even the empty string) always overrides                                         // 143\n        // options in the RegExp object itself.                                                                        // 144\n        // Be clear that we only support the JS-supported options, not extended                                        // 146\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s                                       // 147\n        // by transforming the regexp, but not today...                                                                // 148\n        if (/[^gim]/.test(valueSelector.$options)) {                                                                   // 149\n          throw new Error('Only the i, m, and g regexp options are supported');                                        // 150\n        }                                                                                                              // 151\n                                                                                                                       //\n        var source = operand instanceof RegExp ? operand.source : operand;                                             // 153\n        regexp = new RegExp(source, valueSelector.$options);                                                           // 154\n      } else if (operand instanceof RegExp) {                                                                          // 155\n        regexp = operand;                                                                                              // 156\n      } else {                                                                                                         // 157\n        regexp = new RegExp(operand);                                                                                  // 158\n      }                                                                                                                // 159\n                                                                                                                       //\n      return regexpElementMatcher(regexp);                                                                             // 161\n    }                                                                                                                  // 162\n  },                                                                                                                   // 135\n  $elemMatch: {                                                                                                        // 164\n    dontExpandLeafArrays: true,                                                                                        // 165\n    compileElementSelector: function (operand, valueSelector, matcher) {                                               // 166\n      if (!LocalCollection._isPlainObject(operand)) {                                                                  // 167\n        throw Error('$elemMatch need an object');                                                                      // 168\n      }                                                                                                                // 169\n                                                                                                                       //\n      var isDocMatcher = !isOperatorObject(Object.keys(operand).filter(function (key) {                                // 171\n        return !hasOwn.call(LOGICAL_OPERATORS, key);                                                                   // 173\n      }).reduce(function (a, b) {                                                                                      // 173\n        var _Object$assign;                                                                                            // 174\n                                                                                                                       //\n        return Object.assign(a, (_Object$assign = {}, _Object$assign[b] = operand[b], _Object$assign));                // 174\n      }, {}), true);                                                                                                   // 174\n      var subMatcher = void 0;                                                                                         // 177\n                                                                                                                       //\n      if (isDocMatcher) {                                                                                              // 178\n        // This is NOT the same as compileValueSelector(operand), and not just                                         // 179\n        // because of the slightly different calling convention.                                                       // 180\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not                                                // 181\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.                                        // 182\n        subMatcher = compileDocumentSelector(operand, matcher, {                                                       // 183\n          inElemMatch: true                                                                                            // 184\n        });                                                                                                            // 184\n      } else {                                                                                                         // 185\n        subMatcher = compileValueSelector(operand, matcher);                                                           // 186\n      }                                                                                                                // 187\n                                                                                                                       //\n      return function (value) {                                                                                        // 189\n        if (!Array.isArray(value)) {                                                                                   // 190\n          return false;                                                                                                // 191\n        }                                                                                                              // 192\n                                                                                                                       //\n        for (var i = 0; i < value.length; ++i) {                                                                       // 194\n          var arrayElement = value[i];                                                                                 // 195\n          var arg = void 0;                                                                                            // 196\n                                                                                                                       //\n          if (isDocMatcher) {                                                                                          // 197\n            // We can only match {$elemMatch: {b: 3}} against objects.                                                 // 198\n            // (We can also match against arrays, if there's numeric indices,                                          // 199\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)                                                   // 200\n            if (!isIndexable(arrayElement)) {                                                                          // 201\n              return false;                                                                                            // 202\n            }                                                                                                          // 203\n                                                                                                                       //\n            arg = arrayElement;                                                                                        // 205\n          } else {                                                                                                     // 206\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches                                            // 207\n            // {a: [8]} but not {a: [[8]]}                                                                             // 208\n            arg = [{                                                                                                   // 209\n              value: arrayElement,                                                                                     // 209\n              dontIterate: true                                                                                        // 209\n            }];                                                                                                        // 209\n          } // XXX support $near in $elemMatch by propagating $distance?                                               // 210\n                                                                                                                       //\n                                                                                                                       //\n          if (subMatcher(arg).result) {                                                                                // 212\n            return i; // specially understood to mean \"use as arrayIndices\"                                            // 213\n          }                                                                                                            // 214\n        }                                                                                                              // 215\n                                                                                                                       //\n        return false;                                                                                                  // 217\n      };                                                                                                               // 218\n    }                                                                                                                  // 219\n  }                                                                                                                    // 164\n};                                                                                                                     // 17\n// Operators that appear at the top level of a document selector.                                                      // 223\nvar LOGICAL_OPERATORS = {                                                                                              // 224\n  $and: function (subSelector, matcher, inElemMatch) {                                                                 // 225\n    return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch));                    // 226\n  },                                                                                                                   // 229\n  $or: function (subSelector, matcher, inElemMatch) {                                                                  // 231\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.                                                                                    // 239\n                                                                                                                       //\n    if (matchers.length === 1) {                                                                                       // 240\n      return matchers[0];                                                                                              // 241\n    }                                                                                                                  // 242\n                                                                                                                       //\n    return function (doc) {                                                                                            // 244\n      var result = matchers.some(function (fn) {                                                                       // 245\n        return fn(doc).result;                                                                                         // 245\n      }); // $or does NOT set arrayIndices when it has multiple                                                        // 245\n      // sub-expressions. (Tested against MongoDB.)                                                                    // 247\n                                                                                                                       //\n      return {                                                                                                         // 248\n        result: result                                                                                                 // 248\n      };                                                                                                               // 248\n    };                                                                                                                 // 249\n  },                                                                                                                   // 250\n  $nor: function (subSelector, matcher, inElemMatch) {                                                                 // 252\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);                                 // 253\n    return function (doc) {                                                                                            // 258\n      var result = matchers.every(function (fn) {                                                                      // 259\n        return !fn(doc).result;                                                                                        // 259\n      }); // Never set arrayIndices, because we only match if nothing in particular                                    // 259\n      // 'matched' (and because this is consistent with MongoDB).                                                      // 261\n                                                                                                                       //\n      return {                                                                                                         // 262\n        result: result                                                                                                 // 262\n      };                                                                                                               // 262\n    };                                                                                                                 // 263\n  },                                                                                                                   // 264\n  $where: function (selectorValue, matcher) {                                                                          // 266\n    // Record that *any* path may be used.                                                                             // 267\n    matcher._recordPathUsed('');                                                                                       // 268\n                                                                                                                       //\n    matcher._hasWhere = true;                                                                                          // 269\n                                                                                                                       //\n    if (!(selectorValue instanceof Function)) {                                                                        // 271\n      // XXX MongoDB seems to have more complex logic to decide where or or not                                        // 272\n      // to add 'return'; not sure exactly what it is.                                                                 // 273\n      selectorValue = Function('obj', \"return \" + selectorValue);                                                      // 274\n    } // We make the document available as both `this` and `obj`.                                                      // 275\n    // // XXX not sure what we should do if this throws                                                                // 278\n                                                                                                                       //\n                                                                                                                       //\n    return function (doc) {                                                                                            // 279\n      return {                                                                                                         // 279\n        result: selectorValue.call(doc, doc)                                                                           // 279\n      };                                                                                                               // 279\n    };                                                                                                                 // 279\n  },                                                                                                                   // 280\n  // This is just used as a comment in the query (in MongoDB, it also ends up in                                       // 282\n  // query logs); it has no effect on the actual selection.                                                            // 283\n  $comment: function () {                                                                                              // 284\n    return function () {                                                                                               // 285\n      return {                                                                                                         // 285\n        result: true                                                                                                   // 285\n      };                                                                                                               // 285\n    };                                                                                                                 // 285\n  }                                                                                                                    // 286\n}; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a                                       // 224\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as                                         // 290\n// \"match each branched value independently and combine with                                                           // 291\n// convertElementMatcherToBranchedMatcher\".                                                                            // 292\n                                                                                                                       //\nvar VALUE_OPERATORS = {                                                                                                // 293\n  $eq: function (operand) {                                                                                            // 294\n    return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));                                    // 295\n  },                                                                                                                   // 298\n  $not: function (operand, valueSelector, matcher) {                                                                   // 299\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));                                              // 300\n  },                                                                                                                   // 301\n  $ne: function (operand) {                                                                                            // 302\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));             // 303\n  },                                                                                                                   // 306\n  $nin: function (operand) {                                                                                           // 307\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },                                                                                                                   // 313\n  $exists: function (operand) {                                                                                        // 314\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {                                             // 315\n      return value !== undefined;                                                                                      // 316\n    });                                                                                                                // 316\n    return operand ? exists : invertBranchedMatcher(exists);                                                           // 318\n  },                                                                                                                   // 319\n  // $options just provides options for $regex; its logic is inside $regex                                             // 320\n  $options: function (operand, valueSelector) {                                                                        // 321\n    if (!hasOwn.call(valueSelector, '$regex')) {                                                                       // 322\n      throw Error('$options needs a $regex');                                                                          // 323\n    }                                                                                                                  // 324\n                                                                                                                       //\n    return everythingMatcher;                                                                                          // 326\n  },                                                                                                                   // 327\n  // $maxDistance is basically an argument to $near                                                                    // 328\n  $maxDistance: function (operand, valueSelector) {                                                                    // 329\n    if (!valueSelector.$near) {                                                                                        // 330\n      throw Error('$maxDistance needs a $near');                                                                       // 331\n    }                                                                                                                  // 332\n                                                                                                                       //\n    return everythingMatcher;                                                                                          // 334\n  },                                                                                                                   // 335\n  $all: function (operand, valueSelector, matcher) {                                                                   // 336\n    if (!Array.isArray(operand)) {                                                                                     // 337\n      throw Error('$all requires array');                                                                              // 338\n    } // Not sure why, but this seems to be what MongoDB does.                                                         // 339\n                                                                                                                       //\n                                                                                                                       //\n    if (operand.length === 0) {                                                                                        // 342\n      return nothingMatcher;                                                                                           // 343\n    }                                                                                                                  // 344\n                                                                                                                       //\n    var branchedMatchers = operand.map(function (criterion) {                                                          // 346\n      // XXX handle $all/$elemMatch combination                                                                        // 347\n      if (isOperatorObject(criterion)) {                                                                               // 348\n        throw Error('no $ expressions in $all');                                                                       // 349\n      } // This is always a regexp or equality selector.                                                               // 350\n                                                                                                                       //\n                                                                                                                       //\n      return compileValueSelector(criterion, matcher);                                                                 // 353\n    }); // andBranchedMatchers does NOT require all selectors to return true on the                                    // 354\n    // SAME branch.                                                                                                    // 357\n                                                                                                                       //\n    return andBranchedMatchers(branchedMatchers);                                                                      // 358\n  },                                                                                                                   // 359\n  $near: function (operand, valueSelector, matcher, isRoot) {                                                          // 360\n    if (!isRoot) {                                                                                                     // 361\n      throw Error('$near can\\'t be inside another $ operator');                                                        // 362\n    }                                                                                                                  // 363\n                                                                                                                       //\n    matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and             // 365\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are                                          // 368\n    // marked with a $geometry property, though legacy coordinates can be                                              // 369\n    // matched using $geometry.                                                                                        // 370\n                                                                                                                       //\n    var maxDistance = void 0,                                                                                          // 371\n        point = void 0,                                                                                                // 371\n        distance = void 0;                                                                                             // 371\n                                                                                                                       //\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {                                // 372\n      // GeoJSON \"2dsphere\" mode.                                                                                      // 373\n      maxDistance = operand.$maxDistance;                                                                              // 374\n      point = operand.$geometry;                                                                                       // 375\n                                                                                                                       //\n      distance = function (value) {                                                                                    // 376\n        // XXX: for now, we don't calculate the actual distance between, say,                                          // 377\n        // polygon and circle. If people care about this use-case it will get                                          // 378\n        // a priority.                                                                                                 // 379\n        if (!value) {                                                                                                  // 380\n          return null;                                                                                                 // 381\n        }                                                                                                              // 382\n                                                                                                                       //\n        if (!value.type) {                                                                                             // 384\n          return GeoJSON.pointDistance(point, {                                                                        // 385\n            type: 'Point',                                                                                             // 387\n            coordinates: pointToArray(value)                                                                           // 387\n          });                                                                                                          // 387\n        }                                                                                                              // 389\n                                                                                                                       //\n        if (value.type === 'Point') {                                                                                  // 391\n          return GeoJSON.pointDistance(point, value);                                                                  // 392\n        }                                                                                                              // 393\n                                                                                                                       //\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;                          // 395\n      };                                                                                                               // 398\n    } else {                                                                                                           // 399\n      maxDistance = valueSelector.$maxDistance;                                                                        // 400\n                                                                                                                       //\n      if (!isIndexable(operand)) {                                                                                     // 402\n        throw Error('$near argument must be coordinate pair or GeoJSON');                                              // 403\n      }                                                                                                                // 404\n                                                                                                                       //\n      point = pointToArray(operand);                                                                                   // 406\n                                                                                                                       //\n      distance = function (value) {                                                                                    // 408\n        if (!isIndexable(value)) {                                                                                     // 409\n          return null;                                                                                                 // 410\n        }                                                                                                              // 411\n                                                                                                                       //\n        return distanceCoordinatePairs(point, value);                                                                  // 413\n      };                                                                                                               // 414\n    }                                                                                                                  // 415\n                                                                                                                       //\n    return function (branchedValues) {                                                                                 // 417\n      // There might be multiple points in the document that match the given                                           // 418\n      // field. Only one of them needs to be within $maxDistance, but we need to                                       // 419\n      // evaluate all of them and use the nearest one for the implicit sort                                            // 420\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)                                             // 421\n      //                                                                                                               // 422\n      // Note: This differs from MongoDB's implementation, where a document will                                       // 423\n      // actually show up *multiple times* in the result set, with one entry for                                       // 424\n      // each within-$maxDistance branching point.                                                                     // 425\n      var result = {                                                                                                   // 426\n        result: false                                                                                                  // 426\n      };                                                                                                               // 426\n      expandArraysInBranches(branchedValues).every(function (branch) {                                                 // 427\n        // if operation is an update, don't skip branches, just return the first                                       // 428\n        // one (#3599)                                                                                                 // 429\n        var curDistance = void 0;                                                                                      // 430\n                                                                                                                       //\n        if (!matcher._isUpdate) {                                                                                      // 431\n          if (!((0, _typeof3.default)(branch.value) === 'object')) {                                                   // 432\n            return true;                                                                                               // 433\n          }                                                                                                            // 434\n                                                                                                                       //\n          curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.          // 436\n                                                                                                                       //\n          if (curDistance === null || curDistance > maxDistance) {                                                     // 439\n            return true;                                                                                               // 440\n          } // Skip anything that's a tie.                                                                             // 441\n                                                                                                                       //\n                                                                                                                       //\n          if (result.distance !== undefined && result.distance <= curDistance) {                                       // 444\n            return true;                                                                                               // 445\n          }                                                                                                            // 446\n        }                                                                                                              // 447\n                                                                                                                       //\n        result.result = true;                                                                                          // 449\n        result.distance = curDistance;                                                                                 // 450\n                                                                                                                       //\n        if (branch.arrayIndices) {                                                                                     // 452\n          result.arrayIndices = branch.arrayIndices;                                                                   // 453\n        } else {                                                                                                       // 454\n          delete result.arrayIndices;                                                                                  // 455\n        }                                                                                                              // 456\n                                                                                                                       //\n        return !matcher._isUpdate;                                                                                     // 458\n      });                                                                                                              // 459\n      return result;                                                                                                   // 461\n    };                                                                                                                 // 462\n  }                                                                                                                    // 463\n}; // NB: We are cheating and using this function to implement 'AND' for both                                          // 293\n// 'document matchers' and 'branched matchers'. They both return result objects                                        // 467\n// but the argument is different: for the former it's a whole doc, whereas for                                         // 468\n// the latter it's an array of 'branched values'.                                                                      // 469\n                                                                                                                       //\nfunction andSomeMatchers(subMatchers) {                                                                                // 470\n  if (subMatchers.length === 0) {                                                                                      // 471\n    return everythingMatcher;                                                                                          // 472\n  }                                                                                                                    // 473\n                                                                                                                       //\n  if (subMatchers.length === 1) {                                                                                      // 475\n    return subMatchers[0];                                                                                             // 476\n  }                                                                                                                    // 477\n                                                                                                                       //\n  return function (docOrBranches) {                                                                                    // 479\n    var match = {};                                                                                                    // 480\n    match.result = subMatchers.every(function (fn) {                                                                   // 481\n      var subResult = fn(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has             // 482\n      // one. Yes, this means that if there are multiple $near fields in a                                             // 485\n      // query, something arbitrary happens; this appears to be consistent with                                        // 486\n      // Mongo.                                                                                                        // 487\n                                                                                                                       //\n      if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {                      // 488\n        match.distance = subResult.distance;                                                                           // 491\n      } // Similarly, propagate arrayIndices from sub-matchers... but to match                                         // 492\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices                                          // 495\n      // wins.                                                                                                         // 496\n                                                                                                                       //\n                                                                                                                       //\n      if (subResult.result && subResult.arrayIndices) {                                                                // 497\n        match.arrayIndices = subResult.arrayIndices;                                                                   // 498\n      }                                                                                                                // 499\n                                                                                                                       //\n      return subResult.result;                                                                                         // 501\n    }); // If we didn't actually match, forget any extra metadata we came up with.                                     // 502\n                                                                                                                       //\n    if (!match.result) {                                                                                               // 505\n      delete match.distance;                                                                                           // 506\n      delete match.arrayIndices;                                                                                       // 507\n    }                                                                                                                  // 508\n                                                                                                                       //\n    return match;                                                                                                      // 510\n  };                                                                                                                   // 511\n}                                                                                                                      // 512\n                                                                                                                       //\nvar andDocumentMatchers = andSomeMatchers;                                                                             // 514\nvar andBranchedMatchers = andSomeMatchers;                                                                             // 515\n                                                                                                                       //\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {                                            // 517\n  if (!Array.isArray(selectors) || selectors.length === 0) {                                                           // 518\n    throw Error('$and/$or/$nor must be nonempty array');                                                               // 519\n  }                                                                                                                    // 520\n                                                                                                                       //\n  return selectors.map(function (subSelector) {                                                                        // 522\n    if (!LocalCollection._isPlainObject(subSelector)) {                                                                // 523\n      throw Error('$or/$and/$nor entries need to be full objects');                                                    // 524\n    }                                                                                                                  // 525\n                                                                                                                       //\n    return compileDocumentSelector(subSelector, matcher, {                                                             // 527\n      inElemMatch: inElemMatch                                                                                         // 527\n    });                                                                                                                // 527\n  });                                                                                                                  // 528\n} // Takes in a selector that could match a full document (eg, the original                                            // 529\n// selector). Returns a function mapping document->result object.                                                      // 532\n//                                                                                                                     // 533\n// matcher is the Matcher object we are compiling.                                                                     // 534\n//                                                                                                                     // 535\n// If this is the root document selector (ie, not wrapped in $and or the like),                                        // 536\n// then isRoot is true. (This is used by $near.)                                                                       // 537\n                                                                                                                       //\n                                                                                                                       //\nfunction compileDocumentSelector(docSelector, matcher) {                                                               // 538\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                                // 538\n  var docMatchers = Object.keys(docSelector).map(function (key) {                                                      // 539\n    var subSelector = docSelector[key];                                                                                // 540\n                                                                                                                       //\n    if (key.substr(0, 1) === '$') {                                                                                    // 542\n      // Outer operators are either logical operators (they recurse back into                                          // 543\n      // this function), or $where.                                                                                    // 544\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {                                                                      // 545\n        throw new Error(\"Unrecognized logical operator: \" + key);                                                      // 546\n      }                                                                                                                // 547\n                                                                                                                       //\n      matcher._isSimple = false;                                                                                       // 549\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);                                        // 550\n    } // Record this path, but only if we aren't in an elemMatcher, since in an                                        // 551\n    // elemMatch this is a path inside an object in an array, not in the doc                                           // 554\n    // root.                                                                                                           // 555\n                                                                                                                       //\n                                                                                                                       //\n    if (!options.inElemMatch) {                                                                                        // 556\n      matcher._recordPathUsed(key);                                                                                    // 557\n    } // Don't add a matcher if subSelector is a function -- this is to match                                          // 558\n    // the behavior of Meteor on the server (inherited from the node mongodb                                           // 561\n    // driver), which is to ignore any part of a selector which is a function.                                         // 562\n                                                                                                                       //\n                                                                                                                       //\n    if (typeof subSelector === 'function') {                                                                           // 563\n      return undefined;                                                                                                // 564\n    }                                                                                                                  // 565\n                                                                                                                       //\n    var lookUpByIndex = makeLookupFunction(key);                                                                       // 567\n    var valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);                                     // 568\n    return function (doc) {                                                                                            // 574\n      return valueMatcher(lookUpByIndex(doc));                                                                         // 574\n    };                                                                                                                 // 574\n  }).filter(Boolean);                                                                                                  // 575\n  return andDocumentMatchers(docMatchers);                                                                             // 577\n}                                                                                                                      // 578\n                                                                                                                       //\n// Takes in a selector that could match a key-indexed value in a document; eg,                                         // 580\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to                                         // 581\n// indicate equality).  Returns a branched matcher: a function mapping                                                 // 582\n// [branched value]->result object.                                                                                    // 583\nfunction compileValueSelector(valueSelector, matcher, isRoot) {                                                        // 584\n  if (valueSelector instanceof RegExp) {                                                                               // 585\n    matcher._isSimple = false;                                                                                         // 586\n    return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));                                // 587\n  }                                                                                                                    // 590\n                                                                                                                       //\n  if (isOperatorObject(valueSelector)) {                                                                               // 592\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);                                                    // 593\n  }                                                                                                                    // 594\n                                                                                                                       //\n  return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));                                // 596\n} // Given an element matcher (which evaluates a single value), returns a branched                                     // 599\n// value (which evaluates the element matcher on all the branches and returns a                                        // 602\n// more structured return value possibly including arrayIndices).                                                      // 603\n                                                                                                                       //\n                                                                                                                       //\nfunction convertElementMatcherToBranchedMatcher(elementMatcher) {                                                      // 604\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                // 604\n  return function (branches) {                                                                                         // 605\n    var expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n    var match = {};                                                                                                    // 610\n    match.result = expanded.some(function (element) {                                                                  // 611\n      var matched = elementMatcher(element.value); // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".                                                                          // 615\n                                                                                                                       //\n      if (typeof matched === 'number') {                                                                               // 616\n        // XXX This code dates from when we only stored a single array index                                           // 617\n        // (for the outermost array). Should we be also including deeper array                                         // 618\n        // indices from the $elemMatch match?                                                                          // 619\n        if (!element.arrayIndices) {                                                                                   // 620\n          element.arrayIndices = [matched];                                                                            // 621\n        }                                                                                                              // 622\n                                                                                                                       //\n        matched = true;                                                                                                // 624\n      } // If some element matched, and it's tagged with array indices, include                                        // 625\n      // those indices in our result object.                                                                           // 628\n                                                                                                                       //\n                                                                                                                       //\n      if (matched && element.arrayIndices) {                                                                           // 629\n        match.arrayIndices = element.arrayIndices;                                                                     // 630\n      }                                                                                                                // 631\n                                                                                                                       //\n      return matched;                                                                                                  // 633\n    });                                                                                                                // 634\n    return match;                                                                                                      // 636\n  };                                                                                                                   // 637\n} // Helpers for $near.                                                                                                // 638\n                                                                                                                       //\n                                                                                                                       //\nfunction distanceCoordinatePairs(a, b) {                                                                               // 641\n  var pointA = pointToArray(a);                                                                                        // 642\n  var pointB = pointToArray(b);                                                                                        // 643\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);                                                     // 645\n} // Takes something that is not an operator object and returns an element matcher                                     // 646\n// for equality with that thing.                                                                                       // 649\n                                                                                                                       //\n                                                                                                                       //\nfunction equalityElementMatcher(elementSelector) {                                                                     // 650\n  if (isOperatorObject(elementSelector)) {                                                                             // 651\n    throw Error('Can\\'t create equalityValueSelector for operator object');                                            // 652\n  } // Special-case: null and undefined are equal (if you got undefined in there                                       // 653\n  // somewhere, or if you got it due to some branch being non-existent in the                                          // 656\n  // weird special case), even though they aren't with EJSON.equals.                                                   // 657\n  // undefined or null                                                                                                 // 658\n                                                                                                                       //\n                                                                                                                       //\n  if (elementSelector == null) {                                                                                       // 659\n    return function (value) {                                                                                          // 660\n      return value == null;                                                                                            // 660\n    };                                                                                                                 // 660\n  }                                                                                                                    // 661\n                                                                                                                       //\n  return function (value) {                                                                                            // 663\n    return LocalCollection._f._equal(elementSelector, value);                                                          // 663\n  };                                                                                                                   // 663\n}                                                                                                                      // 664\n                                                                                                                       //\nfunction everythingMatcher(docOrBranchedValues) {                                                                      // 666\n  return {                                                                                                             // 667\n    result: true                                                                                                       // 667\n  };                                                                                                                   // 667\n}                                                                                                                      // 668\n                                                                                                                       //\nfunction expandArraysInBranches(branches, skipTheArrays) {                                                             // 670\n  var branchesOut = [];                                                                                                // 671\n  branches.forEach(function (branch) {                                                                                 // 673\n    var thisIsArray = Array.isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some                                       // 677\n    // arrays even skipTheArrays is true: these are arrays that were found via                                         // 678\n    // explicit numerical indices.)                                                                                    // 679\n                                                                                                                       //\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {                                                      // 680\n      branchesOut.push({                                                                                               // 681\n        arrayIndices: branch.arrayIndices,                                                                             // 681\n        value: branch.value                                                                                            // 681\n      });                                                                                                              // 681\n    }                                                                                                                  // 682\n                                                                                                                       //\n    if (thisIsArray && !branch.dontIterate) {                                                                          // 684\n      branch.value.forEach(function (value, i) {                                                                       // 685\n        branchesOut.push({                                                                                             // 686\n          arrayIndices: (branch.arrayIndices || []).concat(i),                                                         // 687\n          value: value                                                                                                 // 688\n        });                                                                                                            // 686\n      });                                                                                                              // 690\n    }                                                                                                                  // 691\n  });                                                                                                                  // 692\n  return branchesOut;                                                                                                  // 694\n}                                                                                                                      // 695\n                                                                                                                       //\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.                                                    // 697\nfunction getOperandBitmask(operand, selector) {                                                                        // 698\n  // numeric bitmask                                                                                                   // 699\n  // You can provide a numeric bitmask to be matched against the operand field.                                        // 700\n  // It must be representable as a non-negative 32-bit signed integer.                                                 // 701\n  // Otherwise, $bitsAllSet will return an error.                                                                      // 702\n  if (Number.isInteger(operand) && operand >= 0) {                                                                     // 703\n    return new Uint8Array(new Int32Array([operand]).buffer);                                                           // 704\n  } // bindata bitmask                                                                                                 // 705\n  // You can also use an arbitrarily large BinData instance as a bitmask.                                              // 708\n                                                                                                                       //\n                                                                                                                       //\n  if (EJSON.isBinary(operand)) {                                                                                       // 709\n    return new Uint8Array(operand.buffer);                                                                             // 710\n  } // position list                                                                                                   // 711\n  // If querying a list of bit positions, each <position> must be a non-negative                                       // 714\n  // integer. Bit positions start at 0 from the least significant bit.                                                 // 715\n                                                                                                                       //\n                                                                                                                       //\n  if (Array.isArray(operand) && operand.every(function (x) {                                                           // 716\n    return Number.isInteger(x) && x >= 0;                                                                              // 717\n  })) {                                                                                                                // 717\n    var buffer = new ArrayBuffer((Math.max.apply(Math, (0, _toConsumableArray3.default)(operand)) >> 3) + 1);          // 718\n    var view = new Uint8Array(buffer);                                                                                 // 719\n    operand.forEach(function (x) {                                                                                     // 721\n      view[x >> 3] |= 1 << (x & 0x7);                                                                                  // 722\n    });                                                                                                                // 723\n    return view;                                                                                                       // 725\n  } // bad operand                                                                                                     // 726\n                                                                                                                       //\n                                                                                                                       //\n  throw Error(\"operand to \" + selector + \" must be a numeric bitmask (representable as a \" + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');\n}                                                                                                                      // 734\n                                                                                                                       //\nfunction getValueBitmask(value, length) {                                                                              // 736\n  // The field value must be either numerical or a BinData instance. Otherwise,                                        // 737\n  // $bits... will not match the current document.                                                                     // 738\n  // numerical                                                                                                         // 740\n  if (Number.isSafeInteger(value)) {                                                                                   // 741\n    // $bits... will not match numerical values that cannot be represented as a                                        // 742\n    // signed 64-bit integer. This can be the case if a value is either too                                            // 743\n    // large or small to fit in a signed 64-bit integer, or if it has a                                                // 744\n    // fractional component.                                                                                           // 745\n    var buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT));                                 // 746\n    var view = new Uint32Array(buffer, 0, 2);                                                                          // 750\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;                                                                     // 751\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0; // sign extension                                                   // 752\n                                                                                                                       //\n    if (value < 0) {                                                                                                   // 755\n      view = new Uint8Array(buffer, 2);                                                                                // 756\n      view.forEach(function (byte, i) {                                                                                // 757\n        view[i] = 0xff;                                                                                                // 758\n      });                                                                                                              // 759\n    }                                                                                                                  // 760\n                                                                                                                       //\n    return new Uint8Array(buffer);                                                                                     // 762\n  } // bindata                                                                                                         // 763\n                                                                                                                       //\n                                                                                                                       //\n  if (EJSON.isBinary(value)) {                                                                                         // 766\n    return new Uint8Array(value.buffer);                                                                               // 767\n  } // no match                                                                                                        // 768\n                                                                                                                       //\n                                                                                                                       //\n  return false;                                                                                                        // 771\n} // Actually inserts a key value into the selector document                                                           // 772\n// However, this checks there is no ambiguity in setting                                                               // 775\n// the value for the given key, throws otherwise                                                                       // 776\n                                                                                                                       //\n                                                                                                                       //\nfunction insertIntoDocument(document, key, value) {                                                                    // 777\n  Object.keys(document).forEach(function (existingKey) {                                                               // 778\n    if (existingKey.length > key.length && existingKey.indexOf(key + \".\") === 0 || key.length > existingKey.length && key.indexOf(existingKey + \".\") === 0) {\n      throw new Error(\"cannot infer query fields to set, both paths '\" + existingKey + \"' and \" + (\"'\" + key + \"' are matched\"));\n    } else if (existingKey === key) {                                                                                  // 787\n      throw new Error(\"cannot infer query fields to set, path '\" + key + \"' is matched twice\");                        // 788\n    }                                                                                                                  // 791\n  });                                                                                                                  // 792\n  document[key] = value;                                                                                               // 794\n} // Returns a branched matcher that matches iff the given matcher does not.                                           // 795\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it                                              // 798\n// means that ALL branch values need to fail to match innerBranchedMatcher.                                            // 799\n                                                                                                                       //\n                                                                                                                       //\nfunction invertBranchedMatcher(branchedMatcher) {                                                                      // 800\n  return function (branchValues) {                                                                                     // 801\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to                                       // 802\n    // say \"update the array element that does not match something\", at least                                          // 803\n    // in mongo-land.                                                                                                  // 804\n    return {                                                                                                           // 805\n      result: !branchedMatcher(branchValues).result                                                                    // 805\n    };                                                                                                                 // 805\n  };                                                                                                                   // 806\n}                                                                                                                      // 807\n                                                                                                                       //\nfunction isIndexable(obj) {                                                                                            // 809\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);                                                    // 810\n}                                                                                                                      // 811\n                                                                                                                       //\nfunction isNumericKey(s) {                                                                                             // 813\n  return (/^[0-9]+$/.test(s)                                                                                           // 814\n  );                                                                                                                   // 814\n}                                                                                                                      // 815\n                                                                                                                       //\nfunction isOperatorObject(valueSelector, inconsistentOK) {                                                             // 820\n  if (!LocalCollection._isPlainObject(valueSelector)) {                                                                // 821\n    return false;                                                                                                      // 822\n  }                                                                                                                    // 823\n                                                                                                                       //\n  var theseAreOperators = undefined;                                                                                   // 825\n  Object.keys(valueSelector).forEach(function (selKey) {                                                               // 826\n    var thisIsOperator = selKey.substr(0, 1) === '$';                                                                  // 827\n                                                                                                                       //\n    if (theseAreOperators === undefined) {                                                                             // 829\n      theseAreOperators = thisIsOperator;                                                                              // 830\n    } else if (theseAreOperators !== thisIsOperator) {                                                                 // 831\n      if (!inconsistentOK) {                                                                                           // 832\n        throw new Error(\"Inconsistent operator: \" + JSON.stringify(valueSelector));                                    // 833\n      }                                                                                                                // 836\n                                                                                                                       //\n      theseAreOperators = false;                                                                                       // 838\n    }                                                                                                                  // 839\n  });                                                                                                                  // 840\n  return !!theseAreOperators; // {} has no operators                                                                   // 842\n}                                                                                                                      // 843\n                                                                                                                       //\n// Helper for $lt/$gt/$lte/$gte.                                                                                       // 845\nfunction makeInequality(cmpValueComparator) {                                                                          // 846\n  return {                                                                                                             // 847\n    compileElementSelector: function (operand) {                                                                       // 848\n      // Arrays never compare false with non-arrays for any inequality.                                                // 849\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but                                             // 850\n      //     it seems to have been reverted.                                                                           // 851\n      //     See https://jira.mongodb.org/browse/SERVER-11444                                                          // 852\n      if (Array.isArray(operand)) {                                                                                    // 853\n        return function () {                                                                                           // 854\n          return false;                                                                                                // 854\n        };                                                                                                             // 854\n      } // Special case: consider undefined and null the same (so true with                                            // 855\n      // $gte/$lte).                                                                                                   // 858\n                                                                                                                       //\n                                                                                                                       //\n      if (operand === undefined) {                                                                                     // 859\n        operand = null;                                                                                                // 860\n      }                                                                                                                // 861\n                                                                                                                       //\n      var operandType = LocalCollection._f._type(operand);                                                             // 863\n                                                                                                                       //\n      return function (value) {                                                                                        // 865\n        if (value === undefined) {                                                                                     // 866\n          value = null;                                                                                                // 867\n        } // Comparisons are never true among things of different type (except                                         // 868\n        // null vs undefined).                                                                                         // 871\n                                                                                                                       //\n                                                                                                                       //\n        if (LocalCollection._f._type(value) !== operandType) {                                                         // 872\n          return false;                                                                                                // 873\n        }                                                                                                              // 874\n                                                                                                                       //\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));                                            // 876\n      };                                                                                                               // 877\n    }                                                                                                                  // 878\n  };                                                                                                                   // 847\n} // makeLookupFunction(key) returns a lookup function.                                                                // 880\n//                                                                                                                     // 883\n// A lookup function takes in a document and returns an array of matching                                              // 884\n// branches.  If no arrays are found while looking up the key, this array will                                         // 885\n// have exactly one branches (possibly 'undefined', if some segment of the key                                         // 886\n// was not found).                                                                                                     // 887\n//                                                                                                                     // 888\n// If arrays are found in the middle, this can have more than one element, since                                       // 889\n// we 'branch'. When we 'branch', if there are more key segments to look up,                                           // 890\n// then we only pursue branches that are plain objects (not arrays or scalars).                                        // 891\n// This means we can actually end up with no branches!                                                                 // 892\n//                                                                                                                     // 893\n// We do *NOT* branch on arrays that are found at the end (ie, at the last                                             // 894\n// dotted member of the key). We just return that array; if you want to                                                // 895\n// effectively 'branch' over the array's values, post-process the lookup                                               // 896\n// function with expandArraysInBranches.                                                                               // 897\n//                                                                                                                     // 898\n// Each branch is an object with keys:                                                                                 // 899\n//  - value: the value at the branch                                                                                   // 900\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array                                        // 901\n//    that expandArraysInBranches should NOT expand. This specifically happens                                         // 902\n//    when there is a numeric index in the key, and ensures the                                                        // 903\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT                                                    // 904\n//    match {a: [[5]]}.                                                                                                // 905\n//  - arrayIndices: if any array indexing was done during lookup (either due to                                        // 906\n//    explicit numeric indices or implicit branching), this will be an array of                                        // 907\n//    the array indices used, from outermost to innermost; it is falsey or                                             // 908\n//    absent if no array index is used. If an explicit numeric index is used,                                          // 909\n//    the index will be followed in arrayIndices by the string 'x'.                                                    // 910\n//                                                                                                                     // 911\n//    Note: arrayIndices is used for two purposes. First, it is used to                                                // 912\n//    implement the '$' modifier feature, which only ever looks at its first                                           // 913\n//    element.                                                                                                         // 914\n//                                                                                                                     // 915\n//    Second, it is used for sort key generation, which needs to be able to tell                                       // 916\n//    the difference between different paths. Moreover, it needs to                                                    // 917\n//    differentiate between explicit and implicit branching, which is why                                              // 918\n//    there's the somewhat hacky 'x' entry: this means that explicit and                                               // 919\n//    implicit array lookups will have different full arrayIndices paths. (That                                        // 920\n//    code only requires that different paths have different arrayIndices; it                                          // 921\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices                                           // 922\n//    could contain objects with flags like 'implicit', but I think that only                                          // 923\n//    makes the code surrounding them more complex.)                                                                   // 924\n//                                                                                                                     // 925\n//    (By the way, this field ends up getting passed around a lot without                                              // 926\n//    cloning, so never mutate any arrayIndices field/var in this package!)                                            // 927\n//                                                                                                                     // 928\n//                                                                                                                     // 929\n// At the top level, you may only pass in a plain object or array.                                                     // 930\n//                                                                                                                     // 931\n// See the test 'minimongo - lookup' for some examples of what lookup functions                                        // 932\n// return.                                                                                                             // 933\n                                                                                                                       //\n                                                                                                                       //\nfunction makeLookupFunction(key) {                                                                                     // 934\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                // 934\n  var parts = key.split('.');                                                                                          // 935\n  var firstPart = parts.length ? parts[0] : '';                                                                        // 936\n  var lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.'));                                   // 937\n                                                                                                                       //\n  var omitUnnecessaryFields = function (result) {                                                                      // 942\n    if (!result.dontIterate) {                                                                                         // 943\n      delete result.dontIterate;                                                                                       // 944\n    }                                                                                                                  // 945\n                                                                                                                       //\n    if (result.arrayIndices && !result.arrayIndices.length) {                                                          // 947\n      delete result.arrayIndices;                                                                                      // 948\n    }                                                                                                                  // 949\n                                                                                                                       //\n    return result;                                                                                                     // 951\n  }; // Doc will always be a plain object or an array.                                                                 // 952\n  // apply an explicit numeric index, an array.                                                                        // 955\n                                                                                                                       //\n                                                                                                                       //\n  return function (doc) {                                                                                              // 956\n    var arrayIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];                         // 956\n                                                                                                                       //\n    if (Array.isArray(doc)) {                                                                                          // 957\n      // If we're being asked to do an invalid lookup into an array (non-integer                                       // 958\n      // or out-of-bounds), return no results (which is different from returning                                       // 959\n      // a single undefined result, in that `null` equality checks won't match).                                       // 960\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {                                                      // 961\n        return [];                                                                                                     // 962\n      } // Remember that we used this array index. Include an 'x' to indicate that                                     // 963\n      // the previous index came from being considered as an explicit array                                            // 966\n      // index (not branching).                                                                                        // 967\n                                                                                                                       //\n                                                                                                                       //\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');                                                             // 968\n    } // Do our first lookup.                                                                                          // 969\n                                                                                                                       //\n                                                                                                                       //\n    var firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.                            // 972\n    //                                                                                                                 // 975\n    // If what we found is an array, most value selectors will choose to treat                                         // 976\n    // the elements of the array as matchable values in their own right, but                                           // 977\n    // that's done outside of the lookup function. (Exceptions to this are $size                                       // 978\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:                                       // 979\n    // [[1, 2]]}.)                                                                                                     // 980\n    //                                                                                                                 // 981\n    // That said, if we just did an *explicit* array lookup (on doc) to find                                           // 982\n    // firstLevel, and firstLevel is an array too, we do NOT want value                                                // 983\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.                                        // 984\n    // So in that case, we mark the return value as 'don't iterate'.                                                   // 985\n                                                                                                                       //\n    if (!lookupRest) {                                                                                                 // 986\n      return [omitUnnecessaryFields({                                                                                  // 987\n        arrayIndices: arrayIndices,                                                                                    // 988\n        dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),                                                  // 989\n        value: firstLevel                                                                                              // 990\n      })];                                                                                                             // 987\n    } // We need to dig deeper.  But if we can't, because what we've found is not                                      // 992\n    // an array or plain object, we're done. If we just did a numeric index into                                       // 995\n    // an array, we return nothing here (this is a change in Mongo 2.5 from                                            // 996\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,                                         // 997\n    // return a single `undefined` (which can, for example, match via equality                                         // 998\n    // with `null`).                                                                                                   // 999\n                                                                                                                       //\n                                                                                                                       //\n    if (!isIndexable(firstLevel)) {                                                                                    // 1000\n      if (Array.isArray(doc)) {                                                                                        // 1001\n        return [];                                                                                                     // 1002\n      }                                                                                                                // 1003\n                                                                                                                       //\n      return [omitUnnecessaryFields({                                                                                  // 1005\n        arrayIndices: arrayIndices,                                                                                    // 1005\n        value: undefined                                                                                               // 1005\n      })];                                                                                                             // 1005\n    }                                                                                                                  // 1006\n                                                                                                                       //\n    var result = [];                                                                                                   // 1008\n                                                                                                                       //\n    var appendToResult = function (more) {                                                                             // 1009\n      result.push.apply(result, (0, _toConsumableArray3.default)(more));                                               // 1010\n    }; // Dig deeper: look up the rest of the parts on whatever we've found.                                           // 1011\n    // (lookupRest is smart enough to not try to do invalid lookups into                                               // 1014\n    // firstLevel if it's an array.)                                                                                   // 1015\n                                                                                                                       //\n                                                                                                                       //\n    appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up                                       // 1019\n    // the rest of the parts on each array element in parallel.                                                        // 1020\n    //                                                                                                                 // 1021\n    // In this case, we *only* dig deeper into array elements that are plain                                           // 1022\n    // objects. (Recall that we only got this far if we have further to dig.)                                          // 1023\n    // This makes sense: we certainly don't dig deeper into non-indexable                                              // 1024\n    // objects. And it would be weird to dig into an array: it's simpler to have                                       // 1025\n    // a rule that explicit integer indexes only apply to an outer array, not to                                       // 1026\n    // an array you find after a branching search.                                                                     // 1027\n    //                                                                                                                 // 1028\n    // In the special case of a numeric part in a *sort selector* (not a query                                         // 1029\n    // selector), we skip the branching: we ONLY allow the numeric part to mean                                        // 1030\n    // 'look up this index' in that case, not 'also look up this index in all                                          // 1031\n    // the elements of the array'.                                                                                     // 1032\n                                                                                                                       //\n    if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {                                   // 1033\n      firstLevel.forEach(function (branch, arrayIndex) {                                                               // 1035\n        if (LocalCollection._isPlainObject(branch)) {                                                                  // 1036\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));                                         // 1037\n        }                                                                                                              // 1038\n      });                                                                                                              // 1039\n    }                                                                                                                  // 1040\n                                                                                                                       //\n    return result;                                                                                                     // 1042\n  };                                                                                                                   // 1043\n}                                                                                                                      // 1044\n                                                                                                                       //\n// Object exported only for unit testing.                                                                              // 1046\n// Use it to export private functions to test in Tinytest.                                                             // 1047\nMinimongoTest = {                                                                                                      // 1048\n  makeLookupFunction: makeLookupFunction                                                                               // 1048\n};                                                                                                                     // 1048\n                                                                                                                       //\nMinimongoError = function (message) {                                                                                  // 1049\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                // 1049\n                                                                                                                       //\n  if (typeof message === 'string' && options.field) {                                                                  // 1050\n    message += \" for field '\" + options.field + \"'\";                                                                   // 1051\n  }                                                                                                                    // 1052\n                                                                                                                       //\n  var error = new Error(message);                                                                                      // 1054\n  error.name = 'MinimongoError';                                                                                       // 1055\n  return error;                                                                                                        // 1056\n};                                                                                                                     // 1057\n                                                                                                                       //\nfunction nothingMatcher(docOrBranchedValues) {                                                                         // 1059\n  return {                                                                                                             // 1060\n    result: false                                                                                                      // 1060\n  };                                                                                                                   // 1060\n}                                                                                                                      // 1061\n                                                                                                                       //\n// Takes an operator object (an object with $ keys) and returns a branched                                             // 1063\n// matcher for it.                                                                                                     // 1064\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {                                                     // 1065\n  // Each valueSelector works separately on the various branches.  So one                                              // 1066\n  // operator can match one branch and another can match another branch.  This                                         // 1067\n  // is OK.                                                                                                            // 1068\n  var operatorMatchers = Object.keys(valueSelector).map(function (operator) {                                          // 1069\n    var operand = valueSelector[operator];                                                                             // 1070\n    var simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number';                // 1072\n    var simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand);                             // 1077\n    var simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(function (x) {\n      return x === Object(x);                                                                                          // 1085\n    });                                                                                                                // 1085\n                                                                                                                       //\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {                                                         // 1088\n      matcher._isSimple = false;                                                                                       // 1089\n    }                                                                                                                  // 1090\n                                                                                                                       //\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {                                                                      // 1092\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);                                       // 1093\n    }                                                                                                                  // 1094\n                                                                                                                       //\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {                                                                    // 1096\n      var options = ELEMENT_OPERATORS[operator];                                                                       // 1097\n      return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);\n    }                                                                                                                  // 1102\n                                                                                                                       //\n    throw new Error(\"Unrecognized operator: \" + operator);                                                             // 1104\n  });                                                                                                                  // 1105\n  return andBranchedMatchers(operatorMatchers);                                                                        // 1107\n} // paths - Array: list of mongo style paths                                                                          // 1108\n// newLeafFn - Function: of form function(path) should return a scalar value to                                        // 1111\n//                       put into list created for that path                                                           // 1112\n// conflictFn - Function: of form function(node, path, fullPath) is called                                             // 1113\n//                        when building a tree path for 'fullPath' node on                                             // 1114\n//                        'path' was already a leaf with a value. Must return a                                        // 1115\n//                        conflict resolution.                                                                         // 1116\n// initial tree - Optional Object: starting tree.                                                                      // 1117\n// @returns - Object: tree represented as a set of nested objects                                                      // 1118\n                                                                                                                       //\n                                                                                                                       //\nfunction pathsToTree(paths, newLeafFn, conflictFn) {                                                                   // 1119\n  var root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};                                   // 1119\n  paths.forEach(function (path) {                                                                                      // 1120\n    var pathArray = path.split('.');                                                                                   // 1121\n    var tree = root; // use .every just for iteration with break                                                       // 1122\n                                                                                                                       //\n    var success = pathArray.slice(0, -1).every(function (key, i) {                                                     // 1125\n      if (!hasOwn.call(tree, key)) {                                                                                   // 1126\n        tree[key] = {};                                                                                                // 1127\n      } else if (tree[key] !== Object(tree[key])) {                                                                    // 1128\n        tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path); // break out of loop if we are failing for this path\n                                                                                                                       //\n        if (tree[key] !== Object(tree[key])) {                                                                         // 1136\n          return false;                                                                                                // 1137\n        }                                                                                                              // 1138\n      }                                                                                                                // 1139\n                                                                                                                       //\n      tree = tree[key];                                                                                                // 1141\n      return true;                                                                                                     // 1143\n    });                                                                                                                // 1144\n                                                                                                                       //\n    if (success) {                                                                                                     // 1146\n      var lastKey = pathArray[pathArray.length - 1];                                                                   // 1147\n                                                                                                                       //\n      if (hasOwn.call(tree, lastKey)) {                                                                                // 1148\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);                                                         // 1149\n      } else {                                                                                                         // 1150\n        tree[lastKey] = newLeafFn(path);                                                                               // 1151\n      }                                                                                                                // 1152\n    }                                                                                                                  // 1153\n  });                                                                                                                  // 1154\n  return root;                                                                                                         // 1156\n}                                                                                                                      // 1157\n                                                                                                                       //\n// Makes sure we get 2 elements array and assume the first one to be x and                                             // 1159\n// the second one to y no matter what user passes.                                                                     // 1160\n// In case user passes { lon: x, lat: y } returns [x, y]                                                               // 1161\nfunction pointToArray(point) {                                                                                         // 1162\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];                                                    // 1163\n} // Creating a document from an upsert is quite tricky.                                                               // 1164\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result                                          // 1167\n// in: {\"b.foo\": \"bar\"}                                                                                                // 1168\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw                                        // 1169\n// an error                                                                                                            // 1170\n// Some rules (found mainly with trial & error, so there might be more):                                               // 1172\n// - handle all childs of $and (or implicit $and)                                                                      // 1173\n// - handle $or nodes with exactly 1 child                                                                             // 1174\n// - ignore $or nodes with more than 1 child                                                                           // 1175\n// - ignore $nor and $not nodes                                                                                        // 1176\n// - throw when a value can not be set unambiguously                                                                   // 1177\n// - every value for $all should be dealt with as separate $eq-s                                                       // 1178\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,                                          // 1179\n//   otherwise throw error)                                                                                            // 1180\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys                                                       // 1181\n// - you can only have dotted keys on a root-level                                                                     // 1182\n// - you can not have '$'-prefixed keys more than one-level deep in an object                                          // 1183\n// Handles one key/value pair to put in the selector document                                                          // 1185\n                                                                                                                       //\n                                                                                                                       //\nfunction populateDocumentWithKeyValue(document, key, value) {                                                          // 1186\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {                                                    // 1187\n    populateDocumentWithObject(document, key, value);                                                                  // 1188\n  } else if (!(value instanceof RegExp)) {                                                                             // 1189\n    insertIntoDocument(document, key, value);                                                                          // 1190\n  }                                                                                                                    // 1191\n} // Handles a key, value pair to put in the selector document                                                         // 1192\n// if the value is an object                                                                                           // 1195\n                                                                                                                       //\n                                                                                                                       //\nfunction populateDocumentWithObject(document, key, value) {                                                            // 1196\n  var keys = Object.keys(value);                                                                                       // 1197\n  var unprefixedKeys = keys.filter(function (op) {                                                                     // 1198\n    return op[0] !== '$';                                                                                              // 1198\n  });                                                                                                                  // 1198\n                                                                                                                       //\n  if (unprefixedKeys.length > 0 || !keys.length) {                                                                     // 1200\n    // Literal (possibly empty) object ( or empty object )                                                             // 1201\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields                                                    // 1202\n    if (keys.length !== unprefixedKeys.length) {                                                                       // 1203\n      throw new Error(\"unknown operator: \" + unprefixedKeys[0]);                                                       // 1204\n    }                                                                                                                  // 1205\n                                                                                                                       //\n    validateObject(value, key);                                                                                        // 1207\n    insertIntoDocument(document, key, value);                                                                          // 1208\n  } else {                                                                                                             // 1209\n    Object.keys(value).forEach(function (op) {                                                                         // 1210\n      var object = value[op];                                                                                          // 1211\n                                                                                                                       //\n      if (op === '$eq') {                                                                                              // 1213\n        populateDocumentWithKeyValue(document, key, object);                                                           // 1214\n      } else if (op === '$all') {                                                                                      // 1215\n        // every value for $all should be dealt with as separate $eq-s                                                 // 1216\n        object.forEach(function (element) {                                                                            // 1217\n          return populateDocumentWithKeyValue(document, key, element);                                                 // 1217\n        });                                                                                                            // 1217\n      }                                                                                                                // 1220\n    });                                                                                                                // 1221\n  }                                                                                                                    // 1222\n} // Fills a document with certain fields from an upsert selector                                                      // 1223\n                                                                                                                       //\n                                                                                                                       //\nfunction populateDocumentWithQueryFields(query) {                                                                      // 1226\n  var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                               // 1226\n                                                                                                                       //\n  if (Object.getPrototypeOf(query) === Object.prototype) {                                                             // 1227\n    // handle implicit $and                                                                                            // 1228\n    Object.keys(query).forEach(function (key) {                                                                        // 1229\n      var value = query[key];                                                                                          // 1230\n                                                                                                                       //\n      if (key === '$and') {                                                                                            // 1232\n        // handle explicit $and                                                                                        // 1233\n        value.forEach(function (element) {                                                                             // 1234\n          return populateDocumentWithQueryFields(element, document);                                                   // 1234\n        });                                                                                                            // 1234\n      } else if (key === '$or') {                                                                                      // 1237\n        // handle $or nodes with exactly 1 child                                                                       // 1238\n        if (value.length === 1) {                                                                                      // 1239\n          populateDocumentWithQueryFields(value[0], document);                                                         // 1240\n        }                                                                                                              // 1241\n      } else if (key[0] !== '$') {                                                                                     // 1242\n        // Ignore other '$'-prefixed logical selectors                                                                 // 1243\n        populateDocumentWithKeyValue(document, key, value);                                                            // 1244\n      }                                                                                                                // 1245\n    });                                                                                                                // 1246\n  } else {                                                                                                             // 1247\n    // Handle meteor-specific shortcut for selecting _id                                                               // 1248\n    if (LocalCollection._selectorIsId(query)) {                                                                        // 1249\n      insertIntoDocument(document, '_id', query);                                                                      // 1250\n    }                                                                                                                  // 1251\n  }                                                                                                                    // 1252\n                                                                                                                       //\n  return document;                                                                                                     // 1254\n}                                                                                                                      // 1255\n                                                                                                                       //\nfunction projectionDetails(fields) {                                                                                   // 1263\n  // Find the non-_id keys (_id is handled specially because it is included                                            // 1264\n  // unless explicitly excluded). Sort the keys, so that our code to detect                                            // 1265\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.                                              // 1266\n  var fieldsKeys = Object.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an                                          // 1270\n  // inclusive _id, since inclusive _id follows the normal rules about mixing                                          // 1271\n  // inclusive and exclusive fields. If _id is not the only field in the                                               // 1272\n  // projection and is exclusive, remove it so it can be handled later by a                                            // 1273\n  // special case, since exclusive _id is always allowed.                                                              // 1274\n                                                                                                                       //\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {          // 1275\n    fieldsKeys = fieldsKeys.filter(function (key) {                                                                    // 1277\n      return key !== '_id';                                                                                            // 1277\n    });                                                                                                                // 1277\n  }                                                                                                                    // 1278\n                                                                                                                       //\n  var including = null; // Unknown                                                                                     // 1280\n                                                                                                                       //\n  fieldsKeys.forEach(function (keyPath) {                                                                              // 1282\n    var rule = !!fields[keyPath];                                                                                      // 1283\n                                                                                                                       //\n    if (including === null) {                                                                                          // 1285\n      including = rule;                                                                                                // 1286\n    } // This error message is copied from MongoDB shell                                                               // 1287\n                                                                                                                       //\n                                                                                                                       //\n    if (including !== rule) {                                                                                          // 1290\n      throw MinimongoError('You cannot currently mix including and excluding fields.');                                // 1291\n    }                                                                                                                  // 1294\n  });                                                                                                                  // 1295\n  var projectionRulesTree = pathsToTree(fieldsKeys, function (path) {                                                  // 1297\n    return including;                                                                                                  // 1299\n  }, function (node, path, fullPath) {                                                                                 // 1299\n    // Check passed projection fields' keys: If you have two rules such as                                             // 1301\n    // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If                                              // 1302\n    // that happens, there is a probability you are doing something wrong,                                             // 1303\n    // framework should notify you about such mistake earlier on cursor                                                // 1304\n    // compilation step than later during runtime.  Note, that real mongo                                              // 1305\n    // doesn't do anything about it and the later rule appears in projection                                           // 1306\n    // project, more priority it takes.                                                                                // 1307\n    //                                                                                                                 // 1308\n    // Example, assume following in mongo shell:                                                                       // 1309\n    // > db.coll.insert({ a: { b: 23, c: 44 } })                                                                       // 1310\n    // > db.coll.find({}, { 'a': 1, 'a.b': 1 })                                                                        // 1311\n    // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}                                                   // 1312\n    // > db.coll.find({}, { 'a.b': 1, 'a': 1 })                                                                        // 1313\n    // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}                                          // 1314\n    //                                                                                                                 // 1315\n    // Note, how second time the return set of keys is different.                                                      // 1316\n    var currentPath = fullPath;                                                                                        // 1317\n    var anotherPath = path;                                                                                            // 1318\n    throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath + \" found in fields option, \" + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');\n  });                                                                                                                  // 1324\n  return {                                                                                                             // 1326\n    including: including,                                                                                              // 1326\n    tree: projectionRulesTree                                                                                          // 1326\n  };                                                                                                                   // 1326\n}                                                                                                                      // 1327\n                                                                                                                       //\nfunction regexpElementMatcher(regexp) {                                                                                // 1330\n  return function (value) {                                                                                            // 1331\n    if (value instanceof RegExp) {                                                                                     // 1332\n      return value.toString() === regexp.toString();                                                                   // 1333\n    } // Regexps only work against strings.                                                                            // 1334\n                                                                                                                       //\n                                                                                                                       //\n    if (typeof value !== 'string') {                                                                                   // 1337\n      return false;                                                                                                    // 1338\n    } // Reset regexp's state to avoid inconsistent matching for objects with the                                      // 1339\n    // same value on consecutive calls of regexp.test. This happens only if the                                        // 1342\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for                                       // 1343\n    // which we should *not* change the lastIndex but MongoDB doesn't support                                          // 1344\n    // either of these flags.                                                                                          // 1345\n                                                                                                                       //\n                                                                                                                       //\n    regexp.lastIndex = 0;                                                                                              // 1346\n    return regexp.test(value);                                                                                         // 1348\n  };                                                                                                                   // 1349\n}                                                                                                                      // 1350\n                                                                                                                       //\n// Validates the key in a path.                                                                                        // 1352\n// Objects that are nested more then 1 level cannot have dotted fields                                                 // 1353\n// or fields starting with '$'                                                                                         // 1354\nfunction validateKeyInPath(key, path) {                                                                                // 1355\n  if (key.includes('.')) {                                                                                             // 1356\n    throw new Error(\"The dotted field '\" + key + \"' in '\" + path + \".\" + key + \" is not valid for storage.\");          // 1357\n  }                                                                                                                    // 1360\n                                                                                                                       //\n  if (key[0] === '$') {                                                                                                // 1362\n    throw new Error(\"The dollar ($) prefixed field  '\" + path + \".\" + key + \" is not valid for storage.\");             // 1363\n  }                                                                                                                    // 1366\n} // Recursively validates an object that is nested more than one level deep                                           // 1367\n                                                                                                                       //\n                                                                                                                       //\nfunction validateObject(object, path) {                                                                                // 1370\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {                                                  // 1371\n    Object.keys(object).forEach(function (key) {                                                                       // 1372\n      validateKeyInPath(key, path);                                                                                    // 1373\n      validateObject(object[key], path + '.' + key);                                                                   // 1374\n    });                                                                                                                // 1375\n  }                                                                                                                    // 1376\n}                                                                                                                      // 1377\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cursor.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/cursor.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  \"default\": function () {                                                                                             // 1\n    return Cursor;                                                                                                     // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar LocalCollection = void 0;                                                                                          // 1\nmodule.watch(require(\"./local_collection.js\"), {                                                                       // 1\n  \"default\": function (v) {                                                                                            // 1\n    LocalCollection = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar hasOwn = void 0;                                                                                                   // 1\nmodule.watch(require(\"./common.js\"), {                                                                                 // 1\n  hasOwn: function (v) {                                                                                               // 1\n    hasOwn = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar Cursor = function () {                                                                                             //\n  // don't call this ctor directly.  use LocalCollection.find().                                                       // 7\n  function Cursor(collection, selector) {                                                                              // 8\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                              // 8\n    (0, _classCallCheck3.default)(this, Cursor);                                                                       // 8\n    this.collection = collection;                                                                                      // 9\n    this.sorter = null;                                                                                                // 10\n    this.matcher = new Minimongo.Matcher(selector);                                                                    // 11\n                                                                                                                       //\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                                      // 13\n      // stash for fast _id and { _id }                                                                                // 14\n      this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;                                       // 15\n    } else {                                                                                                           // 18\n      this._selectorId = undefined;                                                                                    // 19\n                                                                                                                       //\n      if (this.matcher.hasGeoQuery() || options.sort) {                                                                // 21\n        this.sorter = new Minimongo.Sorter(options.sort || [], {                                                       // 22\n          matcher: this.matcher                                                                                        // 24\n        });                                                                                                            // 24\n      }                                                                                                                // 26\n    }                                                                                                                  // 27\n                                                                                                                       //\n    this.skip = options.skip || 0;                                                                                     // 29\n    this.limit = options.limit;                                                                                        // 30\n    this.fields = options.fields;                                                                                      // 31\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});                                        // 33\n    this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.\n                                                                                                                       //\n    if (typeof Tracker !== 'undefined') {                                                                              // 38\n      this.reactive = options.reactive === undefined ? true : options.reactive;                                        // 39\n    }                                                                                                                  // 40\n  } /**                                                                                                                // 41\n     * @summary Returns the number of documents that match a query.                                                    //\n     * @memberOf Mongo.Cursor                                                                                          //\n     * @method  count                                                                                                  //\n     * @param {boolean} [applySkipLimit=true] If set to `false`, the value                                             //\n     *                                         returned will reflect the total                                         //\n     *                                         number of matching documents,                                           //\n     *                                         ignoring any value supplied for                                         //\n     *                                         limit                                                                   //\n     * @instance                                                                                                       //\n     * @locus Anywhere                                                                                                 //\n     * @returns {Number}                                                                                               //\n     */                                                                                                                //\n                                                                                                                       //\n  Cursor.prototype.count = function () {                                                                               //\n    function count() {                                                                                                 //\n      var applySkipLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;                   // 56\n                                                                                                                       //\n      if (this.reactive) {                                                                                             // 57\n        // allow the observe to be unordered                                                                           // 58\n        this._depend({                                                                                                 // 59\n          added: true,                                                                                                 // 59\n          removed: true                                                                                                // 59\n        }, true);                                                                                                      // 59\n      }                                                                                                                // 60\n                                                                                                                       //\n      return this._getRawObjects({                                                                                     // 62\n        ordered: true,                                                                                                 // 63\n        applySkipLimit: applySkipLimit                                                                                 // 64\n      }).length;                                                                                                       // 62\n    }                                                                                                                  // 66\n                                                                                                                       //\n    return count;                                                                                                      //\n  }(); /**                                                                                                             //\n        * @summary Return all matching documents as an Array.                                                          //\n        * @memberOf Mongo.Cursor                                                                                       //\n        * @method  fetch                                                                                               //\n        * @instance                                                                                                    //\n        * @locus Anywhere                                                                                              //\n        * @returns {Object[]}                                                                                          //\n        */                                                                                                             //\n                                                                                                                       //\n  Cursor.prototype.fetch = function () {                                                                               //\n    function fetch() {                                                                                                 //\n      var result = [];                                                                                                 // 77\n      this.forEach(function (doc) {                                                                                    // 79\n        result.push(doc);                                                                                              // 80\n      });                                                                                                              // 81\n      return result;                                                                                                   // 83\n    }                                                                                                                  // 84\n                                                                                                                       //\n    return fetch;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Cursor.prototype[Symbol.iterator] = function () {                                                                    //\n    var _this = this;                                                                                                  // 86\n                                                                                                                       //\n    if (this.reactive) {                                                                                               // 87\n      this._depend({                                                                                                   // 88\n        addedBefore: true,                                                                                             // 89\n        removed: true,                                                                                                 // 90\n        changed: true,                                                                                                 // 91\n        movedBefore: true                                                                                              // 92\n      });                                                                                                              // 88\n    }                                                                                                                  // 93\n                                                                                                                       //\n    var index = 0;                                                                                                     // 95\n                                                                                                                       //\n    var objects = this._getRawObjects({                                                                                // 96\n      ordered: true                                                                                                    // 96\n    });                                                                                                                // 96\n                                                                                                                       //\n    return {                                                                                                           // 98\n      next: function () {                                                                                              // 99\n        if (index < objects.length) {                                                                                  // 100\n          // This doubles as a clone operation.                                                                        // 101\n          var element = _this._projectionFn(objects[index++]);                                                         // 102\n                                                                                                                       //\n          if (_this._transform) element = _this._transform(element);                                                   // 104\n          return {                                                                                                     // 107\n            value: element                                                                                             // 107\n          };                                                                                                           // 107\n        }                                                                                                              // 108\n                                                                                                                       //\n        return {                                                                                                       // 110\n          done: true                                                                                                   // 110\n        };                                                                                                             // 110\n      }                                                                                                                // 111\n    };                                                                                                                 // 98\n  }; /**                                                                                                               // 113\n      * @callback IterationCallback                                                                                    //\n      * @param {Object} doc                                                                                            //\n      * @param {Number} index                                                                                          //\n      */ /**                                                                                                           //\n          * @summary Call `callback` once for each matching document, sequentially and                                 //\n          *          synchronously.                                                                                    //\n          * @locus Anywhere                                                                                            //\n          * @method  forEach                                                                                           //\n          * @instance                                                                                                  //\n          * @memberOf Mongo.Cursor                                                                                     //\n          * @param {IterationCallback} callback Function to call. It will be called                                    //\n          *                                     with three arguments: the document, a                                  //\n          *                                     0-based index, and <em>cursor</em>                                     //\n          *                                     itself.                                                                //\n          * @param {Any} [thisArg] An object which will be the value of `this` inside                                  //\n          *                        `callback`.                                                                         //\n          */                                                                                                           //\n                                                                                                                       //\n  Cursor.prototype.forEach = function () {                                                                             //\n    function forEach(callback, thisArg) {                                                                              //\n      var _this2 = this;                                                                                               // 134\n                                                                                                                       //\n      if (this.reactive) {                                                                                             // 135\n        this._depend({                                                                                                 // 136\n          addedBefore: true,                                                                                           // 137\n          removed: true,                                                                                               // 138\n          changed: true,                                                                                               // 139\n          movedBefore: true                                                                                            // 140\n        });                                                                                                            // 136\n      }                                                                                                                // 141\n                                                                                                                       //\n      this._getRawObjects({                                                                                            // 143\n        ordered: true                                                                                                  // 143\n      }).forEach(function (element, i) {                                                                               // 143\n        // This doubles as a clone operation.                                                                          // 144\n        element = _this2._projectionFn(element);                                                                       // 145\n                                                                                                                       //\n        if (_this2._transform) {                                                                                       // 147\n          element = _this2._transform(element);                                                                        // 148\n        }                                                                                                              // 149\n                                                                                                                       //\n        callback.call(thisArg, element, i, _this2);                                                                    // 151\n      });                                                                                                              // 152\n    }                                                                                                                  // 153\n                                                                                                                       //\n    return forEach;                                                                                                    //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Cursor.prototype.getTransform = function () {                                                                        //\n    function getTransform() {                                                                                          //\n      return this._transform;                                                                                          // 156\n    }                                                                                                                  // 157\n                                                                                                                       //\n    return getTransform;                                                                                               //\n  }(); /**                                                                                                             //\n        * @summary Map callback over all matching documents.  Returns an Array.                                        //\n        * @locus Anywhere                                                                                              //\n        * @method map                                                                                                  //\n        * @instance                                                                                                    //\n        * @memberOf Mongo.Cursor                                                                                       //\n        * @param {IterationCallback} callback Function to call. It will be called                                      //\n        *                                     with three arguments: the document, a                                    //\n        *                                     0-based index, and <em>cursor</em>                                       //\n        *                                     itself.                                                                  //\n        * @param {Any} [thisArg] An object which will be the value of `this` inside                                    //\n        *                        `callback`.                                                                           //\n        */                                                                                                             //\n                                                                                                                       //\n  Cursor.prototype.map = function () {                                                                                 //\n    function map(callback, thisArg) {                                                                                  //\n      var _this3 = this;                                                                                               // 172\n                                                                                                                       //\n      var result = [];                                                                                                 // 173\n      this.forEach(function (doc, i) {                                                                                 // 175\n        result.push(callback.call(thisArg, doc, i, _this3));                                                           // 176\n      });                                                                                                              // 177\n      return result;                                                                                                   // 179\n    }                                                                                                                  // 180\n                                                                                                                       //\n    return map;                                                                                                        //\n  }(); // options to contain:                                                                                          //\n  //  * callbacks for observe():                                                                                       // 183\n  //    - addedAt (document, atIndex)                                                                                  // 184\n  //    - added (document)                                                                                             // 185\n  //    - changedAt (newDocument, oldDocument, atIndex)                                                                // 186\n  //    - changed (newDocument, oldDocument)                                                                           // 187\n  //    - removedAt (document, atIndex)                                                                                // 188\n  //    - removed (document)                                                                                           // 189\n  //    - movedTo (document, oldIndex, newIndex)                                                                       // 190\n  //                                                                                                                   // 191\n  // attributes available on returned query handle:                                                                    // 192\n  //  * stop(): end updates                                                                                            // 193\n  //  * collection: the collection this query is querying                                                              // 194\n  //                                                                                                                   // 195\n  // iff x is a returned query handle, (x instanceof                                                                   // 196\n  // LocalCollection.ObserveHandle) is true                                                                            // 197\n  //                                                                                                                   // 198\n  // initial results delivered through added callback                                                                  // 199\n  // XXX maybe callbacks should take a list of objects, to expose transactions?                                        // 200\n  // XXX maybe support field limiting (to limit what you're notified on)                                               // 201\n  /**                                                                                                                  // 203\n   * @summary Watch a query.  Receive callbacks as the result set changes.                                             //\n   * @locus Anywhere                                                                                                   //\n   * @memberOf Mongo.Cursor                                                                                            //\n   * @instance                                                                                                         //\n   * @param {Object} callbacks Functions to call to deliver the result set as it                                       //\n   *                           changes                                                                                 //\n   */                                                                                                                  //\n                                                                                                                       //\n  Cursor.prototype.observe = function () {                                                                             //\n    function observe(options) {                                                                                        //\n      return LocalCollection._observeFromObserveChanges(this, options);                                                // 212\n    }                                                                                                                  // 213\n                                                                                                                       //\n    return observe;                                                                                                    //\n  }(); /**                                                                                                             //\n        * @summary Watch a query. Receive callbacks as the result set changes. Only                                    //\n        *          the differences between the old and new documents are passed to                                     //\n        *          the callbacks.                                                                                      //\n        * @locus Anywhere                                                                                              //\n        * @memberOf Mongo.Cursor                                                                                       //\n        * @instance                                                                                                    //\n        * @param {Object} callbacks Functions to call to deliver the result set as it                                  //\n        *                           changes                                                                            //\n        */                                                                                                             //\n                                                                                                                       //\n  Cursor.prototype.observeChanges = function () {                                                                      //\n    function observeChanges(options) {                                                                                 //\n      var _this4 = this;                                                                                               // 225\n                                                                                                                       //\n      var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with\n      // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"                                     // 229\n      // comment in _modifyAndNotify                                                                                   // 230\n      // XXX allow skip/limit with unordered observe                                                                   // 231\n                                                                                                                       //\n                                                                                                                       //\n      if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {                                        // 232\n        throw new Error(\"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" + \"for observeChanges or 'addedAt' for observe, instead of 'added').\");\n      }                                                                                                                // 237\n                                                                                                                       //\n      if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {                                       // 239\n        throw Error('You may not observe a cursor with {fields: {_id: 0}}');                                           // 240\n      }                                                                                                                // 241\n                                                                                                                       //\n      var distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();                           // 243\n      var query = {                                                                                                    // 249\n        cursor: this,                                                                                                  // 250\n        dirty: false,                                                                                                  // 251\n        distances: distances,                                                                                          // 252\n        matcher: this.matcher,                                                                                         // 253\n        // not fast pathed                                                                                             // 253\n        ordered: ordered,                                                                                              // 254\n        projectionFn: this._projectionFn,                                                                              // 255\n        resultsSnapshot: null,                                                                                         // 256\n        sorter: ordered && this.sorter                                                                                 // 257\n      };                                                                                                               // 249\n      var qid = void 0; // Non-reactive queries call added[Before] and then never call anything                        // 260\n      // else.                                                                                                         // 263\n                                                                                                                       //\n      if (this.reactive) {                                                                                             // 264\n        qid = this.collection.next_qid++;                                                                              // 265\n        this.collection.queries[qid] = query;                                                                          // 266\n      }                                                                                                                // 267\n                                                                                                                       //\n      query.results = this._getRawObjects({                                                                            // 269\n        ordered: ordered,                                                                                              // 269\n        distances: query.distances                                                                                     // 269\n      });                                                                                                              // 269\n                                                                                                                       //\n      if (this.collection.paused) {                                                                                    // 271\n        query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();                                           // 272\n      } // wrap callbacks we were passed. callbacks only fire when not paused and                                      // 273\n      // are never undefined                                                                                           // 276\n      // Filters out blacklisted fields according to cursor's projection.                                              // 277\n      // XXX wrong place for this?                                                                                     // 278\n      // furthermore, callbacks enqueue until the operation we're working on is                                        // 280\n      // done.                                                                                                         // 281\n                                                                                                                       //\n                                                                                                                       //\n      var wrapCallback = function (fn) {                                                                               // 282\n        if (!fn) {                                                                                                     // 283\n          return function () {};                                                                                       // 284\n        }                                                                                                              // 285\n                                                                                                                       //\n        var self = _this4;                                                                                             // 287\n        return function () /* args*/{                                                                                  // 288\n          var _this5 = this;                                                                                           // 288\n                                                                                                                       //\n          if (self.collection.paused) {                                                                                // 289\n            return;                                                                                                    // 290\n          }                                                                                                            // 291\n                                                                                                                       //\n          var args = arguments;                                                                                        // 293\n                                                                                                                       //\n          self.collection._observeQueue.queueTask(function () {                                                        // 295\n            fn.apply(_this5, args);                                                                                    // 296\n          });                                                                                                          // 297\n        };                                                                                                             // 298\n      };                                                                                                               // 299\n                                                                                                                       //\n      query.added = wrapCallback(options.added);                                                                       // 301\n      query.changed = wrapCallback(options.changed);                                                                   // 302\n      query.removed = wrapCallback(options.removed);                                                                   // 303\n                                                                                                                       //\n      if (ordered) {                                                                                                   // 305\n        query.addedBefore = wrapCallback(options.addedBefore);                                                         // 306\n        query.movedBefore = wrapCallback(options.movedBefore);                                                         // 307\n      }                                                                                                                // 308\n                                                                                                                       //\n      if (!options._suppress_initial && !this.collection.paused) {                                                     // 310\n        var results = ordered ? query.results : query.results._map;                                                    // 311\n        Object.keys(results).forEach(function (key) {                                                                  // 313\n          var doc = results[key];                                                                                      // 314\n          var fields = EJSON.clone(doc);                                                                               // 315\n          delete fields._id;                                                                                           // 317\n                                                                                                                       //\n          if (ordered) {                                                                                               // 319\n            query.addedBefore(doc._id, _this4._projectionFn(fields), null);                                            // 320\n          }                                                                                                            // 321\n                                                                                                                       //\n          query.added(doc._id, _this4._projectionFn(fields));                                                          // 323\n        });                                                                                                            // 324\n      }                                                                                                                // 325\n                                                                                                                       //\n      var handle = Object.assign(new LocalCollection.ObserveHandle(), {                                                // 327\n        collection: this.collection,                                                                                   // 328\n        stop: function () {                                                                                            // 329\n          if (_this4.reactive) {                                                                                       // 330\n            delete _this4.collection.queries[qid];                                                                     // 331\n          }                                                                                                            // 332\n        }                                                                                                              // 333\n      });                                                                                                              // 327\n                                                                                                                       //\n      if (this.reactive && Tracker.active) {                                                                           // 336\n        // XXX in many cases, the same observe will be recreated when                                                  // 337\n        // the current autorun is rerun.  we could save work by                                                        // 338\n        // letting it linger across rerun and potentially get                                                          // 339\n        // repurposed if the same observe is performed, using logic                                                    // 340\n        // similar to that of Meteor.subscribe.                                                                        // 341\n        Tracker.onInvalidate(function () {                                                                             // 342\n          handle.stop();                                                                                               // 343\n        });                                                                                                            // 344\n      } // run the observe callbacks resulting from the initial contents                                               // 345\n      // before we leave the observe.                                                                                  // 348\n                                                                                                                       //\n                                                                                                                       //\n      this.collection._observeQueue.drain();                                                                           // 349\n                                                                                                                       //\n      return handle;                                                                                                   // 351\n    }                                                                                                                  // 352\n                                                                                                                       //\n    return observeChanges;                                                                                             //\n  }(); // Since we don't actually have a \"nextObject\" interface, there's really no                                     //\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls                                          // 355\n  // to fetch/map/forEach return nothing the second time.                                                              // 356\n  // XXX COMPAT WITH 0.8.1                                                                                             // 357\n                                                                                                                       //\n                                                                                                                       //\n  Cursor.prototype.rewind = function () {                                                                              //\n    function rewind() {}                                                                                               //\n                                                                                                                       //\n    return rewind;                                                                                                     //\n  }(); // XXX Maybe we need a version of observe that just calls a callback if                                         //\n  // anything changed.                                                                                                 // 361\n                                                                                                                       //\n                                                                                                                       //\n  Cursor.prototype._depend = function () {                                                                             //\n    function _depend(changers, _allow_unordered) {                                                                     //\n      if (Tracker.active) {                                                                                            // 363\n        var dependency = new Tracker.Dependency();                                                                     // 364\n        var notify = dependency.changed.bind(dependency);                                                              // 365\n        dependency.depend();                                                                                           // 367\n        var options = {                                                                                                // 369\n          _allow_unordered: _allow_unordered,                                                                          // 369\n          _suppress_initial: true                                                                                      // 369\n        };                                                                                                             // 369\n        ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(function (fn) {                          // 371\n          if (changers[fn]) {                                                                                          // 373\n            options[fn] = notify;                                                                                      // 374\n          }                                                                                                            // 375\n        }); // observeChanges will stop() when this computation is invalidated                                         // 376\n                                                                                                                       //\n        this.observeChanges(options);                                                                                  // 379\n      }                                                                                                                // 380\n    }                                                                                                                  // 381\n                                                                                                                       //\n    return _depend;                                                                                                    //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Cursor.prototype._getCollectionName = function () {                                                                  //\n    function _getCollectionName() {                                                                                    //\n      return this.collection.name;                                                                                     // 384\n    }                                                                                                                  // 385\n                                                                                                                       //\n    return _getCollectionName;                                                                                         //\n  }(); // Returns a collection of matching objects, but doesn't deep copy them.                                        //\n  //                                                                                                                   // 388\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and                                           // 389\n  // limit properties of the query provided that options.applySkipLimit is                                             // 390\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the                                             // 391\n  // natural order.                                                                                                    // 392\n  //                                                                                                                   // 393\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,                                          // 394\n  // skip and limit should not be set).                                                                                // 395\n  //                                                                                                                   // 396\n  // If ordered is set and this cursor is a $near geoquery, then this function                                         // 397\n  // will use an _IdMap to track each distance from the $near argument point in                                        // 398\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'                                          // 399\n  // argument, this function will clear it and use it for this purpose                                                 // 400\n  // (otherwise it will just create its own _IdMap). The observeChanges                                                // 401\n  // implementation uses this to remember the distances after this function                                            // 402\n  // returns.                                                                                                          // 403\n                                                                                                                       //\n                                                                                                                       //\n  Cursor.prototype._getRawObjects = function () {                                                                      //\n    function _getRawObjects() {                                                                                        //\n      var _this6 = this;                                                                                               // 404\n                                                                                                                       //\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                            // 404\n      // By default this method will respect skip and limit because .fetch(),                                          // 405\n      // .forEach() etc... expect this behaviour. It can be forced to ignore                                           // 406\n      // skip and limit by setting applySkipLimit to false (.count() does this,                                        // 407\n      // for example)                                                                                                  // 408\n      var applySkipLimit = options.applySkipLimit !== false; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n      // compatible                                                                                                    // 412\n                                                                                                                       //\n      var results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value              // 413\n                                                                                                                       //\n      if (this._selectorId !== undefined) {                                                                            // 416\n        // If you have non-zero skip and ask for a single id, you get nothing.                                         // 417\n        // This is so it matches the behavior of the '{_id: foo}' path.                                                // 418\n        if (applySkipLimit && this.skip) {                                                                             // 419\n          return results;                                                                                              // 420\n        }                                                                                                              // 421\n                                                                                                                       //\n        var selectedDoc = this.collection._docs.get(this._selectorId);                                                 // 423\n                                                                                                                       //\n        if (selectedDoc) {                                                                                             // 425\n          if (options.ordered) {                                                                                       // 426\n            results.push(selectedDoc);                                                                                 // 427\n          } else {                                                                                                     // 428\n            results.set(this._selectorId, selectedDoc);                                                                // 429\n          }                                                                                                            // 430\n        }                                                                                                              // 431\n                                                                                                                       //\n        return results;                                                                                                // 433\n      } // slow path for arbitrary selector, sort, skip, limit                                                         // 434\n      // in the observeChanges case, distances is actually part of the \"query\"                                         // 438\n      // (ie, live results set) object.  in other cases, distances is only used                                        // 439\n      // inside this function.                                                                                         // 440\n                                                                                                                       //\n                                                                                                                       //\n      var distances = void 0;                                                                                          // 441\n                                                                                                                       //\n      if (this.matcher.hasGeoQuery() && options.ordered) {                                                             // 442\n        if (options.distances) {                                                                                       // 443\n          distances = options.distances;                                                                               // 444\n          distances.clear();                                                                                           // 445\n        } else {                                                                                                       // 446\n          distances = new LocalCollection._IdMap();                                                                    // 447\n        }                                                                                                              // 448\n      }                                                                                                                // 449\n                                                                                                                       //\n      this.collection._docs.forEach(function (doc, id) {                                                               // 451\n        var matchResult = _this6.matcher.documentMatches(doc);                                                         // 452\n                                                                                                                       //\n        if (matchResult.result) {                                                                                      // 454\n          if (options.ordered) {                                                                                       // 455\n            results.push(doc);                                                                                         // 456\n                                                                                                                       //\n            if (distances && matchResult.distance !== undefined) {                                                     // 458\n              distances.set(id, matchResult.distance);                                                                 // 459\n            }                                                                                                          // 460\n          } else {                                                                                                     // 461\n            results.set(id, doc);                                                                                      // 462\n          }                                                                                                            // 463\n        } // Override to ensure all docs are matched if ignoring skip & limit                                          // 464\n                                                                                                                       //\n                                                                                                                       //\n        if (!applySkipLimit) {                                                                                         // 467\n          return true;                                                                                                 // 468\n        } // Fast path for limited unsorted queries.                                                                   // 469\n        // XXX 'length' check here seems wrong for ordered                                                             // 472\n                                                                                                                       //\n                                                                                                                       //\n        return !_this6.limit || _this6.skip || _this6.sorter || results.length !== _this6.limit;                       // 473\n      });                                                                                                              // 479\n                                                                                                                       //\n      if (!options.ordered) {                                                                                          // 481\n        return results;                                                                                                // 482\n      }                                                                                                                // 483\n                                                                                                                       //\n      if (this.sorter) {                                                                                               // 485\n        results.sort(this.sorter.getComparator({                                                                       // 486\n          distances: distances                                                                                         // 486\n        }));                                                                                                           // 486\n      } // Return the full set of results if there is no skip or limit or if we're                                     // 487\n      // ignoring them                                                                                                 // 490\n                                                                                                                       //\n                                                                                                                       //\n      if (!applySkipLimit || !this.limit && !this.skip) {                                                              // 491\n        return results;                                                                                                // 492\n      }                                                                                                                // 493\n                                                                                                                       //\n      return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);                           // 495\n    }                                                                                                                  // 499\n                                                                                                                       //\n    return _getRawObjects;                                                                                             //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Cursor.prototype._publishCursor = function () {                                                                      //\n    function _publishCursor(subscription) {                                                                            //\n      // XXX minimongo should not depend on mongo-livedata!                                                            // 502\n      if (!Package.mongo) {                                                                                            // 503\n        throw new Error('Can\\'t publish from Minimongo without the `mongo` package.');                                 // 504\n      }                                                                                                                // 507\n                                                                                                                       //\n      if (!this.collection.name) {                                                                                     // 509\n        throw new Error('Can\\'t publish a cursor from a collection without a name.');                                  // 510\n      }                                                                                                                // 513\n                                                                                                                       //\n      return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);                  // 515\n    }                                                                                                                  // 520\n                                                                                                                       //\n    return _publishCursor;                                                                                             //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return Cursor;                                                                                                       //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"local_collection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/local_collection.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");                                          //\n                                                                                                                       //\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);                                                 //\n                                                                                                                       //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                                //\n                                                                                                                       //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  \"default\": function () {                                                                                             // 1\n    return LocalCollection;                                                                                            // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar Cursor = void 0;                                                                                                   // 1\nmodule.watch(require(\"./cursor.js\"), {                                                                                 // 1\n  \"default\": function (v) {                                                                                            // 1\n    Cursor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar ObserveHandle = void 0;                                                                                            // 1\nmodule.watch(require(\"./observe_handle.js\"), {                                                                         // 1\n  \"default\": function (v) {                                                                                            // 1\n    ObserveHandle = v;                                                                                                 // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar hasOwn = void 0,                                                                                                   // 1\n    isIndexable = void 0,                                                                                              // 1\n    isNumericKey = void 0,                                                                                             // 1\n    isOperatorObject = void 0,                                                                                         // 1\n    populateDocumentWithQueryFields = void 0,                                                                          // 1\n    projectionDetails = void 0;                                                                                        // 1\nmodule.watch(require(\"./common.js\"), {                                                                                 // 1\n  hasOwn: function (v) {                                                                                               // 1\n    hasOwn = v;                                                                                                        // 1\n  },                                                                                                                   // 1\n  isIndexable: function (v) {                                                                                          // 1\n    isIndexable = v;                                                                                                   // 1\n  },                                                                                                                   // 1\n  isNumericKey: function (v) {                                                                                         // 1\n    isNumericKey = v;                                                                                                  // 1\n  },                                                                                                                   // 1\n  isOperatorObject: function (v) {                                                                                     // 1\n    isOperatorObject = v;                                                                                              // 1\n  },                                                                                                                   // 1\n  populateDocumentWithQueryFields: function (v) {                                                                      // 1\n    populateDocumentWithQueryFields = v;                                                                               // 1\n  },                                                                                                                   // 1\n  projectionDetails: function (v) {                                                                                    // 1\n    projectionDetails = v;                                                                                             // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\n                                                                                                                       //\nvar LocalCollection = function () {                                                                                    //\n  function LocalCollection(name) {                                                                                     // 16\n    (0, _classCallCheck3.default)(this, LocalCollection);                                                              // 16\n    this.name = name; // _id -> document (also containing id)                                                          // 17\n                                                                                                                       //\n    this._docs = new LocalCollection._IdMap();                                                                         // 19\n    this._observeQueue = new Meteor._SynchronousQueue();                                                               // 21\n    this.next_qid = 1; // live query id generator                                                                      // 23\n    // qid -> live query object. keys:                                                                                 // 25\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.                                         // 26\n    //  results: array (ordered) or object (unordered) of current results                                              // 27\n    //    (aliased with this._docs!)                                                                                   // 28\n    //  resultsSnapshot: snapshot of results. null if not paused.                                                      // 29\n    //  cursor: Cursor object for the query.                                                                           // 30\n    //  selector, sorter, (callbacks): functions                                                                       // 31\n                                                                                                                       //\n    this.queries = Object.create(null); // null if not saving originals; an IdMap from id to original document value   // 32\n    // if saving originals. See comments before saveOriginals().                                                       // 35\n                                                                                                                       //\n    this._savedOriginals = null; // True when observers are paused and we should not send callbacks.                   // 36\n                                                                                                                       //\n    this.paused = false;                                                                                               // 39\n  } // options may include sort, skip, limit, reactive                                                                 // 40\n  // sort may be any of these forms:                                                                                   // 43\n  //     {a: 1, b: -1}                                                                                                 // 44\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]                                                                                 // 45\n  //     [\"a\", [\"b\", \"desc\"]]                                                                                          // 46\n  //   (in the first form you're beholden to key enumeration order in                                                  // 47\n  //   your javascript VM)                                                                                             // 48\n  //                                                                                                                   // 49\n  // reactive: if given, and false, don't register with Tracker (default                                               // 50\n  // is true)                                                                                                          // 51\n  //                                                                                                                   // 52\n  // XXX possibly should support retrieving a subset of fields? and                                                    // 53\n  // have it be a hint (ignored on the client, when not copying the                                                    // 54\n  // doc?)                                                                                                             // 55\n  //                                                                                                                   // 56\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!                                                        // 57\n  // XXX add one more sort form: \"key\"                                                                                 // 58\n  // XXX tests                                                                                                         // 59\n                                                                                                                       //\n                                                                                                                       //\n  LocalCollection.prototype.find = function () {                                                                       //\n    function find(selector, options) {                                                                                 //\n      // default syntax for everything is to omit the selector argument.                                               // 61\n      // but if selector is explicitly passed in as false or undefined, we                                             // 62\n      // want a selector that matches nothing.                                                                         // 63\n      if (arguments.length === 0) {                                                                                    // 64\n        selector = {};                                                                                                 // 65\n      }                                                                                                                // 66\n                                                                                                                       //\n      return new LocalCollection.Cursor(this, selector, options);                                                      // 68\n    }                                                                                                                  // 69\n                                                                                                                       //\n    return find;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  LocalCollection.prototype.findOne = function () {                                                                    //\n    function findOne(selector) {                                                                                       //\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                            // 71\n                                                                                                                       //\n      if (arguments.length === 0) {                                                                                    // 72\n        selector = {};                                                                                                 // 73\n      } // NOTE: by setting limit 1 here, we end up using very inefficient                                             // 74\n      // code that recomputes the whole query on each update. The upside is                                            // 77\n      // that when you reactively depend on a findOne you only get                                                     // 78\n      // invalidated when the found object changes, not any object in the                                              // 79\n      // collection. Most findOne will be by id, which has a fast path, so                                             // 80\n      // this might not be a big deal. In most cases, invalidation causes                                              // 81\n      // the called to re-query anyway, so this should be a net performance                                            // 82\n      // improvement.                                                                                                  // 83\n                                                                                                                       //\n                                                                                                                       //\n      options.limit = 1;                                                                                               // 84\n      return this.find(selector, options).fetch()[0];                                                                  // 86\n    }                                                                                                                  // 87\n                                                                                                                       //\n    return findOne;                                                                                                    //\n  }(); // XXX possibly enforce that 'undefined' does not appear (we assume                                             //\n  // this in our handling of null and $exists)                                                                         // 90\n                                                                                                                       //\n                                                                                                                       //\n  LocalCollection.prototype.insert = function () {                                                                     //\n    function insert(doc, callback) {                                                                                   //\n      var _this = this;                                                                                                // 91\n                                                                                                                       //\n      doc = EJSON.clone(doc);                                                                                          // 92\n      assertHasValidFieldNames(doc); // if you really want to use ObjectIDs, set this global.                          // 94\n      // Mongo.Collection specifies its own ids and does not use this code.                                            // 97\n                                                                                                                       //\n      if (!hasOwn.call(doc, '_id')) {                                                                                  // 98\n        doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();                                      // 99\n      }                                                                                                                // 100\n                                                                                                                       //\n      var id = doc._id;                                                                                                // 102\n                                                                                                                       //\n      if (this._docs.has(id)) {                                                                                        // 104\n        throw MinimongoError(\"Duplicate _id '\" + id + \"'\");                                                            // 105\n      }                                                                                                                // 106\n                                                                                                                       //\n      this._saveOriginal(id, undefined);                                                                               // 108\n                                                                                                                       //\n      this._docs.set(id, doc);                                                                                         // 109\n                                                                                                                       //\n      var queriesToRecompute = []; // trigger live queries that match                                                  // 111\n                                                                                                                       //\n      Object.keys(this.queries).forEach(function (qid) {                                                               // 114\n        var query = _this.queries[qid];                                                                                // 115\n                                                                                                                       //\n        if (query.dirty) {                                                                                             // 117\n          return;                                                                                                      // 118\n        }                                                                                                              // 119\n                                                                                                                       //\n        var matchResult = query.matcher.documentMatches(doc);                                                          // 121\n                                                                                                                       //\n        if (matchResult.result) {                                                                                      // 123\n          if (query.distances && matchResult.distance !== undefined) {                                                 // 124\n            query.distances.set(id, matchResult.distance);                                                             // 125\n          }                                                                                                            // 126\n                                                                                                                       //\n          if (query.cursor.skip || query.cursor.limit) {                                                               // 128\n            queriesToRecompute.push(qid);                                                                              // 129\n          } else {                                                                                                     // 130\n            LocalCollection._insertInResults(query, doc);                                                              // 131\n          }                                                                                                            // 132\n        }                                                                                                              // 133\n      });                                                                                                              // 134\n      queriesToRecompute.forEach(function (qid) {                                                                      // 136\n        if (_this.queries[qid]) {                                                                                      // 137\n          _this._recomputeResults(_this.queries[qid]);                                                                 // 138\n        }                                                                                                              // 139\n      });                                                                                                              // 140\n                                                                                                                       //\n      this._observeQueue.drain(); // Defer because the caller likely doesn't expect the callback to be run             // 142\n      // immediately.                                                                                                  // 145\n                                                                                                                       //\n                                                                                                                       //\n      if (callback) {                                                                                                  // 146\n        Meteor.defer(function () {                                                                                     // 147\n          callback(null, id);                                                                                          // 148\n        });                                                                                                            // 149\n      }                                                                                                                // 150\n                                                                                                                       //\n      return id;                                                                                                       // 152\n    }                                                                                                                  // 153\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }(); // Pause the observers. No callbacks from observers will fire until                                             //\n  // 'resumeObservers' is called.                                                                                      // 156\n                                                                                                                       //\n                                                                                                                       //\n  LocalCollection.prototype.pauseObservers = function () {                                                             //\n    function pauseObservers() {                                                                                        //\n      var _this2 = this;                                                                                               // 157\n                                                                                                                       //\n      // No-op if already paused.                                                                                      // 158\n      if (this.paused) {                                                                                               // 159\n        return;                                                                                                        // 160\n      } // Set the 'paused' flag such that new observer messages don't fire.                                           // 161\n                                                                                                                       //\n                                                                                                                       //\n      this.paused = true; // Take a snapshot of the query results for each query.                                      // 164\n                                                                                                                       //\n      Object.keys(this.queries).forEach(function (qid) {                                                               // 167\n        var query = _this2.queries[qid];                                                                               // 168\n        query.resultsSnapshot = EJSON.clone(query.results);                                                            // 169\n      });                                                                                                              // 170\n    }                                                                                                                  // 171\n                                                                                                                       //\n    return pauseObservers;                                                                                             //\n  }();                                                                                                                 //\n                                                                                                                       //\n  LocalCollection.prototype.remove = function () {                                                                     //\n    function remove(selector, callback) {                                                                              //\n      var _this3 = this;                                                                                               // 173\n                                                                                                                       //\n      // Easy special case: if we're not calling observeChanges callbacks and                                          // 174\n      // we're not saving originals and we got asked to remove everything, then                                        // 175\n      // just empty everything directly.                                                                               // 176\n      if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {                                        // 177\n        var _result = this._docs.size();                                                                               // 178\n                                                                                                                       //\n        this._docs.clear();                                                                                            // 180\n                                                                                                                       //\n        Object.keys(this.queries).forEach(function (qid) {                                                             // 182\n          var query = _this3.queries[qid];                                                                             // 183\n                                                                                                                       //\n          if (query.ordered) {                                                                                         // 185\n            query.results = [];                                                                                        // 186\n          } else {                                                                                                     // 187\n            query.results.clear();                                                                                     // 188\n          }                                                                                                            // 189\n        });                                                                                                            // 190\n                                                                                                                       //\n        if (callback) {                                                                                                // 192\n          Meteor.defer(function () {                                                                                   // 193\n            callback(null, _result);                                                                                   // 194\n          });                                                                                                          // 195\n        }                                                                                                              // 196\n                                                                                                                       //\n        return _result;                                                                                                // 198\n      }                                                                                                                // 199\n                                                                                                                       //\n      var matcher = new Minimongo.Matcher(selector);                                                                   // 201\n      var remove = [];                                                                                                 // 202\n                                                                                                                       //\n      this._eachPossiblyMatchingDoc(selector, function (doc, id) {                                                     // 204\n        if (matcher.documentMatches(doc).result) {                                                                     // 205\n          remove.push(id);                                                                                             // 206\n        }                                                                                                              // 207\n      });                                                                                                              // 208\n                                                                                                                       //\n      var queriesToRecompute = [];                                                                                     // 210\n      var queryRemove = [];                                                                                            // 211\n                                                                                                                       //\n      var _loop = function (i) {                                                                                       // 173\n        var removeId = remove[i];                                                                                      // 214\n                                                                                                                       //\n        var removeDoc = _this3._docs.get(removeId);                                                                    // 215\n                                                                                                                       //\n        Object.keys(_this3.queries).forEach(function (qid) {                                                           // 217\n          var query = _this3.queries[qid];                                                                             // 218\n                                                                                                                       //\n          if (query.dirty) {                                                                                           // 220\n            return;                                                                                                    // 221\n          }                                                                                                            // 222\n                                                                                                                       //\n          if (query.matcher.documentMatches(removeDoc).result) {                                                       // 224\n            if (query.cursor.skip || query.cursor.limit) {                                                             // 225\n              queriesToRecompute.push(qid);                                                                            // 226\n            } else {                                                                                                   // 227\n              queryRemove.push({                                                                                       // 228\n                qid: qid,                                                                                              // 228\n                doc: removeDoc                                                                                         // 228\n              });                                                                                                      // 228\n            }                                                                                                          // 229\n          }                                                                                                            // 230\n        });                                                                                                            // 231\n                                                                                                                       //\n        _this3._saveOriginal(removeId, removeDoc);                                                                     // 233\n                                                                                                                       //\n        _this3._docs.remove(removeId);                                                                                 // 234\n      };                                                                                                               // 173\n                                                                                                                       //\n      for (var i = 0; i < remove.length; i++) {                                                                        // 213\n        _loop(i);                                                                                                      // 213\n      } // run live query callbacks _after_ we've removed the documents.                                               // 235\n                                                                                                                       //\n                                                                                                                       //\n      queryRemove.forEach(function (remove) {                                                                          // 238\n        var query = _this3.queries[remove.qid];                                                                        // 239\n                                                                                                                       //\n        if (query) {                                                                                                   // 241\n          query.distances && query.distances.remove(remove.doc._id);                                                   // 242\n                                                                                                                       //\n          LocalCollection._removeFromResults(query, remove.doc);                                                       // 243\n        }                                                                                                              // 244\n      });                                                                                                              // 245\n      queriesToRecompute.forEach(function (qid) {                                                                      // 247\n        var query = _this3.queries[qid];                                                                               // 248\n                                                                                                                       //\n        if (query) {                                                                                                   // 250\n          _this3._recomputeResults(query);                                                                             // 251\n        }                                                                                                              // 252\n      });                                                                                                              // 253\n                                                                                                                       //\n      this._observeQueue.drain();                                                                                      // 255\n                                                                                                                       //\n      var result = remove.length;                                                                                      // 257\n                                                                                                                       //\n      if (callback) {                                                                                                  // 259\n        Meteor.defer(function () {                                                                                     // 260\n          callback(null, result);                                                                                      // 261\n        });                                                                                                            // 262\n      }                                                                                                                // 263\n                                                                                                                       //\n      return result;                                                                                                   // 265\n    }                                                                                                                  // 266\n                                                                                                                       //\n    return remove;                                                                                                     //\n  }(); // Resume the observers. Observers immediately receive change                                                   //\n  // notifications to bring them to the current state of the                                                           // 269\n  // database. Note that this is not just replaying all the changes that                                               // 270\n  // happened during the pause, it is a smarter 'coalesced' diff.                                                      // 271\n                                                                                                                       //\n                                                                                                                       //\n  LocalCollection.prototype.resumeObservers = function () {                                                            //\n    function resumeObservers() {                                                                                       //\n      var _this4 = this;                                                                                               // 272\n                                                                                                                       //\n      // No-op if not paused.                                                                                          // 273\n      if (!this.paused) {                                                                                              // 274\n        return;                                                                                                        // 275\n      } // Unset the 'paused' flag. Make sure to do this first, otherwise                                              // 276\n      // observer methods won't actually fire when we trigger them.                                                    // 279\n                                                                                                                       //\n                                                                                                                       //\n      this.paused = false;                                                                                             // 280\n      Object.keys(this.queries).forEach(function (qid) {                                                               // 282\n        var query = _this4.queries[qid];                                                                               // 283\n                                                                                                                       //\n        if (query.dirty) {                                                                                             // 285\n          query.dirty = false; // re-compute results will perform `LocalCollection._diffQueryChanges`                  // 286\n          // automatically.                                                                                            // 289\n                                                                                                                       //\n          _this4._recomputeResults(query, query.resultsSnapshot);                                                      // 290\n        } else {                                                                                                       // 291\n          // Diff the current results against the snapshot and send to observers.                                      // 292\n          // pass the query object for its observer callbacks.                                                         // 293\n          LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {              // 294\n            projectionFn: query.projectionFn                                                                           // 299\n          });                                                                                                          // 299\n        }                                                                                                              // 301\n                                                                                                                       //\n        query.resultsSnapshot = null;                                                                                  // 303\n      });                                                                                                              // 304\n                                                                                                                       //\n      this._observeQueue.drain();                                                                                      // 306\n    }                                                                                                                  // 307\n                                                                                                                       //\n    return resumeObservers;                                                                                            //\n  }();                                                                                                                 //\n                                                                                                                       //\n  LocalCollection.prototype.retrieveOriginals = function () {                                                          //\n    function retrieveOriginals() {                                                                                     //\n      if (!this._savedOriginals) {                                                                                     // 310\n        throw new Error('Called retrieveOriginals without saveOriginals');                                             // 311\n      }                                                                                                                // 312\n                                                                                                                       //\n      var originals = this._savedOriginals;                                                                            // 314\n      this._savedOriginals = null;                                                                                     // 316\n      return originals;                                                                                                // 318\n    }                                                                                                                  // 319\n                                                                                                                       //\n    return retrieveOriginals;                                                                                          //\n  }(); // To track what documents are affected by a piece of code, call                                                //\n  // saveOriginals() before it and retrieveOriginals() after it.                                                       // 322\n  // retrieveOriginals returns an object whose keys are the ids of the documents                                       // 323\n  // that were affected since the call to saveOriginals(), and the values are                                          // 324\n  // equal to the document's contents at the time of saveOriginals. (In the case                                       // 325\n  // of an inserted document, undefined is the value.) You must alternate                                              // 326\n  // between calls to saveOriginals() and retrieveOriginals().                                                         // 327\n                                                                                                                       //\n                                                                                                                       //\n  LocalCollection.prototype.saveOriginals = function () {                                                              //\n    function saveOriginals() {                                                                                         //\n      if (this._savedOriginals) {                                                                                      // 329\n        throw new Error('Called saveOriginals twice without retrieveOriginals');                                       // 330\n      }                                                                                                                // 331\n                                                                                                                       //\n      this._savedOriginals = new LocalCollection._IdMap();                                                             // 333\n    }                                                                                                                  // 334\n                                                                                                                       //\n    return saveOriginals;                                                                                              //\n  }(); // XXX atomicity: if multi is true, and one modification fails, do                                              //\n  // we rollback the whole operation, or what?                                                                         // 337\n                                                                                                                       //\n                                                                                                                       //\n  LocalCollection.prototype.update = function () {                                                                     //\n    function update(selector, mod, options, callback) {                                                                //\n      var _this5 = this;                                                                                               // 338\n                                                                                                                       //\n      if (!callback && options instanceof Function) {                                                                  // 339\n        callback = options;                                                                                            // 340\n        options = null;                                                                                                // 341\n      }                                                                                                                // 342\n                                                                                                                       //\n      if (!options) {                                                                                                  // 344\n        options = {};                                                                                                  // 345\n      }                                                                                                                // 346\n                                                                                                                       //\n      var matcher = new Minimongo.Matcher(selector, true); // Save the original results of any query that we might need to\n      // _recomputeResults on, because _modifyAndNotify will mutate the objects in                                     // 351\n      // it. (We don't need to save the original results of paused queries because                                     // 352\n      // they already have a resultsSnapshot and we won't be diffing in                                                // 353\n      // _recomputeResults.)                                                                                           // 354\n                                                                                                                       //\n      var qidToOriginalResults = {}; // We should only clone each document once, even if it appears in multiple        // 355\n      // queries                                                                                                       // 358\n                                                                                                                       //\n      var docMap = new LocalCollection._IdMap();                                                                       // 359\n                                                                                                                       //\n      var idsMatched = LocalCollection._idsMatchedBySelector(selector);                                                // 360\n                                                                                                                       //\n      Object.keys(this.queries).forEach(function (qid) {                                                               // 362\n        var query = _this5.queries[qid];                                                                               // 363\n                                                                                                                       //\n        if ((query.cursor.skip || query.cursor.limit) && !_this5.paused) {                                             // 365\n          // Catch the case of a reactive `count()` on a cursor with skip                                              // 366\n          // or limit, which registers an unordered observe. This is a                                                 // 367\n          // pretty rare case, so we just clone the entire result set with                                             // 368\n          // no optimizations for documents that appear in these result                                                // 369\n          // sets and other queries.                                                                                   // 370\n          if (query.results instanceof LocalCollection._IdMap) {                                                       // 371\n            qidToOriginalResults[qid] = query.results.clone();                                                         // 372\n            return;                                                                                                    // 373\n          }                                                                                                            // 374\n                                                                                                                       //\n          if (!(query.results instanceof Array)) {                                                                     // 376\n            throw new Error('Assertion failed: query.results not an array');                                           // 377\n          } // Clones a document to be stored in `qidToOriginalResults`                                                // 378\n          // because it may be modified before the new and old result sets                                             // 381\n          // are diffed. But if we know exactly which document IDs we're                                               // 382\n          // going to modify, then we only need to clone those.                                                        // 383\n                                                                                                                       //\n                                                                                                                       //\n          var memoizedCloneIfNeeded = function (doc) {                                                                 // 384\n            if (docMap.has(doc._id)) {                                                                                 // 385\n              return docMap.get(doc._id);                                                                              // 386\n            }                                                                                                          // 387\n                                                                                                                       //\n            var docToMemoize = idsMatched && !idsMatched.some(function (id) {                                          // 389\n              return EJSON.equals(id, doc._id);                                                                        // 391\n            }) ? doc : EJSON.clone(doc);                                                                               // 391\n            docMap.set(doc._id, docToMemoize);                                                                         // 394\n            return docToMemoize;                                                                                       // 396\n          };                                                                                                           // 397\n                                                                                                                       //\n          qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);                                        // 399\n        }                                                                                                              // 400\n      });                                                                                                              // 401\n      var recomputeQids = {};                                                                                          // 403\n      var updateCount = 0;                                                                                             // 405\n                                                                                                                       //\n      this._eachPossiblyMatchingDoc(selector, function (doc, id) {                                                     // 407\n        var queryResult = matcher.documentMatches(doc);                                                                // 408\n                                                                                                                       //\n        if (queryResult.result) {                                                                                      // 410\n          // XXX Should we save the original even if mod ends up being a no-op?                                        // 411\n          _this5._saveOriginal(id, doc);                                                                               // 412\n                                                                                                                       //\n          _this5._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);                                  // 413\n                                                                                                                       //\n          ++updateCount;                                                                                               // 420\n                                                                                                                       //\n          if (!options.multi) {                                                                                        // 422\n            return false; // break                                                                                     // 423\n          }                                                                                                            // 424\n        }                                                                                                              // 425\n                                                                                                                       //\n        return true;                                                                                                   // 427\n      });                                                                                                              // 428\n                                                                                                                       //\n      Object.keys(recomputeQids).forEach(function (qid) {                                                              // 430\n        var query = _this5.queries[qid];                                                                               // 431\n                                                                                                                       //\n        if (query) {                                                                                                   // 433\n          _this5._recomputeResults(query, qidToOriginalResults[qid]);                                                  // 434\n        }                                                                                                              // 435\n      });                                                                                                              // 436\n                                                                                                                       //\n      this._observeQueue.drain(); // If we are doing an upsert, and we didn't modify any documents yet, then           // 438\n      // it's time to do an insert. Figure out what document we are inserting, and                                     // 441\n      // generate an id for it.                                                                                        // 442\n                                                                                                                       //\n                                                                                                                       //\n      var insertedId = void 0;                                                                                         // 443\n                                                                                                                       //\n      if (updateCount === 0 && options.upsert) {                                                                       // 444\n        var doc = LocalCollection._createUpsertDocument(selector, mod);                                                // 445\n                                                                                                                       //\n        if (!doc._id && options.insertedId) {                                                                          // 446\n          doc._id = options.insertedId;                                                                                // 447\n        }                                                                                                              // 448\n                                                                                                                       //\n        insertedId = this.insert(doc);                                                                                 // 450\n        updateCount = 1;                                                                                               // 451\n      } // Return the number of affected documents, or in the upsert case, an object                                   // 452\n      // containing the number of affected docs and the id of the doc that was                                         // 455\n      // inserted, if any.                                                                                             // 456\n                                                                                                                       //\n                                                                                                                       //\n      var result = void 0;                                                                                             // 457\n                                                                                                                       //\n      if (options._returnObject) {                                                                                     // 458\n        result = {                                                                                                     // 459\n          numberAffected: updateCount                                                                                  // 459\n        };                                                                                                             // 459\n                                                                                                                       //\n        if (insertedId !== undefined) {                                                                                // 461\n          result.insertedId = insertedId;                                                                              // 462\n        }                                                                                                              // 463\n      } else {                                                                                                         // 464\n        result = updateCount;                                                                                          // 465\n      }                                                                                                                // 466\n                                                                                                                       //\n      if (callback) {                                                                                                  // 468\n        Meteor.defer(function () {                                                                                     // 469\n          callback(null, result);                                                                                      // 470\n        });                                                                                                            // 471\n      }                                                                                                                // 472\n                                                                                                                       //\n      return result;                                                                                                   // 474\n    }                                                                                                                  // 475\n                                                                                                                       //\n    return update;                                                                                                     //\n  }(); // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is                                         //\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,                                                     // 478\n  // _returnObject: true}).                                                                                            // 479\n                                                                                                                       //\n                                                                                                                       //\n  LocalCollection.prototype.upsert = function () {                                                                     //\n    function upsert(selector, mod, options, callback) {                                                                //\n      if (!callback && typeof options === 'function') {                                                                // 481\n        callback = options;                                                                                            // 482\n        options = {};                                                                                                  // 483\n      }                                                                                                                // 484\n                                                                                                                       //\n      return this.update(selector, mod, Object.assign({}, options, {                                                   // 486\n        upsert: true,                                                                                                  // 489\n        _returnObject: true                                                                                            // 489\n      }), callback);                                                                                                   // 489\n    }                                                                                                                  // 492\n                                                                                                                       //\n    return upsert;                                                                                                     //\n  }(); // Iterates over a subset of documents that could match selector; calls                                         //\n  // fn(doc, id) on each of them.  Specifically, if selector specifies                                                 // 495\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the                                           // 496\n  // same object that is in _docs.                                                                                     // 497\n                                                                                                                       //\n                                                                                                                       //\n  LocalCollection.prototype._eachPossiblyMatchingDoc = function () {                                                   //\n    function _eachPossiblyMatchingDoc(selector, fn) {                                                                  //\n      var _this6 = this;                                                                                               // 498\n                                                                                                                       //\n      var specificIds = LocalCollection._idsMatchedBySelector(selector);                                               // 499\n                                                                                                                       //\n      if (specificIds) {                                                                                               // 501\n        specificIds.some(function (id) {                                                                               // 502\n          var doc = _this6._docs.get(id);                                                                              // 503\n                                                                                                                       //\n          if (doc) {                                                                                                   // 505\n            return fn(doc, id) === false;                                                                              // 506\n          }                                                                                                            // 507\n        });                                                                                                            // 508\n      } else {                                                                                                         // 509\n        this._docs.forEach(fn);                                                                                        // 510\n      }                                                                                                                // 511\n    }                                                                                                                  // 512\n                                                                                                                       //\n    return _eachPossiblyMatchingDoc;                                                                                   //\n  }();                                                                                                                 //\n                                                                                                                       //\n  LocalCollection.prototype._modifyAndNotify = function () {                                                           //\n    function _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {                                                 //\n      var _this7 = this;                                                                                               // 514\n                                                                                                                       //\n      var matched_before = {};                                                                                         // 515\n      Object.keys(this.queries).forEach(function (qid) {                                                               // 517\n        var query = _this7.queries[qid];                                                                               // 518\n                                                                                                                       //\n        if (query.dirty) {                                                                                             // 520\n          return;                                                                                                      // 521\n        }                                                                                                              // 522\n                                                                                                                       //\n        if (query.ordered) {                                                                                           // 524\n          matched_before[qid] = query.matcher.documentMatches(doc).result;                                             // 525\n        } else {                                                                                                       // 526\n          // Because we don't support skip or limit (yet) in unordered queries, we                                     // 527\n          // can just do a direct lookup.                                                                              // 528\n          matched_before[qid] = query.results.has(doc._id);                                                            // 529\n        }                                                                                                              // 530\n      });                                                                                                              // 531\n      var old_doc = EJSON.clone(doc);                                                                                  // 533\n                                                                                                                       //\n      LocalCollection._modify(doc, mod, {                                                                              // 535\n        arrayIndices: arrayIndices                                                                                     // 535\n      });                                                                                                              // 535\n                                                                                                                       //\n      Object.keys(this.queries).forEach(function (qid) {                                                               // 537\n        var query = _this7.queries[qid];                                                                               // 538\n                                                                                                                       //\n        if (query.dirty) {                                                                                             // 540\n          return;                                                                                                      // 541\n        }                                                                                                              // 542\n                                                                                                                       //\n        var afterMatch = query.matcher.documentMatches(doc);                                                           // 544\n        var after = afterMatch.result;                                                                                 // 545\n        var before = matched_before[qid];                                                                              // 546\n                                                                                                                       //\n        if (after && query.distances && afterMatch.distance !== undefined) {                                           // 548\n          query.distances.set(doc._id, afterMatch.distance);                                                           // 549\n        }                                                                                                              // 550\n                                                                                                                       //\n        if (query.cursor.skip || query.cursor.limit) {                                                                 // 552\n          // We need to recompute any query where the doc may have been in the                                         // 553\n          // cursor's window either before or after the update. (Note that if skip                                     // 554\n          // or limit is set, \"before\" and \"after\" being true do not necessarily                                       // 555\n          // mean that the document is in the cursor's output after skip/limit is                                      // 556\n          // applied... but if they are false, then the document definitely is NOT                                     // 557\n          // in the output. So it's safe to skip recompute if neither before or                                        // 558\n          // after are true.)                                                                                          // 559\n          if (before || after) {                                                                                       // 560\n            recomputeQids[qid] = true;                                                                                 // 561\n          }                                                                                                            // 562\n        } else if (before && !after) {                                                                                 // 563\n          LocalCollection._removeFromResults(query, doc);                                                              // 564\n        } else if (!before && after) {                                                                                 // 565\n          LocalCollection._insertInResults(query, doc);                                                                // 566\n        } else if (before && after) {                                                                                  // 567\n          LocalCollection._updateInResults(query, doc, old_doc);                                                       // 568\n        }                                                                                                              // 569\n      });                                                                                                              // 570\n    }                                                                                                                  // 571\n                                                                                                                       //\n    return _modifyAndNotify;                                                                                           //\n  }(); // Recomputes the results of a query and runs observe callbacks for the                                         //\n  // difference between the previous results and the current results (unless                                           // 574\n  // paused). Used for skip/limit queries.                                                                             // 575\n  //                                                                                                                   // 576\n  // When this is used by insert or remove, it can just use query.results for                                          // 577\n  // the old results (and there's no need to pass in oldResults), because these                                        // 578\n  // operations don't mutate the documents in the collection. Update needs to                                          // 579\n  // pass in an oldResults which was deep-copied before the modifier was                                               // 580\n  // applied.                                                                                                          // 581\n  //                                                                                                                   // 582\n  // oldResults is guaranteed to be ignored if the query is not paused.                                                // 583\n                                                                                                                       //\n                                                                                                                       //\n  LocalCollection.prototype._recomputeResults = function () {                                                          //\n    function _recomputeResults(query, oldResults) {                                                                    //\n      if (this.paused) {                                                                                               // 585\n        // There's no reason to recompute the results now as we're still paused.                                       // 586\n        // By flagging the query as \"dirty\", the recompute will be performed                                           // 587\n        // when resumeObservers is called.                                                                             // 588\n        query.dirty = true;                                                                                            // 589\n        return;                                                                                                        // 590\n      }                                                                                                                // 591\n                                                                                                                       //\n      if (!this.paused && !oldResults) {                                                                               // 593\n        oldResults = query.results;                                                                                    // 594\n      }                                                                                                                // 595\n                                                                                                                       //\n      if (query.distances) {                                                                                           // 597\n        query.distances.clear();                                                                                       // 598\n      }                                                                                                                // 599\n                                                                                                                       //\n      query.results = query.cursor._getRawObjects({                                                                    // 601\n        distances: query.distances,                                                                                    // 602\n        ordered: query.ordered                                                                                         // 603\n      });                                                                                                              // 601\n                                                                                                                       //\n      if (!this.paused) {                                                                                              // 606\n        LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {                           // 607\n          projectionFn: query.projectionFn                                                                             // 612\n        });                                                                                                            // 612\n      }                                                                                                                // 614\n    }                                                                                                                  // 615\n                                                                                                                       //\n    return _recomputeResults;                                                                                          //\n  }();                                                                                                                 //\n                                                                                                                       //\n  LocalCollection.prototype._saveOriginal = function () {                                                              //\n    function _saveOriginal(id, doc) {                                                                                  //\n      // Are we even trying to save originals?                                                                         // 618\n      if (!this._savedOriginals) {                                                                                     // 619\n        return;                                                                                                        // 620\n      } // Have we previously mutated the original (and so 'doc' is not actually                                       // 621\n      // original)?  (Note the 'has' check rather than truth: we store undefined                                       // 624\n      // here for inserted docs!)                                                                                      // 625\n                                                                                                                       //\n                                                                                                                       //\n      if (this._savedOriginals.has(id)) {                                                                              // 626\n        return;                                                                                                        // 627\n      }                                                                                                                // 628\n                                                                                                                       //\n      this._savedOriginals.set(id, EJSON.clone(doc));                                                                  // 630\n    }                                                                                                                  // 631\n                                                                                                                       //\n    return _saveOriginal;                                                                                              //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return LocalCollection;                                                                                              //\n}();                                                                                                                   //\n                                                                                                                       //\nLocalCollection.Cursor = Cursor;                                                                                       // 634\nLocalCollection.ObserveHandle = ObserveHandle; // XXX maybe move these into another ObserveHelpers package or something\n// _CachingChangeObserver is an object which receives observeChanges callbacks                                         // 640\n// and keeps a cache of the current cursor state up to date in this.docs. Users                                        // 641\n// of this class should read the docs field but not modify it. You should pass                                         // 642\n// the \"applyChange\" field as the callbacks to the underlying observeChanges                                           // 643\n// call. Optionally, you can specify your own observeChanges callbacks which are                                       // 644\n// invoked immediately before the docs field is updated; this object is made                                           // 645\n// available as `this` to those callbacks.                                                                             // 646\n                                                                                                                       //\nLocalCollection._CachingChangeObserver = function () {                                                                 // 647\n  function _CachingChangeObserver() {                                                                                  // 648\n    var _this8 = this;                                                                                                 // 648\n                                                                                                                       //\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                              // 648\n    (0, _classCallCheck3.default)(this, _CachingChangeObserver);                                                       // 648\n                                                                                                                       //\n    var orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n                                                                                                                       //\n    if (hasOwn.call(options, 'ordered')) {                                                                             // 654\n      this.ordered = options.ordered;                                                                                  // 655\n                                                                                                                       //\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {                                             // 657\n        throw Error('ordered option doesn\\'t match callbacks');                                                        // 658\n      }                                                                                                                // 659\n    } else if (options.callbacks) {                                                                                    // 660\n      this.ordered = orderedFromCallbacks;                                                                             // 661\n    } else {                                                                                                           // 662\n      throw Error('must provide ordered or callbacks');                                                                // 663\n    }                                                                                                                  // 664\n                                                                                                                       //\n    var callbacks = options.callbacks || {};                                                                           // 666\n                                                                                                                       //\n    if (this.ordered) {                                                                                                // 668\n      this.docs = new OrderedDict(MongoID.idStringify);                                                                // 669\n      this.applyChange = {                                                                                             // 670\n        addedBefore: function (id, fields, before) {                                                                   // 671\n          var doc = EJSON.clone(fields);                                                                               // 672\n          doc._id = id;                                                                                                // 674\n                                                                                                                       //\n          if (callbacks.addedBefore) {                                                                                 // 676\n            callbacks.addedBefore.call(_this8, id, fields, before);                                                    // 677\n          } // This line triggers if we provide added with movedBefore.                                                // 678\n                                                                                                                       //\n                                                                                                                       //\n          if (callbacks.added) {                                                                                       // 681\n            callbacks.added.call(_this8, id, fields);                                                                  // 682\n          } // XXX could `before` be a falsy ID?  Technically                                                          // 683\n          // idStringify seems to allow for them -- though                                                             // 686\n          // OrderedDict won't call stringify on a falsy arg.                                                          // 687\n                                                                                                                       //\n                                                                                                                       //\n          _this8.docs.putBefore(id, doc, before || null);                                                              // 688\n        },                                                                                                             // 689\n        movedBefore: function (id, before) {                                                                           // 690\n          var doc = _this8.docs.get(id);                                                                               // 691\n                                                                                                                       //\n          if (callbacks.movedBefore) {                                                                                 // 693\n            callbacks.movedBefore.call(_this8, id, before);                                                            // 694\n          }                                                                                                            // 695\n                                                                                                                       //\n          _this8.docs.moveBefore(id, before || null);                                                                  // 697\n        }                                                                                                              // 698\n      };                                                                                                               // 670\n    } else {                                                                                                           // 700\n      this.docs = new LocalCollection._IdMap();                                                                        // 701\n      this.applyChange = {                                                                                             // 702\n        added: function (id, fields) {                                                                                 // 703\n          var doc = EJSON.clone(fields);                                                                               // 704\n                                                                                                                       //\n          if (callbacks.added) {                                                                                       // 706\n            callbacks.added.call(_this8, id, fields);                                                                  // 707\n          }                                                                                                            // 708\n                                                                                                                       //\n          doc._id = id;                                                                                                // 710\n                                                                                                                       //\n          _this8.docs.set(id, doc);                                                                                    // 712\n        }                                                                                                              // 713\n      };                                                                                                               // 702\n    } // The methods in _IdMap and OrderedDict used by these callbacks are                                             // 715\n    // identical.                                                                                                      // 718\n                                                                                                                       //\n                                                                                                                       //\n    this.applyChange.changed = function (id, fields) {                                                                 // 719\n      var doc = _this8.docs.get(id);                                                                                   // 720\n                                                                                                                       //\n      if (!doc) {                                                                                                      // 722\n        throw new Error(\"Unknown id for changed: \" + id);                                                              // 723\n      }                                                                                                                // 724\n                                                                                                                       //\n      if (callbacks.changed) {                                                                                         // 726\n        callbacks.changed.call(_this8, id, EJSON.clone(fields));                                                       // 727\n      }                                                                                                                // 728\n                                                                                                                       //\n      DiffSequence.applyChanges(doc, fields);                                                                          // 730\n    };                                                                                                                 // 731\n                                                                                                                       //\n    this.applyChange.removed = function (id) {                                                                         // 733\n      if (callbacks.removed) {                                                                                         // 734\n        callbacks.removed.call(_this8, id);                                                                            // 735\n      }                                                                                                                // 736\n                                                                                                                       //\n      _this8.docs.remove(id);                                                                                          // 738\n    };                                                                                                                 // 739\n  }                                                                                                                    // 740\n                                                                                                                       //\n  return _CachingChangeObserver;                                                                                       // 647\n}();                                                                                                                   // 647\n                                                                                                                       //\nLocalCollection._IdMap = function (_IdMap2) {                                                                          // 743\n  (0, _inherits3.default)(_IdMap, _IdMap2);                                                                            // 743\n                                                                                                                       //\n  function _IdMap() {                                                                                                  // 744\n    (0, _classCallCheck3.default)(this, _IdMap);                                                                       // 744\n    return (0, _possibleConstructorReturn3.default)(this, _IdMap2.call(this, MongoID.idStringify, MongoID.idParse));   // 744\n  }                                                                                                                    // 746\n                                                                                                                       //\n  return _IdMap;                                                                                                       // 743\n}(IdMap); // Wrap a transform function to return objects that have the _id field                                       // 743\n// of the untransformed document. This ensures that subsystems such as                                                 // 750\n// the observe-sequence package that call `observe` can keep track of                                                  // 751\n// the documents identities.                                                                                           // 752\n//                                                                                                                     // 753\n// - Require that it returns objects                                                                                   // 754\n// - If the return value has an _id field, verify that it matches the                                                  // 755\n//   original _id field                                                                                                // 756\n// - If the return value doesn't have an _id field, add it back.                                                       // 757\n                                                                                                                       //\n                                                                                                                       //\nLocalCollection.wrapTransform = function (transform) {                                                                 // 758\n  if (!transform) {                                                                                                    // 759\n    return null;                                                                                                       // 760\n  } // No need to doubly-wrap transforms.                                                                              // 761\n                                                                                                                       //\n                                                                                                                       //\n  if (transform.__wrappedTransform__) {                                                                                // 764\n    return transform;                                                                                                  // 765\n  }                                                                                                                    // 766\n                                                                                                                       //\n  var wrapped = function (doc) {                                                                                       // 768\n    if (!hasOwn.call(doc, '_id')) {                                                                                    // 769\n      // XXX do we ever have a transform on the oplog's collection? because that                                       // 770\n      // collection has no _id.                                                                                        // 771\n      throw new Error('can only transform documents with _id');                                                        // 772\n    }                                                                                                                  // 773\n                                                                                                                       //\n    var id = doc._id; // XXX consider making tracker a weak dependency and checking                                    // 775\n    // Package.tracker here                                                                                            // 778\n                                                                                                                       //\n    var transformed = Tracker.nonreactive(function () {                                                                // 779\n      return transform(doc);                                                                                           // 779\n    });                                                                                                                // 779\n                                                                                                                       //\n    if (!LocalCollection._isPlainObject(transformed)) {                                                                // 781\n      throw new Error('transform must return object');                                                                 // 782\n    }                                                                                                                  // 783\n                                                                                                                       //\n    if (hasOwn.call(transformed, '_id')) {                                                                             // 785\n      if (!EJSON.equals(transformed._id, id)) {                                                                        // 786\n        throw new Error('transformed document can\\'t have different _id');                                             // 787\n      }                                                                                                                // 788\n    } else {                                                                                                           // 789\n      transformed._id = id;                                                                                            // 790\n    }                                                                                                                  // 791\n                                                                                                                       //\n    return transformed;                                                                                                // 793\n  };                                                                                                                   // 794\n                                                                                                                       //\n  wrapped.__wrappedTransform__ = true;                                                                                 // 796\n  return wrapped;                                                                                                      // 798\n}; // XXX the sorted-query logic below is laughably inefficient. we'll                                                 // 799\n// need to come up with a better datastructure for this.                                                               // 802\n//                                                                                                                     // 803\n// XXX the logic for observing with a skip or a limit is even more                                                     // 804\n// laughably inefficient. we recompute the whole results every time!                                                   // 805\n// This binary search puts a value between any equal values, and the first                                             // 807\n// lesser value.                                                                                                       // 808\n                                                                                                                       //\n                                                                                                                       //\nLocalCollection._binarySearch = function (cmp, array, value) {                                                         // 809\n  var first = 0;                                                                                                       // 810\n  var range = array.length;                                                                                            // 811\n                                                                                                                       //\n  while (range > 0) {                                                                                                  // 813\n    var halfRange = Math.floor(range / 2);                                                                             // 814\n                                                                                                                       //\n    if (cmp(value, array[first + halfRange]) >= 0) {                                                                   // 816\n      first += halfRange + 1;                                                                                          // 817\n      range -= halfRange + 1;                                                                                          // 818\n    } else {                                                                                                           // 819\n      range = halfRange;                                                                                               // 820\n    }                                                                                                                  // 821\n  }                                                                                                                    // 822\n                                                                                                                       //\n  return first;                                                                                                        // 824\n};                                                                                                                     // 825\n                                                                                                                       //\nLocalCollection._checkSupportedProjection = function (fields) {                                                        // 827\n  if (fields !== Object(fields) || Array.isArray(fields)) {                                                            // 828\n    throw MinimongoError('fields option must be an object');                                                           // 829\n  }                                                                                                                    // 830\n                                                                                                                       //\n  Object.keys(fields).forEach(function (keyPath) {                                                                     // 832\n    if (keyPath.split('.').includes('$')) {                                                                            // 833\n      throw MinimongoError('Minimongo doesn\\'t support $ operator in projections yet.');                               // 834\n    }                                                                                                                  // 837\n                                                                                                                       //\n    var value = fields[keyPath];                                                                                       // 839\n                                                                                                                       //\n    if ((typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) === 'object' && ['$elemMatch', '$meta', '$slice'].some(function (key) {\n      return hasOwn.call(value, key);                                                                                  // 842\n    })) {                                                                                                              // 842\n      throw MinimongoError('Minimongo doesn\\'t support operators in projections yet.');                                // 845\n    }                                                                                                                  // 848\n                                                                                                                       //\n    if (![1, 0, true, false].includes(value)) {                                                                        // 850\n      throw MinimongoError('Projection values should be one of 1, 0, true, or false');                                 // 851\n    }                                                                                                                  // 854\n  });                                                                                                                  // 855\n}; // Knows how to compile a fields projection to a predicate function.                                                // 856\n// @returns - Function: a closure that filters out an object according to the                                          // 859\n//            fields projection rules:                                                                                 // 860\n//            @param obj - Object: MongoDB-styled document                                                             // 861\n//            @returns - Object: a document with the fields filtered out                                               // 862\n//                       according to projection rules. Doesn't retain subfields                                       // 863\n//                       of passed argument.                                                                           // 864\n                                                                                                                       //\n                                                                                                                       //\nLocalCollection._compileProjection = function (fields) {                                                               // 865\n  LocalCollection._checkSupportedProjection(fields);                                                                   // 866\n                                                                                                                       //\n  var _idProjection = fields._id === undefined ? true : fields._id;                                                    // 868\n                                                                                                                       //\n  var details = projectionDetails(fields); // returns transformed doc according to ruleTree                            // 869\n                                                                                                                       //\n  var transform = function (doc, ruleTree) {                                                                           // 872\n    // Special case for \"sets\"                                                                                         // 873\n    if (Array.isArray(doc)) {                                                                                          // 874\n      return doc.map(function (subdoc) {                                                                               // 875\n        return transform(subdoc, ruleTree);                                                                            // 875\n      });                                                                                                              // 875\n    }                                                                                                                  // 876\n                                                                                                                       //\n    var result = details.including ? {} : EJSON.clone(doc);                                                            // 878\n    Object.keys(ruleTree).forEach(function (key) {                                                                     // 880\n      if (!hasOwn.call(doc, key)) {                                                                                    // 881\n        return;                                                                                                        // 882\n      }                                                                                                                // 883\n                                                                                                                       //\n      var rule = ruleTree[key];                                                                                        // 885\n                                                                                                                       //\n      if (rule === Object(rule)) {                                                                                     // 887\n        // For sub-objects/subsets we branch                                                                           // 888\n        if (doc[key] === Object(doc[key])) {                                                                           // 889\n          result[key] = transform(doc[key], rule);                                                                     // 890\n        }                                                                                                              // 891\n      } else if (details.including) {                                                                                  // 892\n        // Otherwise we don't even touch this subfield                                                                 // 893\n        result[key] = EJSON.clone(doc[key]);                                                                           // 894\n      } else {                                                                                                         // 895\n        delete result[key];                                                                                            // 896\n      }                                                                                                                // 897\n    });                                                                                                                // 898\n    return result;                                                                                                     // 900\n  };                                                                                                                   // 901\n                                                                                                                       //\n  return function (doc) {                                                                                              // 903\n    var result = transform(doc, details.tree);                                                                         // 904\n                                                                                                                       //\n    if (_idProjection && hasOwn.call(doc, '_id')) {                                                                    // 906\n      result._id = doc._id;                                                                                            // 907\n    }                                                                                                                  // 908\n                                                                                                                       //\n    if (!_idProjection && hasOwn.call(result, '_id')) {                                                                // 910\n      delete result._id;                                                                                               // 911\n    }                                                                                                                  // 912\n                                                                                                                       //\n    return result;                                                                                                     // 914\n  };                                                                                                                   // 915\n}; // Calculates the document to insert in case we're doing an upsert and the                                          // 916\n// selector does not match any elements                                                                                // 919\n                                                                                                                       //\n                                                                                                                       //\nLocalCollection._createUpsertDocument = function (selector, modifier) {                                                // 920\n  var selectorDocument = populateDocumentWithQueryFields(selector);                                                    // 921\n                                                                                                                       //\n  var isModify = LocalCollection._isModificationMod(modifier);                                                         // 922\n                                                                                                                       //\n  var newDoc = {};                                                                                                     // 924\n                                                                                                                       //\n  if (selectorDocument._id) {                                                                                          // 926\n    newDoc._id = selectorDocument._id;                                                                                 // 927\n    delete selectorDocument._id;                                                                                       // 928\n  } // This double _modify call is made to help with nested properties (see issue                                      // 929\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.                                       // 932\n  // ambiguous id's)                                                                                                   // 933\n                                                                                                                       //\n                                                                                                                       //\n  LocalCollection._modify(newDoc, {                                                                                    // 934\n    $set: selectorDocument                                                                                             // 934\n  });                                                                                                                  // 934\n                                                                                                                       //\n  LocalCollection._modify(newDoc, modifier, {                                                                          // 935\n    isInsert: true                                                                                                     // 935\n  });                                                                                                                  // 935\n                                                                                                                       //\n  if (isModify) {                                                                                                      // 937\n    return newDoc;                                                                                                     // 938\n  } // Replacement can take _id from query document                                                                    // 939\n                                                                                                                       //\n                                                                                                                       //\n  var replacement = Object.assign({}, modifier);                                                                       // 942\n                                                                                                                       //\n  if (newDoc._id) {                                                                                                    // 943\n    replacement._id = newDoc._id;                                                                                      // 944\n  }                                                                                                                    // 945\n                                                                                                                       //\n  return replacement;                                                                                                  // 947\n};                                                                                                                     // 948\n                                                                                                                       //\nLocalCollection._diffObjects = function (left, right, callbacks) {                                                     // 950\n  return DiffSequence.diffObjects(left, right, callbacks);                                                             // 951\n}; // ordered: bool.                                                                                                   // 952\n// old_results and new_results: collections of documents.                                                              // 955\n//    if ordered, they are arrays.                                                                                     // 956\n//    if unordered, they are IdMaps                                                                                    // 957\n                                                                                                                       //\n                                                                                                                       //\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {                    // 958\n  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);                            // 958\n};                                                                                                                     // 958\n                                                                                                                       //\nLocalCollection._diffQueryOrderedChanges = function (oldResults, newResults, observer, options) {                      // 962\n  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);                              // 962\n};                                                                                                                     // 962\n                                                                                                                       //\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {                    // 966\n  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);                            // 966\n};                                                                                                                     // 966\n                                                                                                                       //\nLocalCollection._findInOrderedResults = function (query, doc) {                                                        // 970\n  if (!query.ordered) {                                                                                                // 971\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');                                           // 972\n  }                                                                                                                    // 973\n                                                                                                                       //\n  for (var i = 0; i < query.results.length; i++) {                                                                     // 975\n    if (query.results[i] === doc) {                                                                                    // 976\n      return i;                                                                                                        // 977\n    }                                                                                                                  // 978\n  }                                                                                                                    // 979\n                                                                                                                       //\n  throw Error('object missing from query');                                                                            // 981\n}; // If this is a selector which explicitly constrains the match by ID to a finite                                    // 982\n// number of documents, returns a list of their IDs.  Otherwise returns                                                // 985\n// null. Note that the selector may have other restrictions so it may not even                                         // 986\n// match those document!  We care about $in and $and since those are generated                                         // 987\n// access-controlled update and remove.                                                                                // 988\n                                                                                                                       //\n                                                                                                                       //\nLocalCollection._idsMatchedBySelector = function (selector) {                                                          // 989\n  // Is the selector just an ID?                                                                                       // 990\n  if (LocalCollection._selectorIsId(selector)) {                                                                       // 991\n    return [selector];                                                                                                 // 992\n  }                                                                                                                    // 993\n                                                                                                                       //\n  if (!selector) {                                                                                                     // 995\n    return null;                                                                                                       // 996\n  } // Do we have an _id clause?                                                                                       // 997\n                                                                                                                       //\n                                                                                                                       //\n  if (hasOwn.call(selector, '_id')) {                                                                                  // 1000\n    // Is the _id clause just an ID?                                                                                   // 1001\n    if (LocalCollection._selectorIsId(selector._id)) {                                                                 // 1002\n      return [selector._id];                                                                                           // 1003\n    } // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?                                                              // 1004\n                                                                                                                       //\n                                                                                                                       //\n    if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;                                                                                         // 1011\n    }                                                                                                                  // 1012\n                                                                                                                       //\n    return null;                                                                                                       // 1014\n  } // If this is a top-level $and, and any of the clauses constrain their                                             // 1015\n  // documents, then the whole selector is constrained by any one clause's                                             // 1018\n  // constraint. (Well, by their intersection, but that seems unlikely.)                                               // 1019\n                                                                                                                       //\n                                                                                                                       //\n  if (Array.isArray(selector.$and)) {                                                                                  // 1020\n    for (var i = 0; i < selector.$and.length; ++i) {                                                                   // 1021\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);                                            // 1022\n                                                                                                                       //\n      if (subIds) {                                                                                                    // 1024\n        return subIds;                                                                                                 // 1025\n      }                                                                                                                // 1026\n    }                                                                                                                  // 1027\n  }                                                                                                                    // 1028\n                                                                                                                       //\n  return null;                                                                                                         // 1030\n};                                                                                                                     // 1031\n                                                                                                                       //\nLocalCollection._insertInResults = function (query, doc) {                                                             // 1033\n  var fields = EJSON.clone(doc);                                                                                       // 1034\n  delete fields._id;                                                                                                   // 1036\n                                                                                                                       //\n  if (query.ordered) {                                                                                                 // 1038\n    if (!query.sorter) {                                                                                               // 1039\n      query.addedBefore(doc._id, query.projectionFn(fields), null);                                                    // 1040\n      query.results.push(doc);                                                                                         // 1041\n    } else {                                                                                                           // 1042\n      var i = LocalCollection._insertInSortedList(query.sorter.getComparator({                                         // 1043\n        distances: query.distances                                                                                     // 1044\n      }), query.results, doc);                                                                                         // 1044\n                                                                                                                       //\n      var next = query.results[i + 1];                                                                                 // 1049\n                                                                                                                       //\n      if (next) {                                                                                                      // 1050\n        next = next._id;                                                                                               // 1051\n      } else {                                                                                                         // 1052\n        next = null;                                                                                                   // 1053\n      }                                                                                                                // 1054\n                                                                                                                       //\n      query.addedBefore(doc._id, query.projectionFn(fields), next);                                                    // 1056\n    }                                                                                                                  // 1057\n                                                                                                                       //\n    query.added(doc._id, query.projectionFn(fields));                                                                  // 1059\n  } else {                                                                                                             // 1060\n    query.added(doc._id, query.projectionFn(fields));                                                                  // 1061\n    query.results.set(doc._id, doc);                                                                                   // 1062\n  }                                                                                                                    // 1063\n};                                                                                                                     // 1064\n                                                                                                                       //\nLocalCollection._insertInSortedList = function (cmp, array, value) {                                                   // 1066\n  if (array.length === 0) {                                                                                            // 1067\n    array.push(value);                                                                                                 // 1068\n    return 0;                                                                                                          // 1069\n  }                                                                                                                    // 1070\n                                                                                                                       //\n  var i = LocalCollection._binarySearch(cmp, array, value);                                                            // 1072\n                                                                                                                       //\n  array.splice(i, 0, value);                                                                                           // 1074\n  return i;                                                                                                            // 1076\n};                                                                                                                     // 1077\n                                                                                                                       //\nLocalCollection._isModificationMod = function (mod) {                                                                  // 1079\n  var isModify = false;                                                                                                // 1080\n  var isReplace = false;                                                                                               // 1081\n  Object.keys(mod).forEach(function (key) {                                                                            // 1083\n    if (key.substr(0, 1) === '$') {                                                                                    // 1084\n      isModify = true;                                                                                                 // 1085\n    } else {                                                                                                           // 1086\n      isReplace = true;                                                                                                // 1087\n    }                                                                                                                  // 1088\n  });                                                                                                                  // 1089\n                                                                                                                       //\n  if (isModify && isReplace) {                                                                                         // 1091\n    throw new Error('Update parameter cannot have both modifier and non-modifier fields.');                            // 1092\n  }                                                                                                                    // 1095\n                                                                                                                       //\n  return isModify;                                                                                                     // 1097\n}; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about                                         // 1098\n// RegExp                                                                                                              // 1101\n// XXX note that _type(undefined) === 3!!!!                                                                            // 1102\n                                                                                                                       //\n                                                                                                                       //\nLocalCollection._isPlainObject = function (x) {                                                                        // 1103\n  return x && LocalCollection._f._type(x) === 3;                                                                       // 1104\n}; // XXX need a strategy for passing the binding of $ into this                                                       // 1105\n// function, from the compiled selector                                                                                // 1108\n//                                                                                                                     // 1109\n// maybe just {key.up.to.just.before.dollarsign: array_index}                                                          // 1110\n//                                                                                                                     // 1111\n// XXX atomicity: if one modification fails, do we roll back the whole                                                 // 1112\n// change?                                                                                                             // 1113\n//                                                                                                                     // 1114\n// options:                                                                                                            // 1115\n//   - isInsert is set when _modify is being called to compute the document to                                         // 1116\n//     insert as part of an upsert operation. We use this primarily to figure                                          // 1117\n//     out when to set the fields in $setOnInsert, if present.                                                         // 1118\n                                                                                                                       //\n                                                                                                                       //\nLocalCollection._modify = function (doc, modifier) {                                                                   // 1119\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                                // 1119\n                                                                                                                       //\n  if (!LocalCollection._isPlainObject(modifier)) {                                                                     // 1120\n    throw MinimongoError('Modifier must be an object');                                                                // 1121\n  } // Make sure the caller can't mutate our data structures.                                                          // 1122\n                                                                                                                       //\n                                                                                                                       //\n  modifier = EJSON.clone(modifier);                                                                                    // 1125\n  var isModifier = isOperatorObject(modifier);                                                                         // 1127\n  var newDoc = isModifier ? EJSON.clone(doc) : modifier;                                                               // 1128\n                                                                                                                       //\n  if (isModifier) {                                                                                                    // 1130\n    // apply modifiers to the doc.                                                                                     // 1131\n    Object.keys(modifier).forEach(function (operator) {                                                                // 1132\n      // Treat $setOnInsert as $set if this is an insert.                                                              // 1133\n      var setOnInsert = options.isInsert && operator === '$setOnInsert';                                               // 1134\n      var modFunc = MODIFIERS[setOnInsert ? '$set' : operator];                                                        // 1135\n      var operand = modifier[operator];                                                                                // 1136\n                                                                                                                       //\n      if (!modFunc) {                                                                                                  // 1138\n        throw MinimongoError(\"Invalid modifier specified \" + operator);                                                // 1139\n      }                                                                                                                // 1140\n                                                                                                                       //\n      Object.keys(operand).forEach(function (keypath) {                                                                // 1142\n        var arg = operand[keypath];                                                                                    // 1143\n                                                                                                                       //\n        if (keypath === '') {                                                                                          // 1145\n          throw MinimongoError('An empty update path is not valid.');                                                  // 1146\n        }                                                                                                              // 1147\n                                                                                                                       //\n        var keyparts = keypath.split('.');                                                                             // 1149\n                                                                                                                       //\n        if (!keyparts.every(Boolean)) {                                                                                // 1151\n          throw MinimongoError(\"The update path '\" + keypath + \"' contains an empty field name, \" + 'which is not allowed.');\n        }                                                                                                              // 1156\n                                                                                                                       //\n        var target = findModTarget(newDoc, keyparts, {                                                                 // 1158\n          arrayIndices: options.arrayIndices,                                                                          // 1159\n          forbidArray: operator === '$rename',                                                                         // 1160\n          noCreate: NO_CREATE_MODIFIERS[operator]                                                                      // 1161\n        });                                                                                                            // 1158\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);                                                         // 1164\n      });                                                                                                              // 1165\n    });                                                                                                                // 1166\n                                                                                                                       //\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {                                                               // 1168\n      throw MinimongoError(\"After applying the update to the document {_id: \\\"\" + doc._id + \"\\\", ...},\" + ' the (immutable) field \\'_id\\' was found to have been altered to ' + (\"_id: \\\"\" + newDoc._id + \"\\\"\"));\n    }                                                                                                                  // 1174\n  } else {                                                                                                             // 1175\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {                                             // 1176\n      throw MinimongoError(\"The _id field cannot be changed from {_id: \\\"\" + doc._id + \"\\\"} to \" + (\"{_id: \\\"\" + modifier._id + \"\\\"}\"));\n    } // replace the whole document                                                                                    // 1181\n                                                                                                                       //\n                                                                                                                       //\n    assertHasValidFieldNames(modifier);                                                                                // 1184\n  } // move new document into place.                                                                                   // 1185\n                                                                                                                       //\n                                                                                                                       //\n  Object.keys(doc).forEach(function (key) {                                                                            // 1188\n    // Note: this used to be for (var key in doc) however, this does not                                               // 1189\n    // work right in Opera. Deleting from a doc while iterating over it                                                // 1190\n    // would sometimes cause opera to skip some keys.                                                                  // 1191\n    if (key !== '_id') {                                                                                               // 1192\n      delete doc[key];                                                                                                 // 1193\n    }                                                                                                                  // 1194\n  });                                                                                                                  // 1195\n  Object.keys(newDoc).forEach(function (key) {                                                                         // 1197\n    doc[key] = newDoc[key];                                                                                            // 1198\n  });                                                                                                                  // 1199\n};                                                                                                                     // 1200\n                                                                                                                       //\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {                                     // 1202\n  var transform = cursor.getTransform() || function (doc) {                                                            // 1203\n    return doc;                                                                                                        // 1203\n  };                                                                                                                   // 1203\n                                                                                                                       //\n  var suppressed = !!observeCallbacks._suppress_initial;                                                               // 1204\n  var observeChangesCallbacks = void 0;                                                                                // 1206\n                                                                                                                       //\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {                                                 // 1207\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the                                           // 1208\n    // linear scans required to generate them.  This lets observers that don't                                         // 1209\n    // need absolute indices benefit from the other features of this API --                                            // 1210\n    // relative order, transforms, and applyChanges -- without the speed hit.                                          // 1211\n    var indices = !observeCallbacks._no_indices;                                                                       // 1212\n    observeChangesCallbacks = {                                                                                        // 1214\n      addedBefore: function (id, fields, before) {                                                                     // 1215\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {                                     // 1216\n          return;                                                                                                      // 1217\n        }                                                                                                              // 1218\n                                                                                                                       //\n        var doc = transform(Object.assign(fields, {                                                                    // 1220\n          _id: id                                                                                                      // 1220\n        }));                                                                                                           // 1220\n                                                                                                                       //\n        if (observeCallbacks.addedAt) {                                                                                // 1222\n          observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);\n        } else {                                                                                                       // 1232\n          observeCallbacks.added(doc);                                                                                 // 1233\n        }                                                                                                              // 1234\n      },                                                                                                               // 1235\n      changed: function (id, fields) {                                                                                 // 1236\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {                                               // 1237\n          return;                                                                                                      // 1238\n        }                                                                                                              // 1239\n                                                                                                                       //\n        var doc = EJSON.clone(this.docs.get(id));                                                                      // 1241\n                                                                                                                       //\n        if (!doc) {                                                                                                    // 1242\n          throw new Error(\"Unknown id for changed: \" + id);                                                            // 1243\n        }                                                                                                              // 1244\n                                                                                                                       //\n        var oldDoc = transform(EJSON.clone(doc));                                                                      // 1246\n        DiffSequence.applyChanges(doc, fields);                                                                        // 1248\n                                                                                                                       //\n        if (observeCallbacks.changedAt) {                                                                              // 1250\n          observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);                    // 1251\n        } else {                                                                                                       // 1256\n          observeCallbacks.changed(transform(doc), oldDoc);                                                            // 1257\n        }                                                                                                              // 1258\n      },                                                                                                               // 1259\n      movedBefore: function (id, before) {                                                                             // 1260\n        if (!observeCallbacks.movedTo) {                                                                               // 1261\n          return;                                                                                                      // 1262\n        }                                                                                                              // 1263\n                                                                                                                       //\n        var from = indices ? this.docs.indexOf(id) : -1;                                                               // 1265\n        var to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1; // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.                                                                   // 1273\n                                                                                                                       //\n        if (to > from) {                                                                                               // 1274\n          --to;                                                                                                        // 1275\n        }                                                                                                              // 1276\n                                                                                                                       //\n        observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);                 // 1278\n      },                                                                                                               // 1284\n      removed: function (id) {                                                                                         // 1285\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {                                               // 1286\n          return;                                                                                                      // 1287\n        } // technically maybe there should be an EJSON.clone here, but it's about                                     // 1288\n        // to be removed from this.docs!                                                                               // 1291\n                                                                                                                       //\n                                                                                                                       //\n        var doc = transform(this.docs.get(id));                                                                        // 1292\n                                                                                                                       //\n        if (observeCallbacks.removedAt) {                                                                              // 1294\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);                                       // 1295\n        } else {                                                                                                       // 1296\n          observeCallbacks.removed(doc);                                                                               // 1297\n        }                                                                                                              // 1298\n      }                                                                                                                // 1299\n    };                                                                                                                 // 1214\n  } else {                                                                                                             // 1301\n    observeChangesCallbacks = {                                                                                        // 1302\n      added: function (id, fields) {                                                                                   // 1303\n        if (!suppressed && observeCallbacks.added) {                                                                   // 1304\n          observeCallbacks.added(transform(Object.assign(fields, {                                                     // 1305\n            _id: id                                                                                                    // 1305\n          })));                                                                                                        // 1305\n        }                                                                                                              // 1306\n      },                                                                                                               // 1307\n      changed: function (id, fields) {                                                                                 // 1308\n        if (observeCallbacks.changed) {                                                                                // 1309\n          var oldDoc = this.docs.get(id);                                                                              // 1310\n          var doc = EJSON.clone(oldDoc);                                                                               // 1311\n          DiffSequence.applyChanges(doc, fields);                                                                      // 1313\n          observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));                                    // 1315\n        }                                                                                                              // 1319\n      },                                                                                                               // 1320\n      removed: function (id) {                                                                                         // 1321\n        if (observeCallbacks.removed) {                                                                                // 1322\n          observeCallbacks.removed(transform(this.docs.get(id)));                                                      // 1323\n        }                                                                                                              // 1324\n      }                                                                                                                // 1325\n    };                                                                                                                 // 1302\n  }                                                                                                                    // 1327\n                                                                                                                       //\n  var changeObserver = new LocalCollection._CachingChangeObserver({                                                    // 1329\n    callbacks: observeChangesCallbacks                                                                                 // 1330\n  });                                                                                                                  // 1329\n  var handle = cursor.observeChanges(changeObserver.applyChange);                                                      // 1333\n  suppressed = false;                                                                                                  // 1335\n  return handle;                                                                                                       // 1337\n};                                                                                                                     // 1338\n                                                                                                                       //\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {                                                   // 1340\n  if (callbacks.added && callbacks.addedAt) {                                                                          // 1341\n    throw new Error('Please specify only one of added() and addedAt()');                                               // 1342\n  }                                                                                                                    // 1343\n                                                                                                                       //\n  if (callbacks.changed && callbacks.changedAt) {                                                                      // 1345\n    throw new Error('Please specify only one of changed() and changedAt()');                                           // 1346\n  }                                                                                                                    // 1347\n                                                                                                                       //\n  if (callbacks.removed && callbacks.removedAt) {                                                                      // 1349\n    throw new Error('Please specify only one of removed() and removedAt()');                                           // 1350\n  }                                                                                                                    // 1351\n                                                                                                                       //\n  return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);                     // 1353\n};                                                                                                                     // 1359\n                                                                                                                       //\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {                                            // 1361\n  if (callbacks.added && callbacks.addedBefore) {                                                                      // 1362\n    throw new Error('Please specify only one of added() and addedBefore()');                                           // 1363\n  }                                                                                                                    // 1364\n                                                                                                                       //\n  return !!(callbacks.addedBefore || callbacks.movedBefore);                                                           // 1366\n};                                                                                                                     // 1367\n                                                                                                                       //\nLocalCollection._removeFromResults = function (query, doc) {                                                           // 1369\n  if (query.ordered) {                                                                                                 // 1370\n    var i = LocalCollection._findInOrderedResults(query, doc);                                                         // 1371\n                                                                                                                       //\n    query.removed(doc._id);                                                                                            // 1373\n    query.results.splice(i, 1);                                                                                        // 1374\n  } else {                                                                                                             // 1375\n    var id = doc._id; // in case callback mutates doc                                                                  // 1376\n                                                                                                                       //\n    query.removed(doc._id);                                                                                            // 1378\n    query.results.remove(id);                                                                                          // 1379\n  }                                                                                                                    // 1380\n}; // Is this selector just shorthand for lookup by _id?                                                               // 1381\n                                                                                                                       //\n                                                                                                                       //\nLocalCollection._selectorIsId = function (selector) {                                                                  // 1384\n  return typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID;         // 1384\n}; // Is the selector just lookup by _id (shorthand or not)?                                                           // 1384\n                                                                                                                       //\n                                                                                                                       //\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {                                                   // 1391\n  return LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;\n};                                                                                                                     // 1391\n                                                                                                                       //\nLocalCollection._updateInResults = function (query, doc, old_doc) {                                                    // 1397\n  if (!EJSON.equals(doc._id, old_doc._id)) {                                                                           // 1398\n    throw new Error('Can\\'t change a doc\\'s _id while updating');                                                      // 1399\n  }                                                                                                                    // 1400\n                                                                                                                       //\n  var projectionFn = query.projectionFn;                                                                               // 1402\n  var changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));                        // 1403\n                                                                                                                       //\n  if (!query.ordered) {                                                                                                // 1408\n    if (Object.keys(changedFields).length) {                                                                           // 1409\n      query.changed(doc._id, changedFields);                                                                           // 1410\n      query.results.set(doc._id, doc);                                                                                 // 1411\n    }                                                                                                                  // 1412\n                                                                                                                       //\n    return;                                                                                                            // 1414\n  }                                                                                                                    // 1415\n                                                                                                                       //\n  var old_idx = LocalCollection._findInOrderedResults(query, doc);                                                     // 1417\n                                                                                                                       //\n  if (Object.keys(changedFields).length) {                                                                             // 1419\n    query.changed(doc._id, changedFields);                                                                             // 1420\n  }                                                                                                                    // 1421\n                                                                                                                       //\n  if (!query.sorter) {                                                                                                 // 1423\n    return;                                                                                                            // 1424\n  } // just take it out and put it back in again, and see if the index changes                                         // 1425\n                                                                                                                       //\n                                                                                                                       //\n  query.results.splice(old_idx, 1);                                                                                    // 1428\n                                                                                                                       //\n  var new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({                                       // 1430\n    distances: query.distances                                                                                         // 1431\n  }), query.results, doc);                                                                                             // 1431\n                                                                                                                       //\n  if (old_idx !== new_idx) {                                                                                           // 1436\n    var next = query.results[new_idx + 1];                                                                             // 1437\n                                                                                                                       //\n    if (next) {                                                                                                        // 1438\n      next = next._id;                                                                                                 // 1439\n    } else {                                                                                                           // 1440\n      next = null;                                                                                                     // 1441\n    }                                                                                                                  // 1442\n                                                                                                                       //\n    query.movedBefore && query.movedBefore(doc._id, next);                                                             // 1444\n  }                                                                                                                    // 1445\n};                                                                                                                     // 1446\n                                                                                                                       //\nvar MODIFIERS = {                                                                                                      // 1448\n  $currentDate: function (target, field, arg) {                                                                        // 1449\n    if ((typeof arg === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(arg)) === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {                                                                                      // 1451\n        throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {   // 1452\n          field: field                                                                                                 // 1455\n        });                                                                                                            // 1455\n      }                                                                                                                // 1457\n    } else if (arg !== true) {                                                                                         // 1458\n      throw MinimongoError('Invalid $currentDate modifier', {                                                          // 1459\n        field: field                                                                                                   // 1459\n      });                                                                                                              // 1459\n    }                                                                                                                  // 1460\n                                                                                                                       //\n    target[field] = new Date();                                                                                        // 1462\n  },                                                                                                                   // 1463\n  $min: function (target, field, arg) {                                                                                // 1464\n    if (typeof arg !== 'number') {                                                                                     // 1465\n      throw MinimongoError('Modifier $min allowed for numbers only', {                                                 // 1466\n        field: field                                                                                                   // 1466\n      });                                                                                                              // 1466\n    }                                                                                                                  // 1467\n                                                                                                                       //\n    if (field in target) {                                                                                             // 1469\n      if (typeof target[field] !== 'number') {                                                                         // 1470\n        throw MinimongoError('Cannot apply $min modifier to non-number', {                                             // 1471\n          field: field                                                                                                 // 1473\n        });                                                                                                            // 1473\n      }                                                                                                                // 1475\n                                                                                                                       //\n      if (target[field] > arg) {                                                                                       // 1477\n        target[field] = arg;                                                                                           // 1478\n      }                                                                                                                // 1479\n    } else {                                                                                                           // 1480\n      target[field] = arg;                                                                                             // 1481\n    }                                                                                                                  // 1482\n  },                                                                                                                   // 1483\n  $max: function (target, field, arg) {                                                                                // 1484\n    if (typeof arg !== 'number') {                                                                                     // 1485\n      throw MinimongoError('Modifier $max allowed for numbers only', {                                                 // 1486\n        field: field                                                                                                   // 1486\n      });                                                                                                              // 1486\n    }                                                                                                                  // 1487\n                                                                                                                       //\n    if (field in target) {                                                                                             // 1489\n      if (typeof target[field] !== 'number') {                                                                         // 1490\n        throw MinimongoError('Cannot apply $max modifier to non-number', {                                             // 1491\n          field: field                                                                                                 // 1493\n        });                                                                                                            // 1493\n      }                                                                                                                // 1495\n                                                                                                                       //\n      if (target[field] < arg) {                                                                                       // 1497\n        target[field] = arg;                                                                                           // 1498\n      }                                                                                                                // 1499\n    } else {                                                                                                           // 1500\n      target[field] = arg;                                                                                             // 1501\n    }                                                                                                                  // 1502\n  },                                                                                                                   // 1503\n  $inc: function (target, field, arg) {                                                                                // 1504\n    if (typeof arg !== 'number') {                                                                                     // 1505\n      throw MinimongoError('Modifier $inc allowed for numbers only', {                                                 // 1506\n        field: field                                                                                                   // 1506\n      });                                                                                                              // 1506\n    }                                                                                                                  // 1507\n                                                                                                                       //\n    if (field in target) {                                                                                             // 1509\n      if (typeof target[field] !== 'number') {                                                                         // 1510\n        throw MinimongoError('Cannot apply $inc modifier to non-number', {                                             // 1511\n          field: field                                                                                                 // 1513\n        });                                                                                                            // 1513\n      }                                                                                                                // 1515\n                                                                                                                       //\n      target[field] += arg;                                                                                            // 1517\n    } else {                                                                                                           // 1518\n      target[field] = arg;                                                                                             // 1519\n    }                                                                                                                  // 1520\n  },                                                                                                                   // 1521\n  $set: function (target, field, arg) {                                                                                // 1522\n    if (target !== Object(target)) {                                                                                   // 1523\n      // not an array or an object                                                                                     // 1523\n      var error = MinimongoError('Cannot set property on non-object field', {                                          // 1524\n        field: field                                                                                                   // 1526\n      });                                                                                                              // 1526\n      error.setPropertyError = true;                                                                                   // 1528\n      throw error;                                                                                                     // 1529\n    }                                                                                                                  // 1530\n                                                                                                                       //\n    if (target === null) {                                                                                             // 1532\n      var _error = MinimongoError('Cannot set property on null', {                                                     // 1533\n        field: field                                                                                                   // 1533\n      });                                                                                                              // 1533\n                                                                                                                       //\n      _error.setPropertyError = true;                                                                                  // 1534\n      throw _error;                                                                                                    // 1535\n    }                                                                                                                  // 1536\n                                                                                                                       //\n    assertHasValidFieldNames(arg);                                                                                     // 1538\n    target[field] = arg;                                                                                               // 1540\n  },                                                                                                                   // 1541\n  $setOnInsert: function (target, field, arg) {// converted to `$set` in `_modify`                                     // 1542\n  },                                                                                                                   // 1544\n  $unset: function (target, field, arg) {                                                                              // 1545\n    if (target !== undefined) {                                                                                        // 1546\n      if (target instanceof Array) {                                                                                   // 1547\n        if (field in target) {                                                                                         // 1548\n          target[field] = null;                                                                                        // 1549\n        }                                                                                                              // 1550\n      } else {                                                                                                         // 1551\n        delete target[field];                                                                                          // 1552\n      }                                                                                                                // 1553\n    }                                                                                                                  // 1554\n  },                                                                                                                   // 1555\n  $push: function (target, field, arg) {                                                                               // 1556\n    if (target[field] === undefined) {                                                                                 // 1557\n      target[field] = [];                                                                                              // 1558\n    }                                                                                                                  // 1559\n                                                                                                                       //\n    if (!(target[field] instanceof Array)) {                                                                           // 1561\n      throw MinimongoError('Cannot apply $push modifier to non-array', {                                               // 1562\n        field: field                                                                                                   // 1562\n      });                                                                                                              // 1562\n    }                                                                                                                  // 1563\n                                                                                                                       //\n    if (!(arg && arg.$each)) {                                                                                         // 1565\n      // Simple mode: not $each                                                                                        // 1566\n      assertHasValidFieldNames(arg);                                                                                   // 1567\n      target[field].push(arg);                                                                                         // 1569\n      return;                                                                                                          // 1571\n    } // Fancy mode: $each (and maybe $slice and $sort and $position)                                                  // 1572\n                                                                                                                       //\n                                                                                                                       //\n    var toPush = arg.$each;                                                                                            // 1575\n                                                                                                                       //\n    if (!(toPush instanceof Array)) {                                                                                  // 1576\n      throw MinimongoError('$each must be an array', {                                                                 // 1577\n        field: field                                                                                                   // 1577\n      });                                                                                                              // 1577\n    }                                                                                                                  // 1578\n                                                                                                                       //\n    assertHasValidFieldNames(toPush); // Parse $position                                                               // 1580\n                                                                                                                       //\n    var position = undefined;                                                                                          // 1583\n                                                                                                                       //\n    if ('$position' in arg) {                                                                                          // 1584\n      if (typeof arg.$position !== 'number') {                                                                         // 1585\n        throw MinimongoError('$position must be a numeric value', {                                                    // 1586\n          field: field                                                                                                 // 1586\n        });                                                                                                            // 1586\n      } // XXX should check to make sure integer                                                                       // 1587\n                                                                                                                       //\n                                                                                                                       //\n      if (arg.$position < 0) {                                                                                         // 1590\n        throw MinimongoError('$position in $push must be zero or positive', {                                          // 1591\n          field: field                                                                                                 // 1593\n        });                                                                                                            // 1593\n      }                                                                                                                // 1595\n                                                                                                                       //\n      position = arg.$position;                                                                                        // 1597\n    } // Parse $slice.                                                                                                 // 1598\n                                                                                                                       //\n                                                                                                                       //\n    var slice = undefined;                                                                                             // 1601\n                                                                                                                       //\n    if ('$slice' in arg) {                                                                                             // 1602\n      if (typeof arg.$slice !== 'number') {                                                                            // 1603\n        throw MinimongoError('$slice must be a numeric value', {                                                       // 1604\n          field: field                                                                                                 // 1604\n        });                                                                                                            // 1604\n      } // XXX should check to make sure integer                                                                       // 1605\n                                                                                                                       //\n                                                                                                                       //\n      slice = arg.$slice;                                                                                              // 1608\n    } // Parse $sort.                                                                                                  // 1609\n                                                                                                                       //\n                                                                                                                       //\n    var sortFunction = undefined;                                                                                      // 1612\n                                                                                                                       //\n    if (arg.$sort) {                                                                                                   // 1613\n      if (slice === undefined) {                                                                                       // 1614\n        throw MinimongoError('$sort requires $slice to be present', {                                                  // 1615\n          field: field                                                                                                 // 1615\n        });                                                                                                            // 1615\n      } // XXX this allows us to use a $sort whose value is an array, but that's                                       // 1616\n      // actually an extension of the Node driver, so it won't work                                                    // 1619\n      // server-side. Could be confusing!                                                                              // 1620\n      // XXX is it correct that we don't do geo-stuff here?                                                            // 1621\n                                                                                                                       //\n                                                                                                                       //\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();                                                  // 1622\n      toPush.forEach(function (element) {                                                                              // 1624\n        if (LocalCollection._f._type(element) !== 3) {                                                                 // 1625\n          throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {           // 1626\n            field: field                                                                                               // 1629\n          });                                                                                                          // 1629\n        }                                                                                                              // 1631\n      });                                                                                                              // 1632\n    } // Actually push.                                                                                                // 1633\n                                                                                                                       //\n                                                                                                                       //\n    if (position === undefined) {                                                                                      // 1636\n      toPush.forEach(function (element) {                                                                              // 1637\n        target[field].push(element);                                                                                   // 1638\n      });                                                                                                              // 1639\n    } else {                                                                                                           // 1640\n      var _target$field;                                                                                               // 1640\n                                                                                                                       //\n      var spliceArguments = [position, 0];                                                                             // 1641\n      toPush.forEach(function (element) {                                                                              // 1643\n        spliceArguments.push(element);                                                                                 // 1644\n      });                                                                                                              // 1645\n                                                                                                                       //\n      (_target$field = target[field]).splice.apply(_target$field, spliceArguments);                                    // 1647\n    } // Actually sort.                                                                                                // 1648\n                                                                                                                       //\n                                                                                                                       //\n    if (sortFunction) {                                                                                                // 1651\n      target[field].sort(sortFunction);                                                                                // 1652\n    } // Actually slice.                                                                                               // 1653\n                                                                                                                       //\n                                                                                                                       //\n    if (slice !== undefined) {                                                                                         // 1656\n      if (slice === 0) {                                                                                               // 1657\n        target[field] = []; // differs from Array.slice!                                                               // 1658\n      } else if (slice < 0) {                                                                                          // 1659\n        target[field] = target[field].slice(slice);                                                                    // 1660\n      } else {                                                                                                         // 1661\n        target[field] = target[field].slice(0, slice);                                                                 // 1662\n      }                                                                                                                // 1663\n    }                                                                                                                  // 1664\n  },                                                                                                                   // 1665\n  $pushAll: function (target, field, arg) {                                                                            // 1666\n    if (!((typeof arg === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(arg)) === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');                                       // 1668\n    }                                                                                                                  // 1669\n                                                                                                                       //\n    assertHasValidFieldNames(arg);                                                                                     // 1671\n    var toPush = target[field];                                                                                        // 1673\n                                                                                                                       //\n    if (toPush === undefined) {                                                                                        // 1675\n      target[field] = arg;                                                                                             // 1676\n    } else if (!(toPush instanceof Array)) {                                                                           // 1677\n      throw MinimongoError('Cannot apply $pushAll modifier to non-array', {                                            // 1678\n        field: field                                                                                                   // 1680\n      });                                                                                                              // 1680\n    } else {                                                                                                           // 1682\n      toPush.push.apply(toPush, (0, _toConsumableArray3.default)(arg));                                                // 1683\n    }                                                                                                                  // 1684\n  },                                                                                                                   // 1685\n  $addToSet: function (target, field, arg) {                                                                           // 1686\n    var isEach = false;                                                                                                // 1687\n                                                                                                                       //\n    if ((typeof arg === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(arg)) === 'object') {                        // 1689\n      // check if first key is '$each'                                                                                 // 1690\n      var keys = Object.keys(arg);                                                                                     // 1691\n                                                                                                                       //\n      if (keys[0] === '$each') {                                                                                       // 1692\n        isEach = true;                                                                                                 // 1693\n      }                                                                                                                // 1694\n    }                                                                                                                  // 1695\n                                                                                                                       //\n    var values = isEach ? arg.$each : [arg];                                                                           // 1697\n    assertHasValidFieldNames(values);                                                                                  // 1699\n    var toAdd = target[field];                                                                                         // 1701\n                                                                                                                       //\n    if (toAdd === undefined) {                                                                                         // 1702\n      target[field] = values;                                                                                          // 1703\n    } else if (!(toAdd instanceof Array)) {                                                                            // 1704\n      throw MinimongoError('Cannot apply $addToSet modifier to non-array', {                                           // 1705\n        field: field                                                                                                   // 1707\n      });                                                                                                              // 1707\n    } else {                                                                                                           // 1709\n      values.forEach(function (value) {                                                                                // 1710\n        if (toAdd.some(function (element) {                                                                            // 1711\n          return LocalCollection._f._equal(value, element);                                                            // 1711\n        })) {                                                                                                          // 1711\n          return;                                                                                                      // 1712\n        }                                                                                                              // 1713\n                                                                                                                       //\n        toAdd.push(value);                                                                                             // 1715\n      });                                                                                                              // 1716\n    }                                                                                                                  // 1717\n  },                                                                                                                   // 1718\n  $pop: function (target, field, arg) {                                                                                // 1719\n    if (target === undefined) {                                                                                        // 1720\n      return;                                                                                                          // 1721\n    }                                                                                                                  // 1722\n                                                                                                                       //\n    var toPop = target[field];                                                                                         // 1724\n                                                                                                                       //\n    if (toPop === undefined) {                                                                                         // 1726\n      return;                                                                                                          // 1727\n    }                                                                                                                  // 1728\n                                                                                                                       //\n    if (!(toPop instanceof Array)) {                                                                                   // 1730\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {                                                // 1731\n        field: field                                                                                                   // 1731\n      });                                                                                                              // 1731\n    }                                                                                                                  // 1732\n                                                                                                                       //\n    if (typeof arg === 'number' && arg < 0) {                                                                          // 1734\n      toPop.splice(0, 1);                                                                                              // 1735\n    } else {                                                                                                           // 1736\n      toPop.pop();                                                                                                     // 1737\n    }                                                                                                                  // 1738\n  },                                                                                                                   // 1739\n  $pull: function (target, field, arg) {                                                                               // 1740\n    if (target === undefined) {                                                                                        // 1741\n      return;                                                                                                          // 1742\n    }                                                                                                                  // 1743\n                                                                                                                       //\n    var toPull = target[field];                                                                                        // 1745\n                                                                                                                       //\n    if (toPull === undefined) {                                                                                        // 1746\n      return;                                                                                                          // 1747\n    }                                                                                                                  // 1748\n                                                                                                                       //\n    if (!(toPull instanceof Array)) {                                                                                  // 1750\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {                                       // 1751\n        field: field                                                                                                   // 1753\n      });                                                                                                              // 1753\n    }                                                                                                                  // 1755\n                                                                                                                       //\n    var out = void 0;                                                                                                  // 1757\n                                                                                                                       //\n    if (arg != null && (typeof arg === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(arg)) === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than                                                     // 1759\n      // for each document we modify.. but usually we're not                                                           // 1760\n      // modifying that many documents, so we'll let it slide for                                                      // 1761\n      // now                                                                                                           // 1762\n      // XXX Minimongo.Matcher isn't up for the job, because we need                                                   // 1764\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something                                                       // 1765\n      // like {$gt: 4} is not normally a complete selector.                                                            // 1766\n      // same issue as $elemMatch possibly?                                                                            // 1767\n      var matcher = new Minimongo.Matcher(arg);                                                                        // 1768\n      out = toPull.filter(function (element) {                                                                         // 1770\n        return !matcher.documentMatches(element).result;                                                               // 1770\n      });                                                                                                              // 1770\n    } else {                                                                                                           // 1771\n      out = toPull.filter(function (element) {                                                                         // 1772\n        return !LocalCollection._f._equal(element, arg);                                                               // 1772\n      });                                                                                                              // 1772\n    }                                                                                                                  // 1773\n                                                                                                                       //\n    target[field] = out;                                                                                               // 1775\n  },                                                                                                                   // 1776\n  $pullAll: function (target, field, arg) {                                                                            // 1777\n    if (!((typeof arg === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(arg)) === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {                                      // 1779\n        field: field                                                                                                   // 1781\n      });                                                                                                              // 1781\n    }                                                                                                                  // 1783\n                                                                                                                       //\n    if (target === undefined) {                                                                                        // 1785\n      return;                                                                                                          // 1786\n    }                                                                                                                  // 1787\n                                                                                                                       //\n    var toPull = target[field];                                                                                        // 1789\n                                                                                                                       //\n    if (toPull === undefined) {                                                                                        // 1791\n      return;                                                                                                          // 1792\n    }                                                                                                                  // 1793\n                                                                                                                       //\n    if (!(toPull instanceof Array)) {                                                                                  // 1795\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {                                       // 1796\n        field: field                                                                                                   // 1798\n      });                                                                                                              // 1798\n    }                                                                                                                  // 1800\n                                                                                                                       //\n    target[field] = toPull.filter(function (object) {                                                                  // 1802\n      return !arg.some(function (element) {                                                                            // 1802\n        return LocalCollection._f._equal(object, element);                                                             // 1803\n      });                                                                                                              // 1803\n    });                                                                                                                // 1802\n  },                                                                                                                   // 1805\n  $rename: function (target, field, arg, keypath, doc) {                                                               // 1806\n    // no idea why mongo has this restriction..                                                                        // 1807\n    if (keypath === arg) {                                                                                             // 1808\n      throw MinimongoError('$rename source must differ from target', {                                                 // 1809\n        field: field                                                                                                   // 1809\n      });                                                                                                              // 1809\n    }                                                                                                                  // 1810\n                                                                                                                       //\n    if (target === null) {                                                                                             // 1812\n      throw MinimongoError('$rename source field invalid', {                                                           // 1813\n        field: field                                                                                                   // 1813\n      });                                                                                                              // 1813\n    }                                                                                                                  // 1814\n                                                                                                                       //\n    if (typeof arg !== 'string') {                                                                                     // 1816\n      throw MinimongoError('$rename target must be a string', {                                                        // 1817\n        field: field                                                                                                   // 1817\n      });                                                                                                              // 1817\n    }                                                                                                                  // 1818\n                                                                                                                       //\n    if (arg.includes('\\0')) {                                                                                          // 1820\n      // Null bytes are not allowed in Mongo field names                                                               // 1821\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names                                 // 1822\n      throw MinimongoError('The \\'to\\' field for $rename cannot contain an embedded null byte', {                      // 1823\n        field: field                                                                                                   // 1825\n      });                                                                                                              // 1825\n    }                                                                                                                  // 1827\n                                                                                                                       //\n    if (target === undefined) {                                                                                        // 1829\n      return;                                                                                                          // 1830\n    }                                                                                                                  // 1831\n                                                                                                                       //\n    var object = target[field];                                                                                        // 1833\n    delete target[field];                                                                                              // 1835\n    var keyparts = arg.split('.');                                                                                     // 1837\n    var target2 = findModTarget(doc, keyparts, {                                                                       // 1838\n      forbidArray: true                                                                                                // 1838\n    });                                                                                                                // 1838\n                                                                                                                       //\n    if (target2 === null) {                                                                                            // 1840\n      throw MinimongoError('$rename target field invalid', {                                                           // 1841\n        field: field                                                                                                   // 1841\n      });                                                                                                              // 1841\n    }                                                                                                                  // 1842\n                                                                                                                       //\n    target2[keyparts.pop()] = object;                                                                                  // 1844\n  },                                                                                                                   // 1845\n  $bit: function (target, field, arg) {                                                                                // 1846\n    // XXX mongo only supports $bit on integers, and we only support                                                   // 1847\n    // native javascript numbers (doubles) so far, so we can't support $bit                                            // 1848\n    throw MinimongoError('$bit is not supported', {                                                                    // 1849\n      field: field                                                                                                     // 1849\n    });                                                                                                                // 1849\n  }                                                                                                                    // 1850\n};                                                                                                                     // 1448\nvar NO_CREATE_MODIFIERS = {                                                                                            // 1853\n  $pop: true,                                                                                                          // 1854\n  $pull: true,                                                                                                         // 1855\n  $pullAll: true,                                                                                                      // 1856\n  $rename: true,                                                                                                       // 1857\n  $unset: true                                                                                                         // 1858\n}; // Make sure field names do not contain Mongo restricted                                                            // 1853\n// characters ('.', '$', '\\0').                                                                                        // 1862\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names                                       // 1863\n                                                                                                                       //\nvar invalidCharMsg = {                                                                                                 // 1864\n  $: 'start with \\'$\\'',                                                                                               // 1865\n  '.': 'contain \\'.\\'',                                                                                                // 1866\n  '\\0': 'contain null bytes'                                                                                           // 1867\n}; // checks if all field names in an object are valid                                                                 // 1864\n                                                                                                                       //\nfunction assertHasValidFieldNames(doc) {                                                                               // 1871\n  if (doc && (typeof doc === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(doc)) === 'object') {                   // 1872\n    JSON.stringify(doc, function (key, value) {                                                                        // 1873\n      assertIsValidFieldName(key);                                                                                     // 1874\n      return value;                                                                                                    // 1875\n    });                                                                                                                // 1876\n  }                                                                                                                    // 1877\n}                                                                                                                      // 1878\n                                                                                                                       //\nfunction assertIsValidFieldName(key) {                                                                                 // 1880\n  var match = void 0;                                                                                                  // 1881\n                                                                                                                       //\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {                                                   // 1882\n    throw MinimongoError(\"Key \" + key + \" must not \" + invalidCharMsg[match[0]]);                                      // 1883\n  }                                                                                                                    // 1884\n} // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],                                               // 1885\n// and then you would operate on the 'e' property of the returned                                                      // 1888\n// object.                                                                                                             // 1889\n//                                                                                                                     // 1890\n// if options.noCreate is falsey, creates intermediate levels of                                                       // 1891\n// structure as necessary, like mkdir -p (and raises an exception if                                                   // 1892\n// that would mean giving a non-numeric property to an array.) if                                                      // 1893\n// options.noCreate is true, return undefined instead.                                                                 // 1894\n//                                                                                                                     // 1895\n// may modify the last element of keyparts to signal to the caller that it needs                                       // 1896\n// to use a different value to index into the returned object (for example,                                            // 1897\n// ['a', '01'] -> ['a', 1]).                                                                                           // 1898\n//                                                                                                                     // 1899\n// if forbidArray is true, return null if the keypath goes through an array.                                           // 1900\n//                                                                                                                     // 1901\n// if options.arrayIndices is set, use its first element for the (first) '$' in                                        // 1902\n// the path.                                                                                                           // 1903\n                                                                                                                       //\n                                                                                                                       //\nfunction findModTarget(doc, keyparts) {                                                                                // 1904\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                                // 1904\n  var usedArrayIndex = false;                                                                                          // 1905\n                                                                                                                       //\n  for (var i = 0; i < keyparts.length; i++) {                                                                          // 1907\n    var last = i === keyparts.length - 1;                                                                              // 1908\n    var keypart = keyparts[i];                                                                                         // 1909\n                                                                                                                       //\n    if (!isIndexable(doc)) {                                                                                           // 1911\n      if (options.noCreate) {                                                                                          // 1912\n        return undefined;                                                                                              // 1913\n      }                                                                                                                // 1914\n                                                                                                                       //\n      var error = MinimongoError(\"cannot use the part '\" + keypart + \"' to traverse \" + doc);                          // 1916\n      error.setPropertyError = true;                                                                                   // 1919\n      throw error;                                                                                                     // 1920\n    }                                                                                                                  // 1921\n                                                                                                                       //\n    if (doc instanceof Array) {                                                                                        // 1923\n      if (options.forbidArray) {                                                                                       // 1924\n        return null;                                                                                                   // 1925\n      }                                                                                                                // 1926\n                                                                                                                       //\n      if (keypart === '$') {                                                                                           // 1928\n        if (usedArrayIndex) {                                                                                          // 1929\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');                                           // 1930\n        }                                                                                                              // 1931\n                                                                                                                       //\n        if (!options.arrayIndices || !options.arrayIndices.length) {                                                   // 1933\n          throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');           // 1934\n        }                                                                                                              // 1938\n                                                                                                                       //\n        keypart = options.arrayIndices[0];                                                                             // 1940\n        usedArrayIndex = true;                                                                                         // 1941\n      } else if (isNumericKey(keypart)) {                                                                              // 1942\n        keypart = parseInt(keypart);                                                                                   // 1943\n      } else {                                                                                                         // 1944\n        if (options.noCreate) {                                                                                        // 1945\n          return undefined;                                                                                            // 1946\n        }                                                                                                              // 1947\n                                                                                                                       //\n        throw MinimongoError(\"can't append to array using string field name [\" + keypart + \"]\");                       // 1949\n      }                                                                                                                // 1952\n                                                                                                                       //\n      if (last) {                                                                                                      // 1954\n        keyparts[i] = keypart; // handle 'a.01'                                                                        // 1955\n      }                                                                                                                // 1956\n                                                                                                                       //\n      if (options.noCreate && keypart >= doc.length) {                                                                 // 1958\n        return undefined;                                                                                              // 1959\n      }                                                                                                                // 1960\n                                                                                                                       //\n      while (doc.length < keypart) {                                                                                   // 1962\n        doc.push(null);                                                                                                // 1963\n      }                                                                                                                // 1964\n                                                                                                                       //\n      if (!last) {                                                                                                     // 1966\n        if (doc.length === keypart) {                                                                                  // 1967\n          doc.push({});                                                                                                // 1968\n        } else if ((0, _typeof3.default)(doc[keypart]) !== 'object') {                                                 // 1969\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] + \"' of list value \" + JSON.stringify(doc[keypart]));\n        }                                                                                                              // 1974\n      }                                                                                                                // 1975\n    } else {                                                                                                           // 1976\n      assertIsValidFieldName(keypart);                                                                                 // 1977\n                                                                                                                       //\n      if (!(keypart in doc)) {                                                                                         // 1979\n        if (options.noCreate) {                                                                                        // 1980\n          return undefined;                                                                                            // 1981\n        }                                                                                                              // 1982\n                                                                                                                       //\n        if (!last) {                                                                                                   // 1984\n          doc[keypart] = {};                                                                                           // 1985\n        }                                                                                                              // 1986\n      }                                                                                                                // 1987\n    }                                                                                                                  // 1988\n                                                                                                                       //\n    if (last) {                                                                                                        // 1990\n      return doc;                                                                                                      // 1991\n    }                                                                                                                  // 1992\n                                                                                                                       //\n    doc = doc[keypart];                                                                                                // 1994\n  } // notreached                                                                                                      // 1995\n                                                                                                                       //\n}                                                                                                                      // 1998\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"matcher.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/matcher.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  \"default\": function () {                                                                                             // 1\n    return Matcher;                                                                                                    // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar LocalCollection = void 0;                                                                                          // 1\nmodule.watch(require(\"./local_collection.js\"), {                                                                       // 1\n  \"default\": function (v) {                                                                                            // 1\n    LocalCollection = v;                                                                                               // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar compileDocumentSelector = void 0,                                                                                  // 1\n    hasOwn = void 0,                                                                                                   // 1\n    nothingMatcher = void 0;                                                                                           // 1\nmodule.watch(require(\"./common.js\"), {                                                                                 // 1\n  compileDocumentSelector: function (v) {                                                                              // 1\n    compileDocumentSelector = v;                                                                                       // 1\n  },                                                                                                                   // 1\n  hasOwn: function (v) {                                                                                               // 1\n    hasOwn = v;                                                                                                        // 1\n  },                                                                                                                   // 1\n  nothingMatcher: function (v) {                                                                                       // 1\n    nothingMatcher = v;                                                                                                // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar Matcher = function () {                                                                                            //\n  function Matcher(selector, isUpdate) {                                                                               // 29\n    (0, _classCallCheck3.default)(this, Matcher);                                                                      // 29\n    // A set (object mapping string -> *) of all of the document paths looked                                          // 30\n    // at by the selector. Also includes the empty string if it may look at any                                        // 31\n    // path (eg, $where).                                                                                              // 32\n    this._paths = {}; // Set to true if compilation finds a $near.                                                     // 33\n                                                                                                                       //\n    this._hasGeoQuery = false; // Set to true if compilation finds a $where.                                           // 35\n                                                                                                                       //\n    this._hasWhere = false; // Set to false if compilation finds anything other than a simple equality                 // 37\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used                                       // 39\n    // with scalars as operands.                                                                                       // 40\n                                                                                                                       //\n    this._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null                // 41\n    // if such document is too hard to find.                                                                           // 43\n                                                                                                                       //\n    this._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user     // 44\n    // passed in a function; otherwise is definitely an object (eg, IDs are                                            // 46\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and                                            // 47\n    // Sorter._useWithMatcher.                                                                                         // 48\n                                                                                                                       //\n    this._selector = null;                                                                                             // 49\n    this._docMatcher = this._compileSelector(selector); // Set to true if selection is done for an update operation    // 50\n    // Default is false                                                                                                // 52\n    // Used for $near array update (issue #3599)                                                                       // 53\n                                                                                                                       //\n    this._isUpdate = isUpdate;                                                                                         // 54\n  }                                                                                                                    // 55\n                                                                                                                       //\n  Matcher.prototype.documentMatches = function () {                                                                    //\n    function documentMatches(doc) {                                                                                    //\n      if (doc !== Object(doc)) {                                                                                       // 58\n        throw Error('documentMatches needs a document');                                                               // 59\n      }                                                                                                                // 60\n                                                                                                                       //\n      return this._docMatcher(doc);                                                                                    // 62\n    }                                                                                                                  // 63\n                                                                                                                       //\n    return documentMatches;                                                                                            //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Matcher.prototype.hasGeoQuery = function () {                                                                        //\n    function hasGeoQuery() {                                                                                           //\n      return this._hasGeoQuery;                                                                                        // 66\n    }                                                                                                                  // 67\n                                                                                                                       //\n    return hasGeoQuery;                                                                                                //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Matcher.prototype.hasWhere = function () {                                                                           //\n    function hasWhere() {                                                                                              //\n      return this._hasWhere;                                                                                           // 70\n    }                                                                                                                  // 71\n                                                                                                                       //\n    return hasWhere;                                                                                                   //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Matcher.prototype.isSimple = function () {                                                                           //\n    function isSimple() {                                                                                              //\n      return this._isSimple;                                                                                           // 74\n    }                                                                                                                  // 75\n                                                                                                                       //\n    return isSimple;                                                                                                   //\n  }(); // Given a selector, return a function that takes one argument, a                                               //\n  // document. It returns a result object.                                                                             // 78\n                                                                                                                       //\n                                                                                                                       //\n  Matcher.prototype._compileSelector = function () {                                                                   //\n    function _compileSelector(selector) {                                                                              //\n      // you can pass a literal function instead of a selector                                                         // 80\n      if (selector instanceof Function) {                                                                              // 81\n        this._isSimple = false;                                                                                        // 82\n        this._selector = selector;                                                                                     // 83\n                                                                                                                       //\n        this._recordPathUsed('');                                                                                      // 84\n                                                                                                                       //\n        return function (doc) {                                                                                        // 86\n          return {                                                                                                     // 86\n            result: !!selector.call(doc)                                                                               // 86\n          };                                                                                                           // 86\n        };                                                                                                             // 86\n      } // shorthand -- scalar _id                                                                                     // 87\n                                                                                                                       //\n                                                                                                                       //\n      if (LocalCollection._selectorIsId(selector)) {                                                                   // 90\n        this._selector = {                                                                                             // 91\n          _id: selector                                                                                                // 91\n        };                                                                                                             // 91\n                                                                                                                       //\n        this._recordPathUsed('_id');                                                                                   // 92\n                                                                                                                       //\n        return function (doc) {                                                                                        // 94\n          return {                                                                                                     // 94\n            result: EJSON.equals(doc._id, selector)                                                                    // 94\n          };                                                                                                           // 94\n        };                                                                                                             // 94\n      } // protect against dangerous selectors.  falsey and {_id: falsey} are both                                     // 95\n      // likely programmer error, and not what you want, particularly for                                              // 98\n      // destructive operations.                                                                                       // 99\n                                                                                                                       //\n                                                                                                                       //\n      if (!selector || hasOwn.call(selector, '_id') && !selector._id) {                                                // 100\n        this._isSimple = false;                                                                                        // 101\n        return nothingMatcher;                                                                                         // 102\n      } // Top level can't be an array or true or binary.                                                              // 103\n                                                                                                                       //\n                                                                                                                       //\n      if (Array.isArray(selector) || EJSON.isBinary(selector) || typeof selector === 'boolean') {                      // 106\n        throw new Error(\"Invalid selector: \" + selector);                                                              // 109\n      }                                                                                                                // 110\n                                                                                                                       //\n      this._selector = EJSON.clone(selector);                                                                          // 112\n      return compileDocumentSelector(selector, this, {                                                                 // 114\n        isRoot: true                                                                                                   // 114\n      });                                                                                                              // 114\n    }                                                                                                                  // 115\n                                                                                                                       //\n    return _compileSelector;                                                                                           //\n  }(); // Returns a list of key paths the given selector is looking for. It includes                                   //\n  // the empty string if there is a $where.                                                                            // 118\n                                                                                                                       //\n                                                                                                                       //\n  Matcher.prototype._getPaths = function () {                                                                          //\n    function _getPaths() {                                                                                             //\n      return Object.keys(this._paths);                                                                                 // 120\n    }                                                                                                                  // 121\n                                                                                                                       //\n    return _getPaths;                                                                                                  //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Matcher.prototype._recordPathUsed = function () {                                                                    //\n    function _recordPathUsed(path) {                                                                                   //\n      this._paths[path] = true;                                                                                        // 124\n    }                                                                                                                  // 125\n                                                                                                                       //\n    return _recordPathUsed;                                                                                            //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return Matcher;                                                                                                      //\n}();                                                                                                                   //\n                                                                                                                       //\n// helpers used by compiled selector code                                                                              // 128\nLocalCollection._f = {                                                                                                 // 129\n  // XXX for _all and _in, consider building 'inquery' at compile time..                                               // 130\n  _type: function (v) {                                                                                                // 131\n    if (typeof v === 'number') {                                                                                       // 132\n      return 1;                                                                                                        // 133\n    }                                                                                                                  // 134\n                                                                                                                       //\n    if (typeof v === 'string') {                                                                                       // 136\n      return 2;                                                                                                        // 137\n    }                                                                                                                  // 138\n                                                                                                                       //\n    if (typeof v === 'boolean') {                                                                                      // 140\n      return 8;                                                                                                        // 141\n    }                                                                                                                  // 142\n                                                                                                                       //\n    if (Array.isArray(v)) {                                                                                            // 144\n      return 4;                                                                                                        // 145\n    }                                                                                                                  // 146\n                                                                                                                       //\n    if (v === null) {                                                                                                  // 148\n      return 10;                                                                                                       // 149\n    } // note that typeof(/x/) === \"object\"                                                                            // 150\n                                                                                                                       //\n                                                                                                                       //\n    if (v instanceof RegExp) {                                                                                         // 153\n      return 11;                                                                                                       // 154\n    }                                                                                                                  // 155\n                                                                                                                       //\n    if (typeof v === 'function') {                                                                                     // 157\n      return 13;                                                                                                       // 158\n    }                                                                                                                  // 159\n                                                                                                                       //\n    if (v instanceof Date) {                                                                                           // 161\n      return 9;                                                                                                        // 162\n    }                                                                                                                  // 163\n                                                                                                                       //\n    if (EJSON.isBinary(v)) {                                                                                           // 165\n      return 5;                                                                                                        // 166\n    }                                                                                                                  // 167\n                                                                                                                       //\n    if (v instanceof MongoID.ObjectID) {                                                                               // 169\n      return 7;                                                                                                        // 170\n    } // object                                                                                                        // 171\n                                                                                                                       //\n                                                                                                                       //\n    return 3; // XXX support some/all of these:                                                                        // 174\n    // 14, symbol                                                                                                      // 177\n    // 15, javascript code with scope                                                                                  // 178\n    // 16, 18: 32-bit/64-bit integer                                                                                   // 179\n    // 17, timestamp                                                                                                   // 180\n    // 255, minkey                                                                                                     // 181\n    // 127, maxkey                                                                                                     // 182\n  },                                                                                                                   // 183\n  // deep equality test: use for literal document and array matches                                                    // 185\n  _equal: function (a, b) {                                                                                            // 186\n    return EJSON.equals(a, b, {                                                                                        // 187\n      keyOrderSensitive: true                                                                                          // 187\n    });                                                                                                                // 187\n  },                                                                                                                   // 188\n  // maps a type code to a value that can be used to sort values of different                                          // 190\n  // types                                                                                                             // 191\n  _typeorder: function (t) {                                                                                           // 192\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types                                    // 193\n    // XXX what is the correct sort position for Javascript code?                                                      // 194\n    // ('100' in the matrix below)                                                                                     // 195\n    // XXX minkey/maxkey                                                                                               // 196\n    return [-1, // (not a type)                                                                                        // 197\n    1, // number                                                                                                       // 199\n    2, // string                                                                                                       // 200\n    3, // object                                                                                                       // 201\n    4, // array                                                                                                        // 202\n    5, // binary                                                                                                       // 203\n    -1, // deprecated                                                                                                  // 204\n    6, // ObjectID                                                                                                     // 205\n    7, // bool                                                                                                         // 206\n    8, // Date                                                                                                         // 207\n    0, // null                                                                                                         // 208\n    9, // RegExp                                                                                                       // 209\n    -1, // deprecated                                                                                                  // 210\n    100, // JS code                                                                                                    // 211\n    2, // deprecated (symbol)                                                                                          // 212\n    100, // JS code                                                                                                    // 213\n    1, // 32-bit int                                                                                                   // 214\n    8, // Mongo timestamp                                                                                              // 215\n    1 // 64-bit int                                                                                                    // 216\n    ][t];                                                                                                              // 197\n  },                                                                                                                   // 218\n  // compare two values of unknown type according to BSON ordering                                                     // 220\n  // semantics. (as an extension, consider 'undefined' to be less than                                                 // 221\n  // any other value.) return negative if a is less, positive if b is                                                  // 222\n  // less, or 0 if equal                                                                                               // 223\n  _cmp: function (a, b) {                                                                                              // 224\n    if (a === undefined) {                                                                                             // 225\n      return b === undefined ? 0 : -1;                                                                                 // 226\n    }                                                                                                                  // 227\n                                                                                                                       //\n    if (b === undefined) {                                                                                             // 229\n      return 1;                                                                                                        // 230\n    }                                                                                                                  // 231\n                                                                                                                       //\n    var ta = LocalCollection._f._type(a);                                                                              // 233\n                                                                                                                       //\n    var tb = LocalCollection._f._type(b);                                                                              // 234\n                                                                                                                       //\n    var oa = LocalCollection._f._typeorder(ta);                                                                        // 236\n                                                                                                                       //\n    var ob = LocalCollection._f._typeorder(tb);                                                                        // 237\n                                                                                                                       //\n    if (oa !== ob) {                                                                                                   // 239\n      return oa < ob ? -1 : 1;                                                                                         // 240\n    } // XXX need to implement this if we implement Symbol or integers, or                                             // 241\n    // Timestamp                                                                                                       // 244\n                                                                                                                       //\n                                                                                                                       //\n    if (ta !== tb) {                                                                                                   // 245\n      throw Error('Missing type coercion logic in _cmp');                                                              // 246\n    }                                                                                                                  // 247\n                                                                                                                       //\n    if (ta === 7) {                                                                                                    // 249\n      // ObjectID                                                                                                      // 249\n      // Convert to string.                                                                                            // 250\n      ta = tb = 2;                                                                                                     // 251\n      a = a.toHexString();                                                                                             // 252\n      b = b.toHexString();                                                                                             // 253\n    }                                                                                                                  // 254\n                                                                                                                       //\n    if (ta === 9) {                                                                                                    // 256\n      // Date                                                                                                          // 256\n      // Convert to millis.                                                                                            // 257\n      ta = tb = 1;                                                                                                     // 258\n      a = a.getTime();                                                                                                 // 259\n      b = b.getTime();                                                                                                 // 260\n    }                                                                                                                  // 261\n                                                                                                                       //\n    if (ta === 1) // double                                                                                            // 263\n      return a - b;                                                                                                    // 264\n    if (tb === 2) // string                                                                                            // 266\n      return a < b ? -1 : a === b ? 0 : 1;                                                                             // 267\n                                                                                                                       //\n    if (ta === 3) {                                                                                                    // 269\n      // Object                                                                                                        // 269\n      // this could be much more efficient in the expected case ...                                                    // 270\n      var toArray = function (object) {                                                                                // 271\n        var result = [];                                                                                               // 272\n        Object.keys(object).forEach(function (key) {                                                                   // 274\n          result.push(key, object[key]);                                                                               // 275\n        });                                                                                                            // 276\n        return result;                                                                                                 // 278\n      };                                                                                                               // 279\n                                                                                                                       //\n      return LocalCollection._f._cmp(toArray(a), toArray(b));                                                          // 281\n    }                                                                                                                  // 282\n                                                                                                                       //\n    if (ta === 4) {                                                                                                    // 284\n      // Array                                                                                                         // 284\n      for (var i = 0;; i++) {                                                                                          // 285\n        if (i === a.length) {                                                                                          // 286\n          return i === b.length ? 0 : -1;                                                                              // 287\n        }                                                                                                              // 288\n                                                                                                                       //\n        if (i === b.length) {                                                                                          // 290\n          return 1;                                                                                                    // 291\n        }                                                                                                              // 292\n                                                                                                                       //\n        var s = LocalCollection._f._cmp(a[i], b[i]);                                                                   // 294\n                                                                                                                       //\n        if (s !== 0) {                                                                                                 // 295\n          return s;                                                                                                    // 296\n        }                                                                                                              // 297\n      }                                                                                                                // 298\n    }                                                                                                                  // 299\n                                                                                                                       //\n    if (ta === 5) {                                                                                                    // 301\n      // binary                                                                                                        // 301\n      // Surprisingly, a small binary blob is always less than a large one in                                          // 302\n      // Mongo.                                                                                                        // 303\n      if (a.length !== b.length) {                                                                                     // 304\n        return a.length - b.length;                                                                                    // 305\n      }                                                                                                                // 306\n                                                                                                                       //\n      for (var _i = 0; _i < a.length; _i++) {                                                                          // 308\n        if (a[_i] < b[_i]) {                                                                                           // 309\n          return -1;                                                                                                   // 310\n        }                                                                                                              // 311\n                                                                                                                       //\n        if (a[_i] > b[_i]) {                                                                                           // 313\n          return 1;                                                                                                    // 314\n        }                                                                                                              // 315\n      }                                                                                                                // 316\n                                                                                                                       //\n      return 0;                                                                                                        // 318\n    }                                                                                                                  // 319\n                                                                                                                       //\n    if (ta === 8) {                                                                                                    // 321\n      // boolean                                                                                                       // 321\n      if (a) {                                                                                                         // 322\n        return b ? 0 : 1;                                                                                              // 323\n      }                                                                                                                // 324\n                                                                                                                       //\n      return b ? -1 : 0;                                                                                               // 326\n    }                                                                                                                  // 327\n                                                                                                                       //\n    if (ta === 10) // null                                                                                             // 329\n      return 0;                                                                                                        // 330\n    if (ta === 11) // regexp                                                                                           // 332\n      throw Error('Sorting not supported on regular expression'); // XXX                                               // 333\n    // 13: javascript code                                                                                             // 335\n    // 14: symbol                                                                                                      // 336\n    // 15: javascript code with scope                                                                                  // 337\n    // 16: 32-bit integer                                                                                              // 338\n    // 17: timestamp                                                                                                   // 339\n    // 18: 64-bit integer                                                                                              // 340\n    // 255: minkey                                                                                                     // 341\n    // 127: maxkey                                                                                                     // 342\n                                                                                                                       //\n    if (ta === 13) // javascript code                                                                                  // 343\n      throw Error('Sorting not supported on Javascript code'); // XXX                                                  // 344\n                                                                                                                       //\n    throw Error('Unknown type to sort');                                                                               // 346\n  }                                                                                                                    // 347\n};                                                                                                                     // 129\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"minimongo_common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/minimongo_common.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar LocalCollection_ = void 0;                                                                                         // 1\nmodule.watch(require(\"./local_collection.js\"), {                                                                       // 1\n    \"default\": function (v) {                                                                                          // 1\n        LocalCollection_ = v;                                                                                          // 1\n    }                                                                                                                  // 1\n}, 0);                                                                                                                 // 1\nvar Matcher = void 0;                                                                                                  // 1\nmodule.watch(require(\"./matcher.js\"), {                                                                                // 1\n    \"default\": function (v) {                                                                                          // 1\n        Matcher = v;                                                                                                   // 1\n    }                                                                                                                  // 1\n}, 1);                                                                                                                 // 1\nvar Sorter = void 0;                                                                                                   // 1\nmodule.watch(require(\"./sorter.js\"), {                                                                                 // 1\n    \"default\": function (v) {                                                                                          // 1\n        Sorter = v;                                                                                                    // 1\n    }                                                                                                                  // 1\n}, 2);                                                                                                                 // 1\nLocalCollection = LocalCollection_;                                                                                    // 5\nMinimongo = {                                                                                                          // 6\n    LocalCollection: LocalCollection_,                                                                                 // 7\n    Matcher: Matcher,                                                                                                  // 8\n    Sorter: Sorter                                                                                                     // 9\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"observe_handle.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/observe_handle.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  \"default\": function () {                                                                                             // 1\n    return ObserveHandle;                                                                                              // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar ObserveHandle = function () {                                                                                      //\n  function ObserveHandle() {                                                                                           //\n    (0, _classCallCheck3.default)(this, ObserveHandle);                                                                //\n  }                                                                                                                    //\n                                                                                                                       //\n  return ObserveHandle;                                                                                                //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"sorter.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/sorter.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                                //\n                                                                                                                       //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       //\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  \"default\": function () {                                                                                             // 1\n    return Sorter;                                                                                                     // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar ELEMENT_OPERATORS = void 0,                                                                                        // 1\n    equalityElementMatcher = void 0,                                                                                   // 1\n    expandArraysInBranches = void 0,                                                                                   // 1\n    hasOwn = void 0,                                                                                                   // 1\n    isOperatorObject = void 0,                                                                                         // 1\n    makeLookupFunction = void 0,                                                                                       // 1\n    regexpElementMatcher = void 0;                                                                                     // 1\nmodule.watch(require(\"./common.js\"), {                                                                                 // 1\n  ELEMENT_OPERATORS: function (v) {                                                                                    // 1\n    ELEMENT_OPERATORS = v;                                                                                             // 1\n  },                                                                                                                   // 1\n  equalityElementMatcher: function (v) {                                                                               // 1\n    equalityElementMatcher = v;                                                                                        // 1\n  },                                                                                                                   // 1\n  expandArraysInBranches: function (v) {                                                                               // 1\n    expandArraysInBranches = v;                                                                                        // 1\n  },                                                                                                                   // 1\n  hasOwn: function (v) {                                                                                               // 1\n    hasOwn = v;                                                                                                        // 1\n  },                                                                                                                   // 1\n  isOperatorObject: function (v) {                                                                                     // 1\n    isOperatorObject = v;                                                                                              // 1\n  },                                                                                                                   // 1\n  makeLookupFunction: function (v) {                                                                                   // 1\n    makeLookupFunction = v;                                                                                            // 1\n  },                                                                                                                   // 1\n  regexpElementMatcher: function (v) {                                                                                 // 1\n    regexpElementMatcher = v;                                                                                          // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nvar Sorter = function () {                                                                                             //\n  function Sorter(spec) {                                                                                              // 25\n    var _this = this;                                                                                                  // 25\n                                                                                                                       //\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                              // 25\n    (0, _classCallCheck3.default)(this, Sorter);                                                                       // 25\n    this._sortSpecParts = [];                                                                                          // 26\n    this._sortFunction = null;                                                                                         // 27\n                                                                                                                       //\n    var addSpecPart = function (path, ascending) {                                                                     // 29\n      if (!path) {                                                                                                     // 30\n        throw Error('sort keys must be non-empty');                                                                    // 31\n      }                                                                                                                // 32\n                                                                                                                       //\n      if (path.charAt(0) === '$') {                                                                                    // 34\n        throw Error(\"unsupported sort key: \" + path);                                                                  // 35\n      }                                                                                                                // 36\n                                                                                                                       //\n      _this._sortSpecParts.push({                                                                                      // 38\n        ascending: ascending,                                                                                          // 39\n        lookup: makeLookupFunction(path, {                                                                             // 40\n          forSort: true                                                                                                // 40\n        }),                                                                                                            // 40\n        path: path                                                                                                     // 41\n      });                                                                                                              // 38\n    };                                                                                                                 // 43\n                                                                                                                       //\n    if (spec instanceof Array) {                                                                                       // 45\n      spec.forEach(function (element) {                                                                                // 46\n        if (typeof element === 'string') {                                                                             // 47\n          addSpecPart(element, true);                                                                                  // 48\n        } else {                                                                                                       // 49\n          addSpecPart(element[0], element[1] !== 'desc');                                                              // 50\n        }                                                                                                              // 51\n      });                                                                                                              // 52\n    } else if ((typeof spec === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(spec)) === 'object') {               // 53\n      Object.keys(spec).forEach(function (key) {                                                                       // 54\n        addSpecPart(key, spec[key] >= 0);                                                                              // 55\n      });                                                                                                              // 56\n    } else if (typeof spec === 'function') {                                                                           // 57\n      this._sortFunction = spec;                                                                                       // 58\n    } else {                                                                                                           // 59\n      throw Error(\"Bad sort specification: \" + JSON.stringify(spec));                                                  // 60\n    } // If a function is specified for sorting, we skip the rest.                                                     // 61\n                                                                                                                       //\n                                                                                                                       //\n    if (this._sortFunction) {                                                                                          // 64\n      return;                                                                                                          // 65\n    } // To implement affectedByModifier, we piggy-back on top of Matcher's                                            // 66\n    // affectedByModifier code; we create a selector that is affected by the                                           // 69\n    // same modifiers as this sort order. This is only implemented on the                                              // 70\n    // server.                                                                                                         // 71\n                                                                                                                       //\n                                                                                                                       //\n    if (this.affectedByModifier) {                                                                                     // 72\n      var selector = {};                                                                                               // 73\n                                                                                                                       //\n      this._sortSpecParts.forEach(function (spec) {                                                                    // 75\n        selector[spec.path] = 1;                                                                                       // 76\n      });                                                                                                              // 77\n                                                                                                                       //\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);                                           // 79\n    }                                                                                                                  // 80\n                                                                                                                       //\n    this._keyComparator = composeComparators(this._sortSpecParts.map(function (spec, i) {                              // 82\n      return _this._keyFieldComparator(i);                                                                             // 83\n    })); // If you specify a matcher for this Sorter, _keyFilter may be set to a                                       // 83\n    // function which selects whether or not a given \"sort key\" (tuple of values                                       // 87\n    // for the different sort spec fields) is compatible with the selector.                                            // 88\n                                                                                                                       //\n    this._keyFilter = null;                                                                                            // 89\n                                                                                                                       //\n    if (options.matcher) {                                                                                             // 91\n      this._useWithMatcher(options.matcher);                                                                           // 92\n    }                                                                                                                  // 93\n  }                                                                                                                    // 94\n                                                                                                                       //\n  Sorter.prototype.getComparator = function () {                                                                       //\n    function getComparator(options) {                                                                                  //\n      // If sort is specified or have no distances, just use the comparator from                                       // 97\n      // the source specification (which defaults to \"everything is equal\".                                            // 98\n      // issue #3599                                                                                                   // 99\n      // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation                                 // 100\n      // sort effectively overrides $near                                                                              // 101\n      if (this._sortSpecParts.length || !options || !options.distances) {                                              // 102\n        return this._getBaseComparator();                                                                              // 103\n      }                                                                                                                // 104\n                                                                                                                       //\n      var distances = options.distances; // Return a comparator which compares using $near distances.                  // 106\n                                                                                                                       //\n      return function (a, b) {                                                                                         // 109\n        if (!distances.has(a._id)) {                                                                                   // 110\n          throw Error(\"Missing distance for \" + a._id);                                                                // 111\n        }                                                                                                              // 112\n                                                                                                                       //\n        if (!distances.has(b._id)) {                                                                                   // 114\n          throw Error(\"Missing distance for \" + b._id);                                                                // 115\n        }                                                                                                              // 116\n                                                                                                                       //\n        return distances.get(a._id) - distances.get(b._id);                                                            // 118\n      };                                                                                                               // 119\n    }                                                                                                                  // 120\n                                                                                                                       //\n    return getComparator;                                                                                              //\n  }(); // Takes in two keys: arrays whose lengths match the number of spec                                             //\n  // parts. Returns negative, 0, or positive based on using the sort spec to                                           // 123\n  // compare fields.                                                                                                   // 124\n                                                                                                                       //\n                                                                                                                       //\n  Sorter.prototype._compareKeys = function () {                                                                        //\n    function _compareKeys(key1, key2) {                                                                                //\n      if (key1.length !== this._sortSpecParts.length || key2.length !== this._sortSpecParts.length) {                  // 126\n        throw Error('Key has wrong length');                                                                           // 128\n      }                                                                                                                // 129\n                                                                                                                       //\n      return this._keyComparator(key1, key2);                                                                          // 131\n    }                                                                                                                  // 132\n                                                                                                                       //\n    return _compareKeys;                                                                                               //\n  }(); // Iterates over each possible \"key\" from doc (ie, over each branch), calling                                   //\n  // 'cb' with the key.                                                                                                // 135\n                                                                                                                       //\n                                                                                                                       //\n  Sorter.prototype._generateKeysFromDoc = function () {                                                                //\n    function _generateKeysFromDoc(doc, cb) {                                                                           //\n      if (this._sortSpecParts.length === 0) {                                                                          // 137\n        throw new Error('can\\'t generate keys without a spec');                                                        // 138\n      }                                                                                                                // 139\n                                                                                                                       //\n      var pathFromIndices = function (indices) {                                                                       // 141\n        return indices.join(',') + \",\";                                                                                // 141\n      };                                                                                                               // 141\n                                                                                                                       //\n      var knownPaths = null; // maps index -> ({'' -> value} or {path -> value})                                       // 143\n                                                                                                                       //\n      var valuesByIndexAndPath = this._sortSpecParts.map(function (spec) {                                             // 146\n        // Expand any leaf arrays that we find, and ignore those arrays                                                // 147\n        // themselves.  (We never sort based on an array itself.)                                                      // 148\n        var branches = expandArraysInBranches(spec.lookup(doc), true); // If there are no values for a key (eg, key goes to an empty array),\n        // pretend we found one null value.                                                                            // 152\n                                                                                                                       //\n        if (!branches.length) {                                                                                        // 153\n          branches = [{                                                                                                // 154\n            value: null                                                                                                // 154\n          }];                                                                                                          // 154\n        }                                                                                                              // 155\n                                                                                                                       //\n        var element = Object.create(null);                                                                             // 157\n        var usedPaths = false;                                                                                         // 158\n        branches.forEach(function (branch) {                                                                           // 160\n          if (!branch.arrayIndices) {                                                                                  // 161\n            // If there are no array indices for a branch, then it must be the                                         // 162\n            // only branch, because the only thing that produces multiple branches                                     // 163\n            // is the use of arrays.                                                                                   // 164\n            if (branches.length > 1) {                                                                                 // 165\n              throw Error('multiple branches but no array used?');                                                     // 166\n            }                                                                                                          // 167\n                                                                                                                       //\n            element[''] = branch.value;                                                                                // 169\n            return;                                                                                                    // 170\n          }                                                                                                            // 171\n                                                                                                                       //\n          usedPaths = true;                                                                                            // 173\n          var path = pathFromIndices(branch.arrayIndices);                                                             // 175\n                                                                                                                       //\n          if (hasOwn.call(element, path)) {                                                                            // 177\n            throw Error(\"duplicate path: \" + path);                                                                    // 178\n          }                                                                                                            // 179\n                                                                                                                       //\n          element[path] = branch.value; // If two sort fields both go into arrays, they have to go into the            // 181\n          // exact same arrays and we have to find the same paths.  This is                                            // 184\n          // roughly the same condition that makes MongoDB throw this strange                                          // 185\n          // error message.  eg, the main thing is that if sort spec is {a: 1,                                         // 186\n          // b:1} then a and b cannot both be arrays.                                                                  // 187\n          //                                                                                                           // 188\n          // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'                                        // 189\n          // and 'a.x.y' are both arrays, but we don't allow this for now.                                             // 190\n          // #NestedArraySort                                                                                          // 191\n          // XXX achieve full compatibility here                                                                       // 192\n                                                                                                                       //\n          if (knownPaths && !hasOwn.call(knownPaths, path)) {                                                          // 193\n            throw Error('cannot index parallel arrays');                                                               // 194\n          }                                                                                                            // 195\n        });                                                                                                            // 196\n                                                                                                                       //\n        if (knownPaths) {                                                                                              // 198\n          // Similarly to above, paths must match everywhere, unless this is a                                         // 199\n          // non-array field.                                                                                          // 200\n          if (!hasOwn.call(element, '') && Object.keys(knownPaths).length !== Object.keys(element).length) {           // 201\n            throw Error('cannot index parallel arrays!');                                                              // 203\n          }                                                                                                            // 204\n        } else if (usedPaths) {                                                                                        // 205\n          knownPaths = {};                                                                                             // 206\n          Object.keys(element).forEach(function (path) {                                                               // 208\n            knownPaths[path] = true;                                                                                   // 209\n          });                                                                                                          // 210\n        }                                                                                                              // 211\n                                                                                                                       //\n        return element;                                                                                                // 213\n      });                                                                                                              // 214\n                                                                                                                       //\n      if (!knownPaths) {                                                                                               // 216\n        // Easy case: no use of arrays.                                                                                // 217\n        var soleKey = valuesByIndexAndPath.map(function (values) {                                                     // 218\n          if (!hasOwn.call(values, '')) {                                                                              // 219\n            throw Error('no value in sole key case?');                                                                 // 220\n          }                                                                                                            // 221\n                                                                                                                       //\n          return values[''];                                                                                           // 223\n        });                                                                                                            // 224\n        cb(soleKey);                                                                                                   // 226\n        return;                                                                                                        // 228\n      }                                                                                                                // 229\n                                                                                                                       //\n      Object.keys(knownPaths).forEach(function (path) {                                                                // 231\n        var key = valuesByIndexAndPath.map(function (values) {                                                         // 232\n          if (hasOwn.call(values, '')) {                                                                               // 233\n            return values[''];                                                                                         // 234\n          }                                                                                                            // 235\n                                                                                                                       //\n          if (!hasOwn.call(values, path)) {                                                                            // 237\n            throw Error('missing path?');                                                                              // 238\n          }                                                                                                            // 239\n                                                                                                                       //\n          return values[path];                                                                                         // 241\n        });                                                                                                            // 242\n        cb(key);                                                                                                       // 244\n      });                                                                                                              // 245\n    }                                                                                                                  // 246\n                                                                                                                       //\n    return _generateKeysFromDoc;                                                                                       //\n  }(); // Returns a comparator that represents the sort specification (but not                                         //\n  // including a possible geoquery distance tie-breaker).                                                              // 249\n                                                                                                                       //\n                                                                                                                       //\n  Sorter.prototype._getBaseComparator = function () {                                                                  //\n    function _getBaseComparator() {                                                                                    //\n      var _this2 = this;                                                                                               // 250\n                                                                                                                       //\n      if (this._sortFunction) {                                                                                        // 251\n        return this._sortFunction;                                                                                     // 252\n      } // If we're only sorting on geoquery distance and no specs, just say                                           // 253\n      // everything is equal.                                                                                          // 256\n                                                                                                                       //\n                                                                                                                       //\n      if (!this._sortSpecParts.length) {                                                                               // 257\n        return function (doc1, doc2) {                                                                                 // 258\n          return 0;                                                                                                    // 258\n        };                                                                                                             // 258\n      }                                                                                                                // 259\n                                                                                                                       //\n      return function (doc1, doc2) {                                                                                   // 261\n        var key1 = _this2._getMinKeyFromDoc(doc1);                                                                     // 262\n                                                                                                                       //\n        var key2 = _this2._getMinKeyFromDoc(doc2);                                                                     // 263\n                                                                                                                       //\n        return _this2._compareKeys(key1, key2);                                                                        // 264\n      };                                                                                                               // 265\n    }                                                                                                                  // 266\n                                                                                                                       //\n    return _getBaseComparator;                                                                                         //\n  }(); // Finds the minimum key from the doc, according to the sort specs.  (We say                                    //\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"                                         // 269\n  // sort fields mean we're finding the max for that field.)                                                           // 270\n  //                                                                                                                   // 271\n  // Note that this is NOT \"find the minimum value of the first field, the                                             // 272\n  // minimum value of the second field, etc\"... it's \"choose the                                                       // 273\n  // lexicographically minimum value of the key vector, allowing only keys which                                       // 274\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:                                         // 275\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and                                       // 276\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.                                                 // 277\n                                                                                                                       //\n                                                                                                                       //\n  Sorter.prototype._getMinKeyFromDoc = function () {                                                                   //\n    function _getMinKeyFromDoc(doc) {                                                                                  //\n      var _this3 = this;                                                                                               // 278\n                                                                                                                       //\n      var minKey = null;                                                                                               // 279\n                                                                                                                       //\n      this._generateKeysFromDoc(doc, function (key) {                                                                  // 281\n        if (!_this3._keyCompatibleWithSelector(key)) {                                                                 // 282\n          return;                                                                                                      // 283\n        }                                                                                                              // 284\n                                                                                                                       //\n        if (minKey === null) {                                                                                         // 286\n          minKey = key;                                                                                                // 287\n          return;                                                                                                      // 288\n        }                                                                                                              // 289\n                                                                                                                       //\n        if (_this3._compareKeys(key, minKey) < 0) {                                                                    // 291\n          minKey = key;                                                                                                // 292\n        }                                                                                                              // 293\n      }); // This could happen if our key filter somehow filters out all the keys even                                 // 294\n      // though somehow the selector matches.                                                                          // 297\n                                                                                                                       //\n                                                                                                                       //\n      if (minKey === null) {                                                                                           // 298\n        throw Error('sort selector found no keys in doc?');                                                            // 299\n      }                                                                                                                // 300\n                                                                                                                       //\n      return minKey;                                                                                                   // 302\n    }                                                                                                                  // 303\n                                                                                                                       //\n    return _getMinKeyFromDoc;                                                                                          //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Sorter.prototype._getPaths = function () {                                                                           //\n    function _getPaths() {                                                                                             //\n      return this._sortSpecParts.map(function (part) {                                                                 // 306\n        return part.path;                                                                                              // 306\n      });                                                                                                              // 306\n    }                                                                                                                  // 307\n                                                                                                                       //\n    return _getPaths;                                                                                                  //\n  }();                                                                                                                 //\n                                                                                                                       //\n  Sorter.prototype._keyCompatibleWithSelector = function () {                                                          //\n    function _keyCompatibleWithSelector(key) {                                                                         //\n      return !this._keyFilter || this._keyFilter(key);                                                                 // 310\n    }                                                                                                                  // 311\n                                                                                                                       //\n    return _keyCompatibleWithSelector;                                                                                 //\n  }(); // Given an index 'i', returns a comparator that compares two key arrays based                                  //\n  // on field 'i'.                                                                                                     // 314\n                                                                                                                       //\n                                                                                                                       //\n  Sorter.prototype._keyFieldComparator = function () {                                                                 //\n    function _keyFieldComparator(i) {                                                                                  //\n      var invert = !this._sortSpecParts[i].ascending;                                                                  // 316\n      return function (key1, key2) {                                                                                   // 318\n        var compare = LocalCollection._f._cmp(key1[i], key2[i]);                                                       // 319\n                                                                                                                       //\n        return invert ? -compare : compare;                                                                            // 320\n      };                                                                                                               // 321\n    }                                                                                                                  // 322\n                                                                                                                       //\n    return _keyFieldComparator;                                                                                        //\n  }(); // In MongoDB, if you have documents                                                                            //\n  //    {_id: 'x', a: [1, 10]} and                                                                                     // 325\n  //    {_id: 'y', a: [5, 15]},                                                                                        // 326\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).                                               // 327\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not                                            // 328\n  // match the selector, and 5 comes before 10).                                                                       // 329\n  //                                                                                                                   // 330\n  // The way this works is pretty subtle!  For example, if the documents                                               // 331\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and                                                                 // 332\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),                                                                    // 333\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and                                                            // 334\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})                                                 // 335\n  // both follow this rule (y before x).  (ie, you do have to apply this                                               // 336\n  // through $elemMatch.)                                                                                              // 337\n  //                                                                                                                   // 338\n  // So if you pass a matcher to this sorter's constructor, we will attempt to                                         // 339\n  // skip sort keys that don't match the selector. The logic here is pretty                                            // 340\n  // subtle and undocumented; we've gotten as close as we can figure out based                                         // 341\n  // on our understanding of Mongo's behavior.                                                                         // 342\n                                                                                                                       //\n                                                                                                                       //\n  Sorter.prototype._useWithMatcher = function () {                                                                     //\n    function _useWithMatcher(matcher) {                                                                                //\n      var _this4 = this;                                                                                               // 343\n                                                                                                                       //\n      if (this._keyFilter) {                                                                                           // 344\n        throw Error('called _useWithMatcher twice?');                                                                  // 345\n      } // If we are only sorting by distance, then we're not going to bother to                                       // 346\n      // build a key filter.                                                                                           // 349\n      // XXX figure out how geoqueries interact with this stuff                                                        // 350\n                                                                                                                       //\n                                                                                                                       //\n      if (!this._sortSpecParts.length) {                                                                               // 351\n        return;                                                                                                        // 352\n      }                                                                                                                // 353\n                                                                                                                       //\n      var selector = matcher._selector; // If the user just passed a falsey selector to find(),                        // 355\n      // then we can't get a key filter from it.                                                                       // 358\n                                                                                                                       //\n      if (!selector) {                                                                                                 // 359\n        return;                                                                                                        // 360\n      } // If the user just passed a literal function to find(), then we can't get a                                   // 361\n      // key filter from it.                                                                                           // 364\n                                                                                                                       //\n                                                                                                                       //\n      if (selector instanceof Function) {                                                                              // 365\n        return;                                                                                                        // 366\n      }                                                                                                                // 367\n                                                                                                                       //\n      var constraintsByPath = {};                                                                                      // 369\n                                                                                                                       //\n      this._sortSpecParts.forEach(function (spec) {                                                                    // 371\n        constraintsByPath[spec.path] = [];                                                                             // 372\n      });                                                                                                              // 373\n                                                                                                                       //\n      Object.keys(selector).forEach(function (key) {                                                                   // 375\n        var subSelector = selector[key]; // XXX support $and and $or                                                   // 376\n                                                                                                                       //\n        var constraints = constraintsByPath[key];                                                                      // 379\n                                                                                                                       //\n        if (!constraints) {                                                                                            // 380\n          return;                                                                                                      // 381\n        } // XXX it looks like the real MongoDB implementation isn't \"does the                                         // 382\n        // regexp match\" but \"does the value fall into a range named by the                                            // 385\n        // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But                                            // 386\n        // \"does the regexp match\" is a good approximation.                                                            // 387\n                                                                                                                       //\n                                                                                                                       //\n        if (subSelector instanceof RegExp) {                                                                           // 388\n          // As far as we can tell, using either of the options that both we and                                       // 389\n          // MongoDB support ('i' and 'm') disables use of the key filter. This                                        // 390\n          // makes sense: MongoDB mostly appears to be calculating ranges of an                                        // 391\n          // index to use, which means it only cares about regexps that match                                          // 392\n          // one range (with a literal prefix), and both 'i' and 'm' prevent the                                       // 393\n          // literal prefix of the regexp from actually meaning one range.                                             // 394\n          if (subSelector.ignoreCase || subSelector.multiline) {                                                       // 395\n            return;                                                                                                    // 396\n          }                                                                                                            // 397\n                                                                                                                       //\n          constraints.push(regexpElementMatcher(subSelector));                                                         // 399\n          return;                                                                                                      // 400\n        }                                                                                                              // 401\n                                                                                                                       //\n        if (isOperatorObject(subSelector)) {                                                                           // 403\n          Object.keys(subSelector).forEach(function (operator) {                                                       // 404\n            var operand = subSelector[operator];                                                                       // 405\n                                                                                                                       //\n            if (['$lt', '$lte', '$gt', '$gte'].includes(operator)) {                                                   // 407\n              // XXX this depends on us knowing that these operators don't use any                                     // 408\n              // of the arguments to compileElementSelector other than operand.                                        // 409\n              constraints.push(ELEMENT_OPERATORS[operator].compileElementSelector(operand));                           // 410\n            } // See comments in the RegExp block above.                                                               // 413\n                                                                                                                       //\n                                                                                                                       //\n            if (operator === '$regex' && !subSelector.$options) {                                                      // 416\n              constraints.push(ELEMENT_OPERATORS.$regex.compileElementSelector(operand, subSelector));                 // 417\n            } // XXX support {$exists: true}, $mod, $type, $in, $elemMatch                                             // 423\n                                                                                                                       //\n          });                                                                                                          // 426\n          return;                                                                                                      // 428\n        } // OK, it's an equality thing.                                                                               // 429\n                                                                                                                       //\n                                                                                                                       //\n        constraints.push(equalityElementMatcher(subSelector));                                                         // 432\n      }); // It appears that the first sort field is treated differently from the                                      // 433\n      // others; we shouldn't create a key filter unless the first sort field is                                       // 436\n      // restricted, though after that point we can restrict the other sort fields                                     // 437\n      // or not as we wish.                                                                                            // 438\n                                                                                                                       //\n      if (!constraintsByPath[this._sortSpecParts[0].path].length) {                                                    // 439\n        return;                                                                                                        // 440\n      }                                                                                                                // 441\n                                                                                                                       //\n      this._keyFilter = function (key) {                                                                               // 443\n        return _this4._sortSpecParts.every(function (specPart, index) {                                                // 443\n          return constraintsByPath[specPart.path].every(function (fn) {                                                // 444\n            return fn(key[index]);                                                                                     // 445\n          });                                                                                                          // 445\n        });                                                                                                            // 444\n      };                                                                                                               // 443\n    }                                                                                                                  // 448\n                                                                                                                       //\n    return _useWithMatcher;                                                                                            //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return Sorter;                                                                                                       //\n}();                                                                                                                   //\n                                                                                                                       //\n// Given an array of comparators                                                                                       // 451\n// (functions (a,b)->(negative or positive or zero)), returns a single                                                 // 452\n// comparator which uses each comparator in order and returns the first                                                // 453\n// non-zero value.                                                                                                     // 454\nfunction composeComparators(comparatorArray) {                                                                         // 455\n  return function (a, b) {                                                                                             // 456\n    for (var i = 0; i < comparatorArray.length; ++i) {                                                                 // 457\n      var compare = comparatorArray[i](a, b);                                                                          // 458\n                                                                                                                       //\n      if (compare !== 0) {                                                                                             // 459\n        return compare;                                                                                                // 460\n      }                                                                                                                // 461\n    }                                                                                                                  // 462\n                                                                                                                       //\n    return 0;                                                                                                          // 464\n  };                                                                                                                   // 465\n}                                                                                                                      // 466\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/minimongo/minimongo_client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.minimongo = exports, {\n  LocalCollection: LocalCollection,\n  Minimongo: Minimongo,\n  MinimongoTest: MinimongoTest,\n  MinimongoError: MinimongoError\n});\n\n})();\n","servePath":"/packages/minimongo.js","sourceMap":{"version":3,"sources":["packages/minimongo/minimongo_client.js","packages/minimongo/common.js","packages/minimongo/cursor.js","packages/minimongo/local_collection.js","packages/minimongo/matcher.js","packages/minimongo/minimongo_common.js","packages/minimongo/observe_handle.js","packages/minimongo/sorter.js"],"names":["module","watch","require","export","hasOwn","ELEMENT_OPERATORS","compileDocumentSelector","equalityElementMatcher","expandArraysInBranches","isIndexable","isNumericKey","isOperatorObject","makeLookupFunction","nothingMatcher","pathsToTree","populateDocumentWithQueryFields","projectionDetails","regexpElementMatcher","LocalCollection","v","Object","prototype","hasOwnProperty","$lt","makeInequality","cmpValue","$gt","$lte","$gte","$mod","compileElementSelector","operand","Array","isArray","length","Error","divisor","remainder","value","$in","elementMatchers","map","option","RegExp","undefined","some","matcher","$size","dontExpandLeafArrays","$type","dontIncludeLeafArrays","_f","_type","$bitsAllSet","mask","getOperandBitmask","bitmask","getValueBitmask","every","byte","i","$bitsAnySet","$bitsAllClear","$bitsAnyClear","$regex","valueSelector","regexp","$options","test","source","$elemMatch","_isPlainObject","isDocMatcher","keys","filter","call","LOGICAL_OPERATORS","key","reduce","a","b","assign","subMatcher","inElemMatch","compileValueSelector","arrayElement","arg","dontIterate","result","$and","subSelector","andDocumentMatchers","compileArrayOfDocumentSelectors","$or","matchers","fn","doc","$nor","$where","selectorValue","_recordPathUsed","_hasWhere","Function","$comment","VALUE_OPERATORS","$eq","convertElementMatcherToBranchedMatcher","$not","invertBranchedMatcher","$ne","$nin","$exists","exists","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","andBranchedMatchers","isRoot","_hasGeoQuery","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","curDistance","_isUpdate","branch","arrayIndices","andSomeMatchers","subMatchers","match","subResult","docOrBranches","selectors","docSelector","options","docMatchers","substr","_isSimple","lookUpByIndex","valueMatcher","Boolean","operatorBranchedMatcher","elementMatcher","expanded","branches","matched","element","pointA","pointB","Math","hypot","elementSelector","_equal","docOrBranchedValues","skipTheArrays","branchesOut","forEach","thisIsArray","push","concat","selector","Number","isInteger","Uint8Array","Int32Array","buffer","EJSON","isBinary","x","ArrayBuffer","max","view","isSafeInteger","Uint32Array","BYTES_PER_ELEMENT","insertIntoDocument","document","existingKey","indexOf","branchedMatcher","branchValues","obj","s","inconsistentOK","theseAreOperators","thisIsOperator","selKey","JSON","stringify","cmpValueComparator","operandType","_cmp","parts","split","firstPart","lookupRest","slice","join","omitUnnecessaryFields","firstLevel","appendToResult","more","forSort","arrayIndex","MinimongoTest","MinimongoError","message","field","error","name","operatorMatchers","operator","simpleRange","includes","simpleEquality","simpleInclusion","paths","newLeafFn","conflictFn","root","pathArray","path","tree","success","lastKey","y","populateDocumentWithKeyValue","getPrototypeOf","populateDocumentWithObject","unprefixedKeys","op","validateObject","object","query","_selectorIsId","fields","fieldsKeys","sort","_id","including","rule","keyPath","projectionRulesTree","node","fullPath","currentPath","anotherPath","toString","lastIndex","validateKeyInPath","Cursor","collection","sorter","Minimongo","Matcher","_selectorIsIdPerhapsAsObject","_selectorId","hasGeoQuery","Sorter","skip","limit","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","count","applySkipLimit","_depend","added","removed","_getRawObjects","ordered","fetch","Symbol","iterator","addedBefore","changed","movedBefore","index","objects","next","done","callback","thisArg","getTransform","observe","_observeFromObserveChanges","observeChanges","_observeChangesCallbacksAreOrdered","_allow_unordered","distances","_IdMap","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","self","args","arguments","_observeQueue","queueTask","apply","_suppress_initial","_map","clone","handle","ObserveHandle","stop","active","onInvalidate","drain","rewind","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","selectedDoc","_docs","get","set","clear","id","matchResult","documentMatches","getComparator","_publishCursor","subscription","Package","mongo","Mongo","Collection","Meteor","_SynchronousQueue","create","_savedOriginals","find","findOne","insert","assertHasValidFieldNames","_useOID","MongoID","ObjectID","Random","has","_saveOriginal","queriesToRecompute","_insertInResults","_recomputeResults","defer","pauseObservers","remove","equals","size","_eachPossiblyMatchingDoc","queryRemove","removeId","removeDoc","_removeFromResults","resumeObservers","_diffQueryChanges","retrieveOriginals","originals","saveOriginals","update","mod","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","memoizedCloneIfNeeded","docToMemoize","recomputeQids","updateCount","queryResult","_modifyAndNotify","multi","insertedId","upsert","_createUpsertDocument","_returnObject","numberAffected","specificIds","matched_before","old_doc","_modify","afterMatch","after","before","_updateInResults","oldResults","_CachingChangeObserver","orderedFromCallbacks","callbacks","docs","OrderedDict","idStringify","applyChange","putBefore","moveBefore","DiffSequence","applyChanges","idParse","IdMap","__wrappedTransform__","wrapped","transformed","nonreactive","_binarySearch","cmp","array","first","range","halfRange","floor","_checkSupportedProjection","_idProjection","details","ruleTree","subdoc","modifier","selectorDocument","isModify","_isModificationMod","newDoc","$set","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","subIds","_insertInSortedList","splice","isReplace","isModifier","setOnInsert","modFunc","MODIFIERS","keypath","keyparts","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","observeCallbacks","suppressed","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","addedAt","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","changedFields","makeChangedFields","old_idx","new_idx","$currentDate","Date","$min","$max","$inc","setPropertyError","$setOnInsert","$unset","$push","$each","toPush","position","$position","$slice","sortFunction","$sort","spliceArguments","$pushAll","$addToSet","isEach","values","toAdd","$pop","toPop","$pull","toPull","out","$pullAll","$rename","target2","$bit","invalidCharMsg","$","assertIsValidFieldName","usedArrayIndex","last","keypart","parseInt","isUpdate","_paths","_matchingDocument","_selector","_docMatcher","_compileSelector","hasWhere","isSimple","_getPaths","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","getTime","toArray","LocalCollection_","spec","_sortSpecParts","_sortFunction","addSpecPart","ascending","charAt","lookup","affectedByModifier","_selectorForAffectedByModifier","_keyComparator","composeComparators","_keyFieldComparator","_keyFilter","_useWithMatcher","_getBaseComparator","_compareKeys","key1","key2","_generateKeysFromDoc","cb","pathFromIndices","knownPaths","valuesByIndexAndPath","usedPaths","soleKey","doc1","doc2","_getMinKeyFromDoc","minKey","_keyCompatibleWithSelector","part","invert","compare","constraintsByPath","constraints","ignoreCase","multiline","specPart","comparatorArray"],"mappings":"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","file":"/packages/minimongo.js","sourcesContent":["import './minimongo_common.js';\n","import LocalCollection from './local_collection.js';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nexport const ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2\n            && typeof operand[0] === 'number'\n            && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => (\n        typeof value === 'number' && value % divisor === remainder\n      );\n    },\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    },\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    },\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand !== 'number') {\n        throw Error('$type needs a number');\n      }\n\n      return value => (\n        value !== undefined && LocalCollection._f._type(value) === operand\n      );\n    },\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    },\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    },\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    },\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(\n        Object.keys(operand)\n          .filter(key => !hasOwn.call(LOGICAL_OPERATORS, key))\n          .reduce((a, b) => Object.assign(a, {[b]: operand[b]}), {}),\n        true);\n\n      let subMatcher;\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher =\n          compileDocumentSelector(operand, matcher, {inElemMatch: true});\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    },\n  },\n};\n\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(\n      compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)\n    );\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result);\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result};\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result);\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {result};\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return doc => ({result: selectorValue.call(doc, doc)});\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({result: true});\n  },\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)\n    );\n  },\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))\n    );\n  },\n  $nin(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(\n        ELEMENT_OPERATORS.$in.compileElementSelector(operand)\n      )\n    );\n  },\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(\n      value => value !== undefined\n    );\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    let maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(\n            point,\n            {type: 'Point', coordinates: pointToArray(value)}\n          );\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n          ? 0\n          : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {result: false};\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n\n      return result;\n    };\n  },\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result &&\n          subResult.distance !== undefined &&\n          match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {inElemMatch});\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nexport function compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(\n      subSelector,\n      matcher,\n      options.isRoot\n    );\n\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector)\n    );\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(\n    equalityElementMatcher(valueSelector)\n  );\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays\n      ? branches\n      : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nexport function equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {result: true};\n}\n\nexport function expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({arrayIndices: branch.arrayIndices, value: branch.value});\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) &&\n      operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n\n    return view;\n  }\n\n  // bad operand\n  throw Error(\n    `operand to ${selector} must be a numeric bitmask (representable as a ` +\n    'non-negative 32-bit signed integer), a bindata bitmask or an array with ' +\n    'bit positions (non-negative integers)'\n  );\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(\n      Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)\n    );\n\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (\n      (existingKey.length > key.length && existingKey.indexOf(`${key}.`) === 0) ||\n      (key.length > existingKey.length && key.indexOf(`${existingKey}.`) === 0)\n    ) {\n      throw new Error(\n        `cannot infer query fields to set, both paths '${existingKey}' and ` +\n        `'${key}' are matched`\n      );\n    } else if (existingKey === key) {\n      throw new Error(\n        `cannot infer query fields to set, path '${key}' is matched twice`\n      );\n    }\n  });\n\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !branchedMatcher(branchValues).result};\n  };\n}\n\nexport function isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nexport function isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nexport function isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\n          `Inconsistent operator: ${JSON.stringify(valueSelector)}`\n        );\n      }\n\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    },\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nexport function makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = (\n    parts.length > 1 &&\n    makeLookupFunction(parts.slice(1).join('.'))\n  );\n\n  const omitUnnecessaryFields = result => {\n    if (!result.dontIterate) {\n      delete result.dontIterate;\n    }\n\n    if (result.arrayIndices && !result.arrayIndices.length) {\n      delete result.arrayIndices;\n    }\n\n    return result;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return (doc, arrayIndices = []) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    const firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        arrayIndices,\n        dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),\n        value: firstLevel\n      })];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return [omitUnnecessaryFields({arrayIndices, value: undefined})];\n    }\n\n    const result = [];\n    const appendToResult = more => {\n      result.push(...more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) &&\n        !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {makeLookupFunction};\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nexport function nothingMatcher(docOrBranchedValues) {\n  return {result: false};\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n\n    const simpleRange = (\n      ['$lt', '$lte', '$gt', '$gte'].includes(operator) &&\n      typeof operand === 'number'\n    );\n\n    const simpleEquality = (\n      ['$ne', '$eq'].includes(operator) &&\n      operand !== Object(operand)\n    );\n\n    const simpleInclusion = (\n      ['$in', '$nin'].includes(operator)\n      && Array.isArray(operand)\n      && !operand.some(x => x === Object(x))\n    );\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(\n        options.compileElementSelector(operand, valueSelector, matcher),\n        options\n      );\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nexport function pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root;\n\n    // use .every just for iteration with break\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(\n          tree[key],\n          pathArray.slice(0, i + 1).join('.'),\n          path\n        );\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element =>\n          populateDocumentWithKeyValue(document, key, element)\n        );\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nexport function populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element =>\n          populateDocumentWithQueryFields(element, document)\n        );\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nexport function projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError(\n        'You cannot currently mix including and excluding fields.'\n      );\n    }\n  });\n\n  const projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    path => including,\n    (node, path, fullPath) => {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n      //\n      // Note, how second time the return set of keys is different.\n      const currentPath = fullPath;\n      const anotherPath = path;\n      throw MinimongoError(\n        `both ${currentPath} and ${anotherPath} found in fields option, ` +\n        'using both of them may trigger unexpected behavior. Did you mean to ' +\n        'use only one of them?'\n      );\n    });\n\n  return {including, tree: projectionRulesTree};\n}\n\n// Takes a RegExp object and returns an element matcher.\nexport function regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\n      `The dotted field '${key}' in '${path}.${key} is not valid for storage.`\n    );\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\n      `The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`\n    );\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n","import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(\n          options.sort || [],\n          {matcher: this.matcher}\n        );\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @param {boolean} [applySkipLimit=true] If set to `false`, the value\n   *                                         returned will reflect the total\n   *                                         number of matching documents,\n   *                                         ignoring any value supplied for\n   *                                         limit\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count(applySkipLimit = true) {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n      applySkipLimit\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      const results = ordered ? query.results : query.results._map;\n\n      Object.keys(results).forEach(key => {\n        const doc = results[key];\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n  rewind() {}\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n","import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = new Meteor._SynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResults(query, doc);\n        }\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // Defer because the caller likely doesn't expect the callback to be run\n    // immediately.\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      const result = this._docs.size();\n\n      this._docs.clear();\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n\n      if (callback) {\n        Meteor.defer(() => {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResults(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    const recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        this._modifyAndNotify(\n          doc,\n          mod,\n          recomputeQids,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (! doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = {numberAffected: updateCount};\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  _eachPossiblyMatchingDoc(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      specificIds.some(id => {\n        const doc = this._docs.get(id);\n\n        if (doc) {\n          return fn(doc, id) === false;\n        }\n      });\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    const old_doc = EJSON.clone(doc);\n\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResults(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResults(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResults(query, doc, old_doc);\n      }\n    });\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          const doc = EJSON.clone(fields);\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, fields, before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          const doc = this.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          const doc = EJSON.clone(fields);\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (!hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return result;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n            doc,\n            indices\n              ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n              : -1,\n            before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n            transform(doc),\n            oldDoc,\n            indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n          ? before\n            ? this.docs.indexOf(before)\n            : this.docs.size()\n          : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n          transform(EJSON.clone(this.docs.get(id))),\n          from,\n          to,\n          before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n            transform(doc),\n            transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  const handle = cursor.observeChanges(changeObserver.applyChange);\n\n  suppressed = false;\n\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResults = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n","import LocalCollection from './local_collection.js';\nimport {\n  compileDocumentSelector,\n  hasOwn,\n  nothingMatcher,\n} from './common.js';\n\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a 'selector' is the EJSON object representing a selector\n//  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a 'result object' is an object with a 'result' field and maybe\n//    distance and arrayIndices.\n//  - a 'branched value' is an object with a 'value' field and maybe\n//    'dontIterate' and 'arrayIndices'.\n//  - a 'document' is a top-level object that can be stored in a collection.\n//  - a 'lookup function' is a function that takes in a document and returns\n//    an array of 'branched values'.\n//  - a 'branched matcher' maps from an array of branched values to a result\n//    object.\n//  - an 'element matcher' maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nexport default class Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {};\n    // Set to true if compilation finds a $near.\n    this._hasGeoQuery = false;\n    // Set to true if compilation finds a $where.\n    this._hasWhere = false;\n    // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n    this._isSimple = true;\n    // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n    this._matchingDocument = undefined;\n    // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector);\n    // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  }\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n      this._recordPathUsed('');\n\n      return doc => ({result: !!selector.call(doc)});\n    }\n\n    // shorthand -- scalar _id\n    if (LocalCollection._selectorIsId(selector)) {\n      this._selector = {_id: selector};\n      this._recordPathUsed('_id');\n\n      return doc => ({result: EJSON.equals(doc._id, selector)});\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (Array.isArray(selector) ||\n        EJSON.isBinary(selector) ||\n        typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n\n    return compileDocumentSelector(selector, this, {isRoot: true});\n  }\n\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    }\n\n    // note that typeof(/x/) === \"object\"\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    }\n\n    // object\n    return 3;\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [\n      -1,  // (not a type)\n      1,   // number\n      2,   // string\n      3,   // object\n      4,   // array\n      5,   // binary\n      -1,  // deprecated\n      6,   // ObjectID\n      7,   // bool\n      8,   // Date\n      0,   // null\n      9,   // RegExp\n      -1,  // deprecated\n      100, // JS code\n      2,   // deprecated (symbol)\n      100, // JS code\n      1,   // 32-bit int\n      8,   // Mongo timestamp\n      1    // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    }\n\n    // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) { // Array\n      for (let i = 0; ; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) { // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  },\n};\n","import LocalCollection_ from './local_collection.js';\nimport Matcher from './matcher.js';\nimport Sorter from './sorter.js';\n\nLocalCollection = LocalCollection_;\nMinimongo = {\n    LocalCollection: LocalCollection_,\n    Matcher,\n    Sorter\n};\n","// ObserveHandle: the return value of a live query.\nexport default class ObserveHandle {}\n","import {\n  ELEMENT_OPERATORS,\n  equalityElementMatcher,\n  expandArraysInBranches,\n  hasOwn,\n  isOperatorObject,\n  makeLookupFunction,\n  regexpElementMatcher,\n} from './common.js';\n\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nexport default class Sorter {\n  constructor(spec, options = {}) {\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    const addSpecPart = (path, ascending) => {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(`unsupported sort key: ${path}`);\n      }\n\n      this._sortSpecParts.push({\n        ascending,\n        lookup: makeLookupFunction(path, {forSort: true}),\n        path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(element => {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (typeof spec === 'object') {\n      Object.keys(spec).forEach(key => {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(`Bad sort specification: ${JSON.stringify(spec)}`);\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      const selector = {};\n\n      this._sortSpecParts.forEach(spec => {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(\n      this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i))\n    );\n\n    // If you specify a matcher for this Sorter, _keyFilter may be set to a\n    // function which selects whether or not a given \"sort key\" (tuple of values\n    // for the different sort spec fields) is compatible with the selector.\n    this._keyFilter = null;\n\n    if (options.matcher) {\n      this._useWithMatcher(options.matcher);\n    }\n  }\n\n  getComparator(options) {\n    // If sort is specified or have no distances, just use the comparator from\n    // the source specification (which defaults to \"everything is equal\".\n    // issue #3599\n    // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n    // sort effectively overrides $near\n    if (this._sortSpecParts.length || !options || !options.distances) {\n      return this._getBaseComparator();\n    }\n\n    const distances = options.distances;\n\n    // Return a comparator which compares using $near distances.\n    return (a, b) => {\n      if (!distances.has(a._id)) {\n        throw Error(`Missing distance for ${a._id}`);\n      }\n\n      if (!distances.has(b._id)) {\n        throw Error(`Missing distance for ${b._id}`);\n      }\n\n      return distances.get(a._id) - distances.get(b._id);\n    };\n  }\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys(key1, key2) {\n    if (key1.length !== this._sortSpecParts.length ||\n        key2.length !== this._sortSpecParts.length) {\n      throw Error('Key has wrong length');\n    }\n\n    return this._keyComparator(key1, key2);\n  }\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc(doc, cb) {\n    if (this._sortSpecParts.length === 0) {\n      throw new Error('can\\'t generate keys without a spec');\n    }\n\n    const pathFromIndices = indices => `${indices.join(',')},`;\n\n    let knownPaths = null;\n\n    // maps index -> ({'' -> value} or {path -> value})\n    const valuesByIndexAndPath = this._sortSpecParts.map(spec => {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      let branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one null value.\n      if (!branches.length) {\n        branches = [{value: null}];\n      }\n\n      const element = Object.create(null);\n      let usedPaths = false;\n\n      branches.forEach(branch => {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1) {\n            throw Error('multiple branches but no array used?');\n          }\n\n          element[''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n\n        const path = pathFromIndices(branch.arrayIndices);\n\n        if (hasOwn.call(element, path)) {\n          throw Error(`duplicate path: ${path}`);\n        }\n\n        element[path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !hasOwn.call(knownPaths, path)) {\n          throw Error('cannot index parallel arrays');\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!hasOwn.call(element, '') &&\n            Object.keys(knownPaths).length !== Object.keys(element).length) {\n          throw Error('cannot index parallel arrays!');\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n\n        Object.keys(element).forEach(path => {\n          knownPaths[path] = true;\n        });\n      }\n\n      return element;\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      const soleKey = valuesByIndexAndPath.map(values => {\n        if (!hasOwn.call(values, '')) {\n          throw Error('no value in sole key case?');\n        }\n\n        return values[''];\n      });\n\n      cb(soleKey);\n\n      return;\n    }\n\n    Object.keys(knownPaths).forEach(path => {\n      const key = valuesByIndexAndPath.map(values => {\n        if (hasOwn.call(values, '')) {\n          return values[''];\n        }\n\n        if (!hasOwn.call(values, path)) {\n          throw Error('missing path?');\n        }\n\n        return values[path];\n      });\n\n      cb(key);\n    });\n  }\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator() {\n    if (this._sortFunction) {\n      return this._sortFunction;\n    }\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!this._sortSpecParts.length) {\n      return (doc1, doc2) => 0;\n    }\n\n    return (doc1, doc2) => {\n      const key1 = this._getMinKeyFromDoc(doc1);\n      const key2 = this._getMinKeyFromDoc(doc2);\n      return this._compareKeys(key1, key2);\n    };\n  }\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc(doc) {\n    let minKey = null;\n\n    this._generateKeysFromDoc(doc, key => {\n      if (!this._keyCompatibleWithSelector(key)) {\n        return;\n      }\n\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n\n      if (this._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    // This could happen if our key filter somehow filters out all the keys even\n    // though somehow the selector matches.\n    if (minKey === null) {\n      throw Error('sort selector found no keys in doc?');\n    }\n\n    return minKey;\n  }\n\n  _getPaths() {\n    return this._sortSpecParts.map(part => part.path);\n  }\n\n  _keyCompatibleWithSelector(key) {\n    return !this._keyFilter || this._keyFilter(key);\n  }\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator(i) {\n    const invert = !this._sortSpecParts[i].ascending;\n\n    return (key1, key2) => {\n      const compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      return invert ? -compare : compare;\n    };\n  }\n\n  // In MongoDB, if you have documents\n  //    {_id: 'x', a: [1, 10]} and\n  //    {_id: 'y', a: [5, 15]},\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n  // match the selector, and 5 comes before 10).\n  //\n  // The way this works is pretty subtle!  For example, if the documents\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n  // both follow this rule (y before x).  (ie, you do have to apply this\n  // through $elemMatch.)\n  //\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\n  // skip sort keys that don't match the selector. The logic here is pretty\n  // subtle and undocumented; we've gotten as close as we can figure out based\n  // on our understanding of Mongo's behavior.\n  _useWithMatcher(matcher) {\n    if (this._keyFilter) {\n      throw Error('called _useWithMatcher twice?');\n    }\n\n    // If we are only sorting by distance, then we're not going to bother to\n    // build a key filter.\n    // XXX figure out how geoqueries interact with this stuff\n    if (!this._sortSpecParts.length) {\n      return;\n    }\n\n    const selector = matcher._selector;\n\n    // If the user just passed a falsey selector to find(),\n    // then we can't get a key filter from it.\n    if (!selector) {\n      return;\n    }\n\n    // If the user just passed a literal function to find(), then we can't get a\n    // key filter from it.\n    if (selector instanceof Function) {\n      return;\n    }\n\n    const constraintsByPath = {};\n\n    this._sortSpecParts.forEach(spec => {\n      constraintsByPath[spec.path] = [];\n    });\n\n    Object.keys(selector).forEach(key => {\n      const subSelector = selector[key];\n\n      // XXX support $and and $or\n      const constraints = constraintsByPath[key];\n      if (!constraints) {\n        return;\n      }\n\n      // XXX it looks like the real MongoDB implementation isn't \"does the\n      // regexp match\" but \"does the value fall into a range named by the\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n      // \"does the regexp match\" is a good approximation.\n      if (subSelector instanceof RegExp) {\n        // As far as we can tell, using either of the options that both we and\n        // MongoDB support ('i' and 'm') disables use of the key filter. This\n        // makes sense: MongoDB mostly appears to be calculating ranges of an\n        // index to use, which means it only cares about regexps that match\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the\n        // literal prefix of the regexp from actually meaning one range.\n        if (subSelector.ignoreCase || subSelector.multiline) {\n          return;\n        }\n\n        constraints.push(regexpElementMatcher(subSelector));\n        return;\n      }\n\n      if (isOperatorObject(subSelector)) {\n        Object.keys(subSelector).forEach(operator => {\n          const operand = subSelector[operator];\n\n          if (['$lt', '$lte', '$gt', '$gte'].includes(operator)) {\n            // XXX this depends on us knowing that these operators don't use any\n            // of the arguments to compileElementSelector other than operand.\n            constraints.push(\n              ELEMENT_OPERATORS[operator].compileElementSelector(operand)\n            );\n          }\n\n          // See comments in the RegExp block above.\n          if (operator === '$regex' && !subSelector.$options) {\n            constraints.push(\n              ELEMENT_OPERATORS.$regex.compileElementSelector(\n                operand,\n                subSelector\n              )\n            );\n          }\n\n          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n        });\n\n        return;\n      }\n\n      // OK, it's an equality thing.\n      constraints.push(equalityElementMatcher(subSelector));\n    });\n\n    // It appears that the first sort field is treated differently from the\n    // others; we shouldn't create a key filter unless the first sort field is\n    // restricted, though after that point we can restrict the other sort fields\n    // or not as we wish.\n    if (!constraintsByPath[this._sortSpecParts[0].path].length) {\n      return;\n    }\n\n    this._keyFilter = key =>\n      this._sortSpecParts.every((specPart, index) =>\n        constraintsByPath[specPart.path].every(fn => fn(key[index]))\n      )\n    ;\n  }\n}\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return (a, b) => {\n    for (let i = 0; i < comparatorArray.length; ++i) {\n      const compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n"]}}]