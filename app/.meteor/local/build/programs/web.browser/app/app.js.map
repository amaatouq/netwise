{"version":3,"sources":["meteor://ðŸ’»app/imports/startup/both/index.js","meteor://ðŸ’»app/imports/startup/client/index.js","meteor://ðŸ’»app/imports/startup/client/routes.js","meteor://ðŸ’»app/imports/ui/components/PlayerProfile.jsx","meteor://ðŸ’»app/imports/ui/components/Task.jsx","meteor://ðŸ’»app/imports/ui/components/TaskStimulus.jsx","meteor://ðŸ’»app/imports/ui/interfaceFakeData/data.js","meteor://ðŸ’»app/imports/ui/pages/Round.jsx","meteor://ðŸ’»app/client/main.js"],"names":["module","watch","require","export","renderRoutes","Route","Router","v","createBrowserHistory","React","Round","browserHistory","PlayerProfile","PropTypes","render","currentPlayer","props","data","avatar","_id","score","Component","propTypes","object","isRequired","Task","TaskStimulus","task","stage","console","log","string","taskPath","currentStage","rounds","game","Random","avatars","Tasks","_","shuffle","correctAnswer","difficulty","nPlayers","players","times","push","id","createdAt","Date","alters","i","random","maxOutDegree","forEach","player","Array","from","Set","sample","removeElement","choice","nRounds","stages","treatments","currentRoundId","array","element","filter","e","allRounds","currentRound","Meteor","startup","document","getElementById"],"mappings":";;;;;;;;AAAA;AACA,oH;;;;;;;;;;;ACDAA,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,iF;;;;;;;;;;;ACAAF,OAAOG,MAAP,CAAc;AAACC,gBAAa;AAAA,WAAIA,YAAJ;AAAA;AAAd,CAAd;AAA+C,IAAIC,cAAJ;AAAA,IAAUC,eAAV;AAAiBN,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,OAAD,YAAOE,CAAP,EAAS;AAACF,YAAME,CAAN;AAAQ,GAAlB;AAAmBD,QAAnB,YAA0BC,CAA1B,EAA4B;AAACD,aAAOC,CAAP;AAAS;AAAtC,CAArC,EAA6E,CAA7E;AAAgF,IAAIC,6BAAJ;AAAyBR,OAAOC,KAAP,CAAaC,QAAQ,SAAR,CAAb,EAAgC;AAACM,sBAAD,YAAsBD,CAAtB,EAAwB;AAACC,2BAAqBD,CAArB;AAAuB;AAAhD,CAAhC,EAAkF,CAAlF;AAAqF,IAAIE,cAAJ;AAAUT,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAAA,uBAASK,CAAT,EAAW;AAACE,YAAMF,CAAN;AAAQ;AAApB,CAA9B,EAAoD,CAApD;AAAuD,IAAIG,cAAJ;AAAUV,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAAA,uBAASK,CAAT,EAAW;AAACG,YAAMH,CAAN;AAAQ;AAApB,CAA7C,EAAmE,CAAnE;AAMzU,IAAMI,iBAAiBH,sBAAvB;;AACO,IAAMJ,eAAe;AAAA,SAC1B;AAAC,UAAD;AAAA;AAAQ,eAASO;AAAjB;AACE;AAAA;AAAA;AAAK,mBAAU;AAAf;AACE;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA;AADF,OADF;AAKE;AAAA;AAAA;AAEE,4BAAC,KAAD;AAAO,gBAAK,GAAZ;AAAgB,qBAAWD;AAA3B;AAFF,OALF;AAUE;AAAA;AAAA;AAAA;AAAA;AAVF;AADF,GAD0B;AAAA,CAArB,mH;;;;;;;;;;;;;;;;;;;;;;;;;ACPPV,OAAOG,MAAP,CAAc;AAAC,aAAQ;AAAA,WAAIS,aAAJ;AAAA;AAAT,CAAd;AAA2C,IAAIC,kBAAJ;AAAcb,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAAA,uBAASK,CAAT,EAAW;AAACM,gBAAUN,CAAV;AAAY;AAAxB,CAAnC,EAA6D,CAA7D;AAAgE,IAAIE,cAAJ;AAAUT,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAAA,uBAASK,CAAT,EAAW;AAACE,YAAMF,CAAN;AAAQ;AAApB,CAA9B,EAAoD,CAApD;;IAG9GK,a;;;;;;;;0BACnBE,M;sBAAS;AAAA,UACCC,aADD,GACmB,KAAKC,KADxB,CACCD,aADD;AAGP,aACE;AAAA;AAAA;AAAO,qBAAU;AAAjB;AACE;AAAA;AAAA;AAAA;AAAA,SADF;AAEE;AAAK,eAAKA,cAAcE,IAAd,CAAmBC,MAA7B;AAAqC,qBAAU;AAA/C,UAFF;AAIE;AAAA;AAAA;AAAA;AAASH,wBAAcI;AAAvB,SAJF;AAWE;AAAA;AAAA;AAAK,uBAAU;AAAf;AACE;AAAA;AAAA;AAAA;AAAA,WADF;AAEE;AAAA;AAAA;AAAOJ,0BAAcE,IAAd,CAAmBG;AAA1B;AAFF;AAXF,OADF;AAkBD;;;;;;EAtBwCX,MAAMY,S;;AAyBjDT,cAAcU,SAAd,GAA0B;AACxB;AACA;AACAP,iBAAeF,UAAUU,MAAV,CAAiBC;AAHR,CAA1B,oH;;;;;;;;;;;;;;;;;;;;;;;;;AC5BAxB,OAAOG,MAAP,CAAc;AAAC,aAAQ;AAAA,WAAIsB,IAAJ;AAAA;AAAT,CAAd;AAAkC,IAAIZ,kBAAJ;AAAcb,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAAA,uBAASK,CAAT,EAAW;AAACM,gBAAUN,CAAV;AAAY;AAAxB,CAAnC,EAA6D,CAA7D;AAAgE,IAAIE,cAAJ;AAAUT,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAAA,uBAASK,CAAT,EAAW;AAACE,YAAMF,CAAN;AAAQ;AAApB,CAA9B,EAAoD,CAApD;AAAuD,IAAImB,qBAAJ;AAAiB1B,OAAOC,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAAA,uBAASK,CAAT,EAAW;AAACmB,mBAAanB,CAAb;AAAe;AAA3B,CAAvC,EAAoE,CAApE;;IAI7KkB,I;;;;;;;;iBACnBX,M;sBAAS;AACP,UAAMa,OAAO,KAAKX,KAAL,CAAWW,IAAxB;AACA,UAAMC,QAAQ,KAAKZ,KAAL,CAAWY,KAAzB;AACAC,cAAQC,GAAR,CAAY,uBAAZ,EAAqCH,IAArC;AACAE,cAAQC,GAAR,CAAY,wBAAZ,EAAsCF,KAAtC;AAEA,aACE;AAAA;AAAA;AAAM,qBAAU;AAAhB;AACI,4BAAC,YAAD;AAAc,gBAAMD;AAApB;AADJ,OADF;AAKD;;;;;;EAZ+BlB,MAAMY,S;;AAexCI,KAAKH,SAAL,GAAiB;AACf;AACAK,QAAMd,UAAUU,MAAV,CAAiBC,UAFR;AAGfI,SAAOf,UAAUkB,MAAV,CAAiBP;AAHT,CAAjB,oH;;;;;;;;;;;;;;;;;;;;;;;;;ACnBAxB,OAAOG,MAAP,CAAc;AAAC,aAAQ;AAAA,WAAIuB,YAAJ;AAAA;AAAT,CAAd;AAA0C,IAAIb,kBAAJ;AAAcb,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAAA,uBAASK,CAAT,EAAW;AAACM,gBAAUN,CAAV;AAAY;AAAxB,CAAnC,EAA6D,CAA7D;AAAgE,IAAIE,cAAJ;AAAUT,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAAA,uBAASK,CAAT,EAAW;AAACE,YAAMF,CAAN;AAAQ;AAApB,CAA9B,EAAoD,CAApD;;IAI7GmB,Y;;;;;;;;yBAEnBZ,M;sBAAQ;AACNe,cAAQC,GAAR,CAAY,UAAZ,EAAuB,KAAKd,KAAL,CAAWW,IAAX,CAAgBV,IAAhB,CAAqBe,QAA5C;AACA,aAAQ;AAAK,aAAK,KAAKhB,KAAL,CAAWW,IAAX,CAAgBV,IAAhB,CAAqBe,QAA/B;AAAyC,mBAAU;AAAnD,QAAR;AACD;;;;;;EALuCvB,MAAMY,S;;AAShDK,aAAaJ,SAAb,GAAyB;AACvBK,QAAMd,UAAUU;AADO,CAAzB,oH;;;;;;;;;;;ACbAvB,OAAOG,MAAP,CAAc;AAACY,iBAAc;AAAA,WAAIA,aAAJ;AAAA,GAAf;AAAiCkB,gBAAa;AAAA,WAAIA,YAAJ;AAAA,GAA9C;AAA+DC,UAAO;AAAA,WAAIA,MAAJ;AAAA,GAAtE;AAAiFC,QAAK;AAAA,WAAIA,IAAJ;AAAA;AAAtF,CAAd;AAA+G,IAAIC,eAAJ;AAAWpC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACkC,QAAD,YAAQ7B,CAAR,EAAU;AAAC6B,aAAO7B,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAE1H;AACA,IAAM8B,UAAU,CACd,kBADc,EAEd,mBAFc,EAGd,kBAHc,EAId,kBAJc,EAKd,kBALc,CAAhB,C,CAUA;;;;AAGA,IAAMC,QAAQC,EAAEC,OAAF,CAAU,CACtB;AACErB,OAAK,GADP;AAEEF,QAAM;AAAEe,cAAU,cAAZ;AAA4BS,mBAAe,GAA3C;AAAgDC,gBAAY;AAA5D;AAFR,CADsB,EAKtB;AACEvB,OAAK,GADP;AAEEF,QAAM;AAAEe,cAAU,cAAZ;AAA4BS,mBAAe,GAA3C;AAAgDC,gBAAY;AAA5D;AAFR,CALsB,EAStB;AACEvB,OAAK,GADP;AAEEF,QAAM;AAAEe,cAAU,cAAZ;AAA4BS,mBAAe,GAA3C;AAAgDC,gBAAY;AAA5D;AAFR,CATsB,EAatB;AACEvB,OAAK,GADP;AAEEF,QAAM;AAAEe,cAAU,cAAZ;AAA4BS,mBAAe,IAA3C;AAAiDC,gBAAY;AAA7D;AAFR,CAbsB,CAAV,CAAd,C,CAqBA;;QAGA;;;AACA,IAAMC,WAAW,CAAjB;AACA,IAAIC,UAAU,EAAd,C,CACA;;AACAL,EAAEM,KAAF,CAAQF,QAAR,EAAkB,aAAK;AACrBC,UAAQE,IAAR,CAAa;AACX3B,SAAKiB,OAAOW,EAAP,EADM;AAEXC,eAAW,IAAIC,IAAJ,EAFA;AAGXC,YAAQ,IAHG;AAIXjC,UAAM;AACJC,cAAQmB,QAAQc,CAAR,CADJ;AAEJ/B,aAAOmB,EAAEa,MAAF,CAAS,CAAT,EAAY,GAAZ;AAFH;AAJK,GAAb;AASD,CAVD,E,CAWA;AACA;;;AACA,IAAMC,eAAe,CAArB,C,CAAwB;;AACxBT,QAAQU,OAAR,CAAgB,kBAAU;AACxBC,SAAOL,MAAP,GAAgBM,MAAMC,IAAN,CACd,IAAIC,GAAJ,CAAQnB,EAAEoB,MAAF,CAASC,cAAchB,OAAd,EAAuBW,MAAvB,CAAT,EAAyCF,YAAzC,CAAR,CADc,CAAhB;AAGD,CAJD,E,CAKA;;AACO,IAAMtC,gBAAgBqB,OAAOyB,MAAP,CAAcjB,OAAd,CAAtB;AAGP;;;;;;;;;EAUA,IAAMkB,UAAU,CAAhB,C,CAAmB;AACnB;;AACA,IAAMC,SAAS,CAAC,SAAD,EAAY,aAAZ,EAA2B,SAA3B,CAAf,C,CACA;;AACO,IAAM9B,eAAe8B,OAAO,CAAP,CAArB;AACA,IAAI7B,SAAS,EAAb;;AACPK,EAAEM,KAAF,CAAQiB,OAAR,EAAgB,aAAI;AAClB5B,SAAOY,IAAP,CAAY;AACV3B,SAAKgC,CADK;AAEVH,eAAW,IAAIC,IAAJ,EAFD;AAGVc,kBAHU;AAIV9B,kBAAcA,YAJJ;AAKVhB,UAAM;AAAEU,YAAMW,MAAMa,CAAN;AAAR;AALI,GAAZ;AAOD,CARD,E,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,IAAMhB,OAAO;AAAChB,OAAIiB,OAAOW,EAAP,EAAL;AAAkBiB,cAAY,EAA9B;AAAkCpB,kBAAlC;AAA0CV,gBAA1C;AAAiD+B,kBAAe1B,EAAEa,MAAF,CAAS,CAAT,EAAWU,UAAQ,CAAnB;AAAhE,CAAb;;AAIP;AACA;AACA,SAASF,aAAT,CAAuBM,KAAvB,EAA8BC,OAA9B,EAAuC;AACrC,SAAOD,MAAME,MAAN,CAAa;AAAA,WAAKC,MAAMF,OAAX;AAAA,GAAb,CAAP;AACD;;AAAA,sH;;;;;;;;;;;;;;;;;;;;;;;;;AC7GDnE,OAAOG,MAAP,CAAc;AAAC,aAAQ;AAAA,WAAIO,KAAJ;AAAA;AAAT,CAAd;AAAmC,IAAID,cAAJ;AAAUT,OAAOC,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAAA,uBAASK,CAAT,EAAW;AAACE,YAAMF,CAAN;AAAQ;AAApB,CAA9B,EAAoD,CAApD;AAAuD,IAAI6B,eAAJ;AAAWpC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACkC,QAAD,YAAQ7B,CAAR,EAAU;AAAC6B,aAAO7B,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIK,sBAAJ;AAAkBZ,OAAOC,KAAP,CAAaC,QAAQ,6BAAR,CAAb,EAAoD;AAAA,uBAASK,CAAT,EAAW;AAACK,oBAAcL,CAAd;AAAgB;AAA5B,CAApD,EAAkF,CAAlF;AAAqF,IAAI4B,aAAJ;AAAA,IAASpB,sBAAT;AAAuBf,OAAOC,KAAP,CAAaC,QAAQ,2BAAR,CAAb,EAAkD;AAACiC,MAAD,YAAM5B,CAAN,EAAQ;AAAC4B,WAAK5B,CAAL;AAAO,GAAhB;AAAiBQ,eAAjB,YAA+BR,CAA/B,EAAiC;AAACQ,oBAAcR,CAAd;AAAgB;AAAlD,CAAlD,EAAsG,CAAtG;AAAyG,IAAIkB,aAAJ;AAASzB,OAAOC,KAAP,CAAaC,QAAQ,oBAAR,CAAb,EAA2C;AAAA,uBAASK,CAAT,EAAW;AAACkB,WAAKlB,CAAL;AAAO;AAAnB,CAA3C,EAAgE,CAAhE;;IAMzYG,K;;;;;;;;kBACnBI,M;sBAAS;AACP,UAAMwD,YAAYnC,KAAKD,MAAvB;AACA,UAAMqC,eAAeD,UAAUnC,KAAK8B,cAAf,CAArB;AAEA,aACE;AAAA;AAAA;AAAK,qBAAU;AAAf;AAIE,4BAAC,aAAD;AAAe,yBAAelD;AAA9B,UAJF;AAOE,4BAAC,IAAD;AAAM,gBAAMwD,aAAatD,IAAb,CAAkBU,IAA9B;AAAoC,iBAAO4C,aAAatC;AAAxD;AAPF,OADF;AAWD;;;;;;EAhBgCxB,MAAMY,S;;;;;;;;;;;ACNzCrB,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb;AAA+CF,OAAOC,KAAP,CAAaC,QAAQ,yBAAR,CAAb;AAAiD,IAAIY,eAAJ;AAAWd,OAAOC,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACY,QAAD,YAAQP,CAAR,EAAU;AAACO,aAAOP,CAAP;AAAS;AAApB,CAAlC,EAAwD,CAAxD;AAA2D,IAAIH,qBAAJ;AAAiBJ,OAAOC,KAAP,CAAaC,QAAQ,kCAAR,CAAb,EAAyD;AAACE,cAAD,YAAcG,CAAd,EAAgB;AAACH,mBAAaG,CAAb;AAAe;AAAhC,CAAzD,EAA2F,CAA3F;AAQvLiE,OAAOC,OAAP,CAAe,YAAM;AACnB3D,SAAOV,cAAP,EAAuBsE,SAASC,cAAT,CAAwB,KAAxB,CAAvB;AACD,CAFD,oH","file":"/app.js","sourcesContent":["// Import modules used by both client and server through a single index entry point\n// e.g. useraccounts configuration file.\n","// Import client startup through a single index entry point\n\nimport \"./routes.js\";\n","import { Route, Router } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\nimport React from \"react\";\n\nimport Round from \"../../ui/pages/Round\";\n\nconst browserHistory = createBrowserHistory();\nexport const renderRoutes = () => (\n  <Router history={browserHistory}>\n    <div className=\"grid\">\n      <header>\n        <h1>Netwise</h1>\n      </header>\n\n      <main>\n        {/* <Route path=\"/\" component={Home} /> */}\n        <Route path=\"/\" component={Round} />\n      </main>\n\n      <footer>footer</footer>\n    </div>\n  </Router>\n);\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nexport default class PlayerProfile extends React.Component {\n  render() {\n    const { currentPlayer } = this.props;\n\n    return (\n      <aside className=\"player-profile\">\n        <h3>Your Profile</h3>\n        <img src={currentPlayer.data.avatar} className=\"profile-avatar\" />\n  \n        <div>ID:{currentPlayer._id}</div>\n        \n  \n        {/*TODO: Why this does not work and breaks it?*/}\n        {/*<div>created at: {currentPlayer.createdAt}</div>*/}\n  \n  \n        <div className=\"profile-score\">\n          <h4>Total score</h4>\n          <span>{currentPlayer.data.score}</span>\n        </div>\n      </aside>\n    );\n  }\n}\n\nPlayerProfile.propTypes = {\n  // Current player with all the attribute about the player:\n  //Things include: Avatar, Score, Bonus, Gender Team membership (Whether came from Mturk or Crowdflower)\n  currentPlayer: PropTypes.object.isRequired\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport TaskStimulus from \"./TaskStimulus\";\n\nexport default class Task extends React.Component {\n  render() {\n    const task = this.props.task;\n    const stage = this.props.stage;\n    console.log(\"task from inside task\", task);\n    console.log(\"stage from inside task\", stage);\n\n    return (\n      <main className=\"task\">\n          <TaskStimulus task={task} />\n      </main>\n    );\n  }\n}\n\nTask.propTypes = {\n  // Current round index\n  task: PropTypes.object.isRequired,\n  stage: PropTypes.string.isRequired\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\n\nexport default class TaskStimulus extends React.Component {\n  \n  render(){\n    console.log('taskPath',this.props.task.data.taskPath);\n    return (<img src={this.props.task.data.taskPath} className=\"task-image\"/>)\n  }\n\n}\n\nTaskStimulus.propTypes = {\n  task: PropTypes.object,\n};\n\n","import { Random } from \"meteor/random\";\n\n//list of avatars\nconst avatars = [\n  \"/avatars/bee.png\",\n  \"/avatars/bird.png\",\n  \"/avatars/cat.png\",\n  \"/avatars/cow.png\",\n  \"/avatars/pig.png\"\n];\n\n\n\n/*\nCreating dummy Tasks data: we will shuffle them at the game level\n*/\nconst Tasks = _.shuffle([\n  {\n    _id: \"1\",\n    data: { taskPath: \"/tasks/1.png\", correctAnswer: 0.1, difficulty: \"easy\" }\n  },\n  {\n    _id: \"2\",\n    data: { taskPath: \"/tasks/2.png\", correctAnswer: 0.6, difficulty: \"easy\" }\n  },\n  {\n    _id: \"3\",\n    data: { taskPath: \"/tasks/3.png\", correctAnswer: 0.3, difficulty: \"easy\" }\n  },\n  {\n    _id: \"4\",\n    data: { taskPath: \"/tasks/4.png\", correctAnswer: 0.54, difficulty: \"easy\" }\n  }\n]);\n\n\n\n/*\nCreating dummy players data: this will be provided to us by netwise\n*/\n//create empty list of players\nconst nPlayers = 3;\nlet players = [];\n//fill the list with random players information\n_.times(nPlayers, i => {\n  players.push({\n    _id: Random.id(),\n    createdAt: new Date(),\n    alters: null,\n    data: {\n      avatar: avatars[i],\n      score: _.random(0, 123)\n    }\n  });\n});\n//add alters\n//todo: we need to think of the network structure. What if it changes every round? how can we keep a history of the entire networks etc.\nconst maxOutDegree = 2; //maximum number of out going degree (i.e., how many 'alters' the 'ego' is connected to\nplayers.forEach(player => {\n  player.alters = Array.from(\n    new Set(_.sample(removeElement(players, player), maxOutDegree))\n  );\n});\n//select one players at random to be the currentPlayer\nexport const currentPlayer = Random.choice(players);\n\n\n/*\nCreating dummy round data: this will be created at the initiation of the game\nTODO: this round structure I do not like. The main unit of analysis is the user per round  for example:\n    Players might have a different task for the same round\n    We want to know the answer for each player per round\n    We want to know the alters for each player per round\n    What about if different player types (dictator, recipient) have different number of stages?\n    Therefore: we need better PlayerRound data structure\n    For now: I'll just assume that the Rounds object is for the current player (filtered)\n*/\nconst nRounds = 3; //the number of rounds in this game\n//stages per round\nconst stages = [\"initial\", \"interactive\", \"outcome\"];\n//const currentStage = Random.choice(stages);//random stage\nexport const currentStage = stages[0];//explicitly chosen stage\nexport let rounds = [];\n_.times(nRounds,i =>{\n  rounds.push({\n    _id: i,\n    createdAt: new Date(),\n    stages,\n    currentStage: currentStage,\n    data: { task: Tasks[i]}\n  })\n});\n\n\n//TODO: can treatment be an array to describe factor experimental design?\n//Imagine we have two factors: number of players [high, mid, low] and network status [static,dynamic]\n//Then we will have 6 treatments: [high,static], [high, dynamic], [mid,static],[mid,dynamic],[low,static],[low,dynamic]\n//notice that the choice of high/low effects the recruitment of participants (number of players)\n//However static/dynamic effects the stage 'round outcome'\n//It makes sense that in the round outcome I just have to check static/dynamic without checking\n//whether the number of players is high/low .. also, at recruitment, I should be able to specify the number of people I want, regardless of static/dynamic\nexport const game = {_id:Random.id(), treatments: [], players,rounds,currentRoundId:_.random(0,nRounds-1)};\n\n\n\n//Helper functions to create the dummy data\n//function to remove element from an array in an non-mutable way\nfunction removeElement(array, element) {\n  return array.filter(e => e !== element);\n};\n","import React from \"react\";\nimport { Random } from \"meteor/random\";\nimport PlayerProfile from \"../components/PlayerProfile\";\nimport { game, currentPlayer } from \"../interfaceFakeData/data\";\nimport Task from \"../components/Task\";\n\nexport default class Round extends React.Component {\n  render() {\n    const allRounds = game.rounds;\n    const currentRound = allRounds[game.currentRoundId];\n\n    return (\n      <div className=\"round\">\n        {/*todo: here should go the roundNavigation*/}\n\n        {/*I do not want the current player profile to update until the next round (static within round, changes across rounds)*/}\n        <PlayerProfile currentPlayer={currentPlayer} />\n\n        \n        <Task task={currentRound.data.task} stage={currentRound.currentStage} />\n      </div>\n    );\n  }\n}\n","// Client entry point, imports all client code\n\nimport \"/imports/startup/both\";\nimport \"/imports/startup/client\";\n\nimport { render } from \"react-dom\";\nimport { renderRoutes } from \"../imports/startup/client/routes\";\n\nMeteor.startup(() => {\n  render(renderRoutes(), document.getElementById(\"app\"));\n});\n"]}