[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Mongo = Package.mongo.Mongo;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\n\n/* Package-scope variables */\nvar CollectionHooks;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/matb33_collection-hooks/collection-hooks.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* global Package Meteor Mongo LocalCollection CollectionHooks _ EJSON */                                             // 1\n/* eslint-disable no-proto, no-native-reassign */                                                                     // 2\n                                                                                                                      // 3\n// Relevant AOP terminology:                                                                                          // 4\n// Aspect: User code that runs before/after (hook)                                                                    // 5\n// Advice: Wrapper code that knows when to call user code (aspects)                                                   // 6\n// Pointcut: before/after                                                                                             // 7\n                                                                                                                      // 8\nvar advices = {}                                                                                                      // 9\nvar Tracker = Package.tracker && Package.tracker.Tracker || Package.deps.Deps                                         // 10\nvar publishUserId = Meteor.isServer && new Meteor.EnvironmentVariable()                                               // 11\n                                                                                                                      // 12\nCollectionHooks = {                                                                                                   // 13\n  defaults: {                                                                                                         // 14\n    before: {insert: {}, update: {}, remove: {}, upsert: {}, find: {}, findOne: {}, all: {}},                         // 15\n    after: {insert: {}, update: {}, remove: {}, find: {}, findOne: {}, all: {}},                                      // 16\n    all: {insert: {}, update: {}, remove: {}, find: {}, findOne: {}, all: {}}                                         // 17\n  },                                                                                                                  // 18\n  directEnv: new Meteor.EnvironmentVariable(),                                                                        // 19\n  directOp: function directOp (func) {                                                                                // 20\n    return this.directEnv.withValue(true, func)                                                                       // 21\n  },                                                                                                                  // 22\n  hookedOp: function hookedOp (func) {                                                                                // 23\n    return this.directEnv.withValue(false, func)                                                                      // 24\n  }                                                                                                                   // 25\n}                                                                                                                     // 26\n                                                                                                                      // 27\nCollectionHooks.getUserId = function getUserId () {                                                                   // 28\n  var userId                                                                                                          // 29\n                                                                                                                      // 30\n  if (Meteor.isClient) {                                                                                              // 31\n    Tracker.nonreactive(function () {                                                                                 // 32\n      userId = Meteor.userId && Meteor.userId()                                                                       // 33\n    })                                                                                                                // 34\n  }                                                                                                                   // 35\n                                                                                                                      // 36\n  if (Meteor.isServer) {                                                                                              // 37\n    try {                                                                                                             // 38\n      // Will throw an error unless within method call.                                                               // 39\n      // Attempt to recover gracefully by catching:                                                                   // 40\n      userId = Meteor.userId && Meteor.userId()                                                                       // 41\n    } catch (e) {}                                                                                                    // 42\n                                                                                                                      // 43\n    if (!userId) {                                                                                                    // 44\n      // Get the userId if we are in a publish function.                                                              // 45\n      userId = publishUserId.get()                                                                                    // 46\n    }                                                                                                                 // 47\n  }                                                                                                                   // 48\n                                                                                                                      // 49\n  return userId                                                                                                       // 50\n}                                                                                                                     // 51\n                                                                                                                      // 52\nCollectionHooks.extendCollectionInstance = function extendCollectionInstance (self, constructor) {                    // 53\n  // Offer a public API to allow the user to define aspects                                                           // 54\n  // Example: collection.before.insert(func);                                                                         // 55\n  _.each(['before', 'after'], function (pointcut) {                                                                   // 56\n    _.each(advices, function (advice, method) {                                                                       // 57\n      if (advice === 'upsert' && pointcut === 'after') return                                                         // 58\n                                                                                                                      // 59\n      Meteor._ensure(self, pointcut, method)                                                                          // 60\n      Meteor._ensure(self, '_hookAspects', method)                                                                    // 61\n                                                                                                                      // 62\n      self._hookAspects[method][pointcut] = []                                                                        // 63\n      self[pointcut][method] = function (aspect, options) {                                                           // 64\n        var len = self._hookAspects[method][pointcut].push({                                                          // 65\n          aspect: aspect,                                                                                             // 66\n          options: CollectionHooks.initOptions(options, pointcut, method)                                             // 67\n        })                                                                                                            // 68\n                                                                                                                      // 69\n        return {                                                                                                      // 70\n          replace: function (aspect, options) {                                                                       // 71\n            self._hookAspects[method][pointcut].splice(len - 1, 1, {                                                  // 72\n              aspect: aspect,                                                                                         // 73\n              options: CollectionHooks.initOptions(options, pointcut, method)                                         // 74\n            })                                                                                                        // 75\n          },                                                                                                          // 76\n          remove: function () {                                                                                       // 77\n            self._hookAspects[method][pointcut].splice(len - 1, 1)                                                    // 78\n          }                                                                                                           // 79\n        }                                                                                                             // 80\n      }                                                                                                               // 81\n    })                                                                                                                // 82\n  })                                                                                                                  // 83\n                                                                                                                      // 84\n  // Offer a publicly accessible object to allow the user to define                                                   // 85\n  // collection-wide hook options.                                                                                    // 86\n  // Example: collection.hookOptions.after.update = {fetchPrevious: false};                                           // 87\n  self.hookOptions = EJSON.clone(CollectionHooks.defaults)                                                            // 88\n                                                                                                                      // 89\n  // Wrap mutator methods, letting the defined advice do the work                                                     // 90\n  _.each(advices, function (advice, method) {                                                                         // 91\n    var collection = Meteor.isClient || method === 'upsert' ? self : self._collection                                 // 92\n                                                                                                                      // 93\n    // Store a reference to the original mutator method                                                               // 94\n    var _super = collection[method]                                                                                   // 95\n                                                                                                                      // 96\n    Meteor._ensure(self, 'direct', method)                                                                            // 97\n    self.direct[method] = function () {                                                                               // 98\n      var args = arguments                                                                                            // 99\n      return CollectionHooks.directOp(function () {                                                                   // 100\n        return constructor.prototype[method].apply(self, args)                                                        // 101\n      })                                                                                                              // 102\n    }                                                                                                                 // 103\n                                                                                                                      // 104\n    collection[method] = function () {                                                                                // 105\n      if (CollectionHooks.directEnv.get() === true) {                                                                 // 106\n        return _super.apply(collection, arguments)                                                                    // 107\n      }                                                                                                               // 108\n                                                                                                                      // 109\n      // NOTE: should we decide to force `update` with `{upsert:true}` to use                                         // 110\n      // the `upsert` hooks, this is what will accomplish it. It's important to                                       // 111\n      // realize that Meteor won't distinguish between an `update` and an                                             // 112\n      // `insert` though, so we'll end up with `after.update` getting called                                          // 113\n      // even on an `insert`. That's why we've chosen to disable this for now.                                        // 114\n      // if (method === \"update\" && _.isObject(arguments[2]) && arguments[2].upsert) {                                // 115\n      //   method = \"upsert\";                                                                                         // 116\n      //   advice = CollectionHooks.getAdvice(method);                                                                // 117\n      // }                                                                                                            // 118\n                                                                                                                      // 119\n      return advice.call(this,                                                                                        // 120\n        CollectionHooks.getUserId(),                                                                                  // 121\n        _super,                                                                                                       // 122\n        self,                                                                                                         // 123\n        method === 'upsert' ? {                                                                                       // 124\n          insert: self._hookAspects.insert || {},                                                                     // 125\n          update: self._hookAspects.update || {},                                                                     // 126\n          upsert: self._hookAspects.upsert || {}                                                                      // 127\n        } : self._hookAspects[method] || {},                                                                          // 128\n        function (doc) {                                                                                              // 129\n          return (                                                                                                    // 130\n            _.isFunction(self._transform)                                                                             // 131\n            ? function (d) { return self._transform(d || doc) }                                                       // 132\n            : function (d) { return d || doc }                                                                        // 133\n          )                                                                                                           // 134\n        },                                                                                                            // 135\n        _.toArray(arguments),                                                                                         // 136\n        false                                                                                                         // 137\n      )                                                                                                               // 138\n    }                                                                                                                 // 139\n  })                                                                                                                  // 140\n}                                                                                                                     // 141\n                                                                                                                      // 142\nCollectionHooks.defineAdvice = function defineAdvice (method, advice) {                                               // 143\n  advices[method] = advice                                                                                            // 144\n}                                                                                                                     // 145\n                                                                                                                      // 146\nCollectionHooks.getAdvice = function getAdvice (method) {                                                             // 147\n  return advices[method]                                                                                              // 148\n}                                                                                                                     // 149\n                                                                                                                      // 150\nCollectionHooks.initOptions = function initOptions (options, pointcut, method) {                                      // 151\n  return CollectionHooks.extendOptions(CollectionHooks.defaults, options, pointcut, method)                           // 152\n}                                                                                                                     // 153\n                                                                                                                      // 154\nCollectionHooks.extendOptions = function extendOptions (source, options, pointcut, method) {                          // 155\n  options = _.extend(options || {}, source.all.all)                                                                   // 156\n  options = _.extend(options, source[pointcut].all)                                                                   // 157\n  options = _.extend(options, source.all[method])                                                                     // 158\n  options = _.extend(options, source[pointcut][method])                                                               // 159\n  return options                                                                                                      // 160\n}                                                                                                                     // 161\n                                                                                                                      // 162\nCollectionHooks.getDocs = function getDocs (collection, selector, options) {                                          // 163\n  var findOptions = {transform: null, reactive: false} // added reactive: false                                       // 164\n                                                                                                                      // 165\n  /*                                                                                                                  // 166\n  // No \"fetch\" support at this time.                                                                                 // 167\n  if (!this._validators.fetchAllFields) {                                                                             // 168\n    findOptions.fields = {};                                                                                          // 169\n    _.each(this._validators.fetch, function(fieldName) {                                                              // 170\n      findOptions.fields[fieldName] = 1;                                                                              // 171\n    });                                                                                                               // 172\n  }                                                                                                                   // 173\n  */                                                                                                                  // 174\n                                                                                                                      // 175\n  // Bit of a magic condition here... only \"update\" passes options, so this is                                        // 176\n  // only relevant to when update calls getDocs:                                                                      // 177\n  if (options) {                                                                                                      // 178\n    // This was added because in our case, we are potentially iterating over                                          // 179\n    // multiple docs. If multi isn't enabled, force a limit (almost like                                              // 180\n    // findOne), as the default for update without multi enabled is to affect                                         // 181\n    // only the first matched document:                                                                               // 182\n    if (!options.multi) {                                                                                             // 183\n      findOptions.limit = 1                                                                                           // 184\n    }                                                                                                                 // 185\n  }                                                                                                                   // 186\n                                                                                                                      // 187\n  // Unlike validators, we iterate over multiple docs, so use                                                         // 188\n  // find instead of findOne:                                                                                         // 189\n  return collection.find(selector, findOptions)                                                                       // 190\n}                                                                                                                     // 191\n                                                                                                                      // 192\n// This function contains a snippet of code pulled and modified from:                                                 // 193\n// ~/.meteor/packages/mongo-livedata/collection.js                                                                    // 194\n// It's contained in these utility functions to make updates easier for us in                                         // 195\n// case this code changes.                                                                                            // 196\nCollectionHooks.getFields = function getFields (mutator) {                                                            // 197\n  // compute modified fields                                                                                          // 198\n  var fields = []                                                                                                     // 199\n                                                                                                                      // 200\n  _.each(mutator, function (params, op) {                                                                             // 201\n    // ====ADDED START=======================                                                                         // 202\n    if (_.contains(['$set', '$unset', '$inc', '$push', '$pull', '$pop', '$rename', '$pullAll', '$addToSet', '$bit'], op)) {\n    // ====ADDED END=========================                                                                         // 204\n      _.each(_.keys(params), function (field) {                                                                       // 205\n        // treat dotted fields as if they are replacing their                                                         // 206\n        // top-level part                                                                                             // 207\n        if (field.indexOf('.') !== -1) {                                                                              // 208\n          field = field.substring(0, field.indexOf('.'))                                                              // 209\n        }                                                                                                             // 210\n                                                                                                                      // 211\n        // record the field we are trying to change                                                                   // 212\n        if (!_.contains(fields, field)) {                                                                             // 213\n          fields.push(field)                                                                                          // 214\n        }                                                                                                             // 215\n      })                                                                                                              // 216\n      // ====ADDED START=======================                                                                       // 217\n    } else {                                                                                                          // 218\n      fields.push(op)                                                                                                 // 219\n    }                                                                                                                 // 220\n    // ====ADDED END=========================                                                                         // 221\n  })                                                                                                                  // 222\n                                                                                                                      // 223\n  return fields                                                                                                       // 224\n}                                                                                                                     // 225\n                                                                                                                      // 226\nCollectionHooks.reassignPrototype = function reassignPrototype (instance, constr) {                                   // 227\n  var hasSetPrototypeOf = typeof Object.setPrototypeOf === 'function'                                                 // 228\n                                                                                                                      // 229\n  if (!constr) constr = typeof Mongo !== 'undefined' ? Mongo.Collection : Meteor.Collection                           // 230\n                                                                                                                      // 231\n  // __proto__ is not available in < IE11                                                                             // 232\n  // Note: Assigning a prototype dynamically has performance implications                                             // 233\n  if (hasSetPrototypeOf) {                                                                                            // 234\n    Object.setPrototypeOf(instance, constr.prototype)                                                                 // 235\n  } else if (instance.__proto__) {                                                                                    // 236\n    instance.__proto__ = constr.prototype                                                                             // 237\n  }                                                                                                                   // 238\n}                                                                                                                     // 239\n                                                                                                                      // 240\nCollectionHooks.wrapCollection = function wrapCollection (ns, as) {                                                   // 241\n  if (!as._CollectionConstructor) as._CollectionConstructor = as.Collection                                           // 242\n  if (!as._CollectionPrototype) as._CollectionPrototype = new as.Collection(null)                                     // 243\n                                                                                                                      // 244\n  var constructor = as._CollectionConstructor                                                                         // 245\n  var proto = as._CollectionPrototype                                                                                 // 246\n                                                                                                                      // 247\n  ns.Collection = function () {                                                                                       // 248\n    var ret = constructor.apply(this, arguments)                                                                      // 249\n    CollectionHooks.extendCollectionInstance(this, constructor)                                                       // 250\n    return ret                                                                                                        // 251\n  }                                                                                                                   // 252\n                                                                                                                      // 253\n  ns.Collection.prototype = proto                                                                                     // 254\n  ns.Collection.prototype.constructor = ns.Collection                                                                 // 255\n                                                                                                                      // 256\n  for (var prop in constructor) {                                                                                     // 257\n    if (constructor.hasOwnProperty(prop)) {                                                                           // 258\n      ns.Collection[prop] = constructor[prop]                                                                         // 259\n    }                                                                                                                 // 260\n  }                                                                                                                   // 261\n}                                                                                                                     // 262\n                                                                                                                      // 263\nCollectionHooks.modify = LocalCollection._modify                                                                      // 264\n                                                                                                                      // 265\nif (typeof Mongo !== 'undefined') {                                                                                   // 266\n  CollectionHooks.wrapCollection(Meteor, Mongo)                                                                       // 267\n  CollectionHooks.wrapCollection(Mongo, Mongo)                                                                        // 268\n} else {                                                                                                              // 269\n  CollectionHooks.wrapCollection(Meteor, Meteor)                                                                      // 270\n}                                                                                                                     // 271\n                                                                                                                      // 272\nif (Meteor.isServer) {                                                                                                // 273\n  var _publish = Meteor.publish                                                                                       // 274\n  Meteor.publish = function (name, func) {                                                                            // 275\n    return _publish.call(this, name, function () {                                                                    // 276\n      // This function is called repeatedly in publications                                                           // 277\n      var ctx = this                                                                                                  // 278\n      var args = arguments                                                                                            // 279\n      return publishUserId.withValue(ctx && ctx.userId, function () {                                                 // 280\n        return func.apply(ctx, args)                                                                                  // 281\n      })                                                                                                              // 282\n    })                                                                                                                // 283\n  }                                                                                                                   // 284\n                                                                                                                      // 285\n  // Make the above available for packages with hooks that want to determine                                          // 286\n  // whether they are running inside a publish function or not.                                                       // 287\n  CollectionHooks.isWithinPublish = function isWithinPublish () {                                                     // 288\n    return publishUserId.get() !== undefined                                                                          // 289\n  }                                                                                                                   // 290\n}                                                                                                                     // 291\n                                                                                                                      // 292\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/matb33_collection-hooks/insert.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* global CollectionHooks _ EJSON */                                                                                  // 1\n                                                                                                                      // 2\nCollectionHooks.defineAdvice('insert', function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this                                                                                                     // 4\n  var ctx = {context: self, _super: _super, args: args}                                                               // 5\n  var callback = _.last(args)                                                                                         // 6\n  var async = _.isFunction(callback)                                                                                  // 7\n  var abort, ret                                                                                                      // 8\n                                                                                                                      // 9\n  // args[0] : doc                                                                                                    // 10\n  // args[1] : callback                                                                                               // 11\n                                                                                                                      // 12\n  // before                                                                                                           // 13\n  if (!suppressAspects) {                                                                                             // 14\n    try {                                                                                                             // 15\n      _.each(aspects.before, function (o) {                                                                           // 16\n        var r = o.aspect.call(_.extend({transform: getTransform(args[0])}, ctx), userId, args[0])                     // 17\n        if (r === false) abort = true                                                                                 // 18\n      })                                                                                                              // 19\n                                                                                                                      // 20\n      if (abort) return false                                                                                         // 21\n    } catch (e) {                                                                                                     // 22\n      if (async) return callback.call(self, e)                                                                        // 23\n      throw e                                                                                                         // 24\n    }                                                                                                                 // 25\n  }                                                                                                                   // 26\n                                                                                                                      // 27\n  function after (id, err) {                                                                                          // 28\n    var doc = args[0]                                                                                                 // 29\n    if (id) {                                                                                                         // 30\n      // In some cases (namely Meteor.users on Meteor 1.4+), the _id property                                         // 31\n      // is a raw mongo _id object. We need to extract the _id from this object                                       // 32\n      if (_.isObject(id) && id.ops) {                                                                                 // 33\n        // If _str then collection is using Mongo.ObjectID as ids                                                     // 34\n        if (doc._id._str) {                                                                                           // 35\n          id = new Mongo.ObjectID(doc._id._str.toString());                                                           // 36\n        } else {                                                                                                      // 37\n          id = id.ops && id.ops[0] && id.ops[0]._id                                                                   // 38\n        }                                                                                                             // 39\n      }                                                                                                               // 40\n      doc = EJSON.clone(args[0])                                                                                      // 41\n      doc._id = id                                                                                                    // 42\n    }                                                                                                                 // 43\n    if (!suppressAspects) {                                                                                           // 44\n      var lctx = _.extend({transform: getTransform(doc), _id: id, err: err}, ctx)                                     // 45\n      _.each(aspects.after, function (o) {                                                                            // 46\n        o.aspect.call(lctx, userId, doc)                                                                              // 47\n      })                                                                                                              // 48\n    }                                                                                                                 // 49\n    return id                                                                                                         // 50\n  }                                                                                                                   // 51\n                                                                                                                      // 52\n  if (async) {                                                                                                        // 53\n    args[args.length - 1] = function (err, obj) {                                                                     // 54\n      after(obj && obj[0] && obj[0]._id || obj, err)                                                                  // 55\n      return callback.apply(this, arguments)                                                                          // 56\n    }                                                                                                                 // 57\n    return _super.apply(self, args)                                                                                   // 58\n  } else {                                                                                                            // 59\n    ret = _super.apply(self, args)                                                                                    // 60\n    return after(ret && ret[0] && ret[0]._id || ret)                                                                  // 61\n  }                                                                                                                   // 62\n})                                                                                                                    // 63\n                                                                                                                      // 64\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/matb33_collection-hooks/update.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* global CollectionHooks _ EJSON */                                                                                  // 1\n                                                                                                                      // 2\nCollectionHooks.defineAdvice('update', function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this                                                                                                     // 4\n  var ctx = {context: self, _super: _super, args: args}                                                               // 5\n  var callback = _.last(args)                                                                                         // 6\n  var async = _.isFunction(callback)                                                                                  // 7\n  var docs                                                                                                            // 8\n  var docIds                                                                                                          // 9\n  var fields                                                                                                          // 10\n  var abort                                                                                                           // 11\n  var prev = {}                                                                                                       // 12\n  var collection = _.has(self, '_collection') ? self._collection : self                                               // 13\n                                                                                                                      // 14\n  // args[0] : selector                                                                                               // 15\n  // args[1] : mutator                                                                                                // 16\n  // args[2] : options (optional)                                                                                     // 17\n  // args[3] : callback                                                                                               // 18\n                                                                                                                      // 19\n  if (_.isFunction(args[2])) {                                                                                        // 20\n    callback = args[2]                                                                                                // 21\n    args[2] = {}                                                                                                      // 22\n  }                                                                                                                   // 23\n                                                                                                                      // 24\n  if (!suppressAspects) {                                                                                             // 25\n    try {                                                                                                             // 26\n      if (aspects.before || aspects.after) {                                                                          // 27\n        fields = CollectionHooks.getFields(args[1])                                                                   // 28\n        docs = CollectionHooks.getDocs.call(self, collection, args[0], args[2]).fetch()                               // 29\n        docIds = _.map(docs, function (doc) { return doc._id })                                                       // 30\n      }                                                                                                               // 31\n                                                                                                                      // 32\n      // copy originals for convenience for the 'after' pointcut                                                      // 33\n      if (aspects.after) {                                                                                            // 34\n        prev.mutator = EJSON.clone(args[1])                                                                           // 35\n        prev.options = EJSON.clone(args[2])                                                                           // 36\n        if (                                                                                                          // 37\n          _.some(aspects.after, function (o) { return o.options.fetchPrevious !== false }) &&                         // 38\n          CollectionHooks.extendOptions(instance.hookOptions, {}, 'after', 'update').fetchPrevious !== false          // 39\n        ) {                                                                                                           // 40\n          prev.docs = {}                                                                                              // 41\n          _.each(docs, function (doc) {                                                                               // 42\n            prev.docs[doc._id] = EJSON.clone(doc)                                                                     // 43\n          })                                                                                                          // 44\n        }                                                                                                             // 45\n      }                                                                                                               // 46\n                                                                                                                      // 47\n      // before                                                                                                       // 48\n      _.each(aspects.before, function (o) {                                                                           // 49\n        _.each(docs, function (doc) {                                                                                 // 50\n          var r = o.aspect.call(_.extend({transform: getTransform(doc)}, ctx), userId, doc, fields, args[1], args[2])\n          if (r === false) abort = true                                                                               // 52\n        })                                                                                                            // 53\n      })                                                                                                              // 54\n                                                                                                                      // 55\n      if (abort) return false                                                                                         // 56\n    } catch (e) {                                                                                                     // 57\n      if (async) return callback.call(self, e)                                                                        // 58\n      throw e                                                                                                         // 59\n    }                                                                                                                 // 60\n  }                                                                                                                   // 61\n                                                                                                                      // 62\n  function after (affected, err) {                                                                                    // 63\n    if (!suppressAspects) {                                                                                           // 64\n      var fields = CollectionHooks.getFields(args[1])                                                                 // 65\n      var docs = CollectionHooks.getDocs.call(self, collection, {_id: {$in: docIds}}, args[2]).fetch()                // 66\n                                                                                                                      // 67\n      _.each(aspects.after, function (o) {                                                                            // 68\n        _.each(docs, function (doc) {                                                                                 // 69\n          o.aspect.call(_.extend({                                                                                    // 70\n            transform: getTransform(doc),                                                                             // 71\n            previous: prev.docs && prev.docs[doc._id],                                                                // 72\n            affected: affected,                                                                                       // 73\n            err: err                                                                                                  // 74\n          }, ctx), userId, doc, fields, prev.mutator, prev.options)                                                   // 75\n        })                                                                                                            // 76\n      })                                                                                                              // 77\n    }                                                                                                                 // 78\n  }                                                                                                                   // 79\n                                                                                                                      // 80\n  if (async) {                                                                                                        // 81\n    args[args.length - 1] = function (err, affected) {                                                                // 82\n      after(affected, err)                                                                                            // 83\n      return callback.apply(this, arguments)                                                                          // 84\n    }                                                                                                                 // 85\n    return _super.apply(this, args)                                                                                   // 86\n  } else {                                                                                                            // 87\n    var affected = _super.apply(self, args)                                                                           // 88\n    after(affected)                                                                                                   // 89\n    return affected                                                                                                   // 90\n  }                                                                                                                   // 91\n})                                                                                                                    // 92\n                                                                                                                      // 93\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/matb33_collection-hooks/remove.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* global CollectionHooks _ EJSON */                                                                                  // 1\n                                                                                                                      // 2\nCollectionHooks.defineAdvice('remove', function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this                                                                                                     // 4\n  var ctx = {context: self, _super: _super, args: args}                                                               // 5\n  var callback = _.last(args)                                                                                         // 6\n  var async = _.isFunction(callback)                                                                                  // 7\n  var docs                                                                                                            // 8\n  var abort                                                                                                           // 9\n  var prev = []                                                                                                       // 10\n  var collection = _.has(self, '_collection') ? self._collection : self                                               // 11\n                                                                                                                      // 12\n  // args[0] : selector                                                                                               // 13\n  // args[1] : callback                                                                                               // 14\n                                                                                                                      // 15\n  if (!suppressAspects) {                                                                                             // 16\n    try {                                                                                                             // 17\n      if (aspects.before || aspects.after) {                                                                          // 18\n        docs = CollectionHooks.getDocs.call(self, collection, args[0]).fetch()                                        // 19\n      }                                                                                                               // 20\n                                                                                                                      // 21\n      // copy originals for convenience for the 'after' pointcut                                                      // 22\n      if (aspects.after) {                                                                                            // 23\n        _.each(docs, function (doc) {                                                                                 // 24\n          prev.push(EJSON.clone(doc))                                                                                 // 25\n        })                                                                                                            // 26\n      }                                                                                                               // 27\n                                                                                                                      // 28\n      // before                                                                                                       // 29\n      _.each(aspects.before, function (o) {                                                                           // 30\n        _.each(docs, function (doc) {                                                                                 // 31\n          var r = o.aspect.call(_.extend({transform: getTransform(doc)}, ctx), userId, doc)                           // 32\n          if (r === false) abort = true                                                                               // 33\n        })                                                                                                            // 34\n      })                                                                                                              // 35\n                                                                                                                      // 36\n      if (abort) return false                                                                                         // 37\n    } catch (e) {                                                                                                     // 38\n      if (async) return callback.call(self, e)                                                                        // 39\n      throw e                                                                                                         // 40\n    }                                                                                                                 // 41\n  }                                                                                                                   // 42\n                                                                                                                      // 43\n  function after (err) {                                                                                              // 44\n    if (!suppressAspects) {                                                                                           // 45\n      _.each(aspects.after, function (o) {                                                                            // 46\n        _.each(prev, function (doc) {                                                                                 // 47\n          o.aspect.call(_.extend({transform: getTransform(doc), err: err}, ctx), userId, doc)                         // 48\n        })                                                                                                            // 49\n      })                                                                                                              // 50\n    }                                                                                                                 // 51\n  }                                                                                                                   // 52\n                                                                                                                      // 53\n  if (async) {                                                                                                        // 54\n    args[args.length - 1] = function (err) {                                                                          // 55\n      after(err)                                                                                                      // 56\n      return callback.apply(this, arguments)                                                                          // 57\n    }                                                                                                                 // 58\n    return _super.apply(self, args)                                                                                   // 59\n  } else {                                                                                                            // 60\n    var result = _super.apply(self, args)                                                                             // 61\n    after()                                                                                                           // 62\n    return result                                                                                                     // 63\n  }                                                                                                                   // 64\n})                                                                                                                    // 65\n                                                                                                                      // 66\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/matb33_collection-hooks/upsert.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* global CollectionHooks _ EJSON */                                                                                  // 1\n                                                                                                                      // 2\nCollectionHooks.defineAdvice('upsert', function (userId, _super, instance, aspectGroup, getTransform, args, suppressAspects) {\n  var self = this                                                                                                     // 4\n  var ctx = {context: self, _super: _super, args: args}                                                               // 5\n  var callback = _.last(args)                                                                                         // 6\n  var async = _.isFunction(callback)                                                                                  // 7\n  var docs                                                                                                            // 8\n  var docIds                                                                                                          // 9\n  var abort                                                                                                           // 10\n  var prev = {}                                                                                                       // 11\n  var collection = _.has(self, '_collection') ? self._collection : self                                               // 12\n                                                                                                                      // 13\n  // args[0] : selector                                                                                               // 14\n  // args[1] : mutator                                                                                                // 15\n  // args[2] : options (optional)                                                                                     // 16\n  // args[3] : callback                                                                                               // 17\n                                                                                                                      // 18\n  if (_.isFunction(args[2])) {                                                                                        // 19\n    callback = args[2]                                                                                                // 20\n    args[2] = {}                                                                                                      // 21\n  }                                                                                                                   // 22\n                                                                                                                      // 23\n  if (!suppressAspects) {                                                                                             // 24\n    if (aspectGroup.upsert.before) {                                                                                  // 25\n      docs = CollectionHooks.getDocs.call(self, collection, args[0], args[2]).fetch()                                 // 26\n      docIds = _.map(docs, function (doc) { return doc._id })                                                         // 27\n    }                                                                                                                 // 28\n                                                                                                                      // 29\n    // copy originals for convenience for the 'after' pointcut                                                        // 30\n    if (aspectGroup.update.after) {                                                                                   // 31\n      if (_.some(aspectGroup.update.after, function (o) { return o.options.fetchPrevious !== false }) &&              // 32\n          CollectionHooks.extendOptions(instance.hookOptions, {}, 'after', 'update').fetchPrevious !== false) {       // 33\n        prev.mutator = EJSON.clone(args[1])                                                                           // 34\n        prev.options = EJSON.clone(args[2])                                                                           // 35\n        prev.docs = {}                                                                                                // 36\n        _.each(docs, function (doc) {                                                                                 // 37\n          prev.docs[doc._id] = EJSON.clone(doc)                                                                       // 38\n        })                                                                                                            // 39\n      }                                                                                                               // 40\n    }                                                                                                                 // 41\n                                                                                                                      // 42\n    // before                                                                                                         // 43\n    if (!suppressAspects) {                                                                                           // 44\n      _.each(aspectGroup.upsert.before, function (o) {                                                                // 45\n        var r = o.aspect.call(ctx, userId, args[0], args[1], args[2])                                                 // 46\n        if (r === false) abort = true                                                                                 // 47\n      })                                                                                                              // 48\n                                                                                                                      // 49\n      if (abort) return false                                                                                         // 50\n    }                                                                                                                 // 51\n  }                                                                                                                   // 52\n                                                                                                                      // 53\n  function afterUpdate (affected, err) {                                                                              // 54\n    if (!suppressAspects) {                                                                                           // 55\n      var fields = CollectionHooks.getFields(args[1])                                                                 // 56\n      var docs = CollectionHooks.getDocs.call(self, collection, {_id: {$in: docIds}}, args[2]).fetch()                // 57\n                                                                                                                      // 58\n      _.each(aspectGroup.update.after, function (o) {                                                                 // 59\n        _.each(docs, function (doc) {                                                                                 // 60\n          o.aspect.call(_.extend({                                                                                    // 61\n            transform: getTransform(doc),                                                                             // 62\n            previous: prev.docs && prev.docs[doc._id],                                                                // 63\n            affected: affected,                                                                                       // 64\n            err: err                                                                                                  // 65\n          }, ctx), userId, doc, fields, prev.mutator, prev.options)                                                   // 66\n        })                                                                                                            // 67\n      })                                                                                                              // 68\n    }                                                                                                                 // 69\n  }                                                                                                                   // 70\n                                                                                                                      // 71\n  function afterInsert (id, err) {                                                                                    // 72\n    if (!suppressAspects) {                                                                                           // 73\n      var doc = CollectionHooks.getDocs.call(self, collection, {_id: id}, args[0], {}).fetch()[0] // 3rd argument passes empty object which causes magic logic to imply limit:1\n      var lctx = _.extend({transform: getTransform(doc), _id: id, err: err}, ctx)                                     // 75\n      _.each(aspectGroup.insert.after, function (o) {                                                                 // 76\n        o.aspect.call(lctx, userId, doc)                                                                              // 77\n      })                                                                                                              // 78\n    }                                                                                                                 // 79\n  }                                                                                                                   // 80\n                                                                                                                      // 81\n  if (async) {                                                                                                        // 82\n    args[args.length - 1] = function (err, ret) {                                                                     // 83\n      if (err || ret.insertedId) {                                                                                    // 84\n        // Send any errors to afterInsert                                                                             // 85\n        afterInsert(ret && ret.insertedId, err)                                                                       // 86\n      } else {                                                                                                        // 87\n        afterUpdate(ret && ret.numberAffected, err) // Note that err can never reach here                             // 88\n      }                                                                                                               // 89\n                                                                                                                      // 90\n      return CollectionHooks.hookedOp(function () {                                                                   // 91\n        return callback.call(this, err, ret)                                                                          // 92\n      })                                                                                                              // 93\n    }                                                                                                                 // 94\n                                                                                                                      // 95\n    return CollectionHooks.directOp(function () {                                                                     // 96\n      return _super.apply(self, args)                                                                                 // 97\n    })                                                                                                                // 98\n  } else {                                                                                                            // 99\n    var ret = CollectionHooks.directOp(function () {                                                                  // 100\n      return _super.apply(self, args)                                                                                 // 101\n    })                                                                                                                // 102\n                                                                                                                      // 103\n    if (ret && ret.insertedId) {                                                                                      // 104\n      afterInsert(ret && ret.insertedId)                                                                              // 105\n    } else {                                                                                                          // 106\n      afterUpdate(ret && ret.numberAffected)                                                                          // 107\n    }                                                                                                                 // 108\n                                                                                                                      // 109\n    return ret                                                                                                        // 110\n  }                                                                                                                   // 111\n})                                                                                                                    // 112\n                                                                                                                      // 113\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/matb33_collection-hooks/find.js                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* global CollectionHooks _ */                                                                                        // 1\n                                                                                                                      // 2\nCollectionHooks.defineAdvice('find', function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this                                                                                                     // 4\n  var ctx = {context: self, _super: _super, args: args}                                                               // 5\n  var ret, abort                                                                                                      // 6\n                                                                                                                      // 7\n  // args[0] : selector                                                                                               // 8\n  // args[1] : options                                                                                                // 9\n                                                                                                                      // 10\n  // before                                                                                                           // 11\n  if (!suppressAspects) {                                                                                             // 12\n    _.each(aspects.before, function (o) {                                                                             // 13\n      var r = o.aspect.call(ctx, userId, args[0], args[1])                                                            // 14\n      if (r === false) abort = true                                                                                   // 15\n    })                                                                                                                // 16\n                                                                                                                      // 17\n    if (abort) return false                                                                                           // 18\n  }                                                                                                                   // 19\n                                                                                                                      // 20\n  function after (cursor) {                                                                                           // 21\n    if (!suppressAspects) {                                                                                           // 22\n      _.each(aspects.after, function (o) {                                                                            // 23\n        o.aspect.call(ctx, userId, args[0], args[1], cursor)                                                          // 24\n      })                                                                                                              // 25\n    }                                                                                                                 // 26\n  }                                                                                                                   // 27\n                                                                                                                      // 28\n  ret = _super.apply(self, args)                                                                                      // 29\n  after(ret)                                                                                                          // 30\n                                                                                                                      // 31\n  return ret                                                                                                          // 32\n})                                                                                                                    // 33\n                                                                                                                      // 34\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/matb33_collection-hooks/findone.js                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* global CollectionHooks _ */                                                                                        // 1\n                                                                                                                      // 2\nCollectionHooks.defineAdvice('findOne', function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this                                                                                                     // 4\n  var ctx = {context: self, _super: _super, args: args}                                                               // 5\n  var ret, abort                                                                                                      // 6\n                                                                                                                      // 7\n  // args[0] : selector                                                                                               // 8\n  // args[1] : options                                                                                                // 9\n                                                                                                                      // 10\n  // before                                                                                                           // 11\n  if (!suppressAspects) {                                                                                             // 12\n    _.each(aspects.before, function (o) {                                                                             // 13\n      var r = o.aspect.call(ctx, userId, args[0], args[1])                                                            // 14\n      if (r === false) abort = true                                                                                   // 15\n    })                                                                                                                // 16\n                                                                                                                      // 17\n    if (abort) return false                                                                                           // 18\n  }                                                                                                                   // 19\n                                                                                                                      // 20\n  function after (doc) {                                                                                              // 21\n    if (!suppressAspects) {                                                                                           // 22\n      _.each(aspects.after, function (o) {                                                                            // 23\n        o.aspect.call(ctx, userId, args[0], args[1], doc)                                                             // 24\n      })                                                                                                              // 25\n    }                                                                                                                 // 26\n  }                                                                                                                   // 27\n                                                                                                                      // 28\n  ret = _super.apply(self, args)                                                                                      // 29\n  after(ret)                                                                                                          // 30\n                                                                                                                      // 31\n  return ret                                                                                                          // 32\n})                                                                                                                    // 33\n                                                                                                                      // 34\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/matb33_collection-hooks/users-compat.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* global CollectionHooks Meteor Mongo */                                                                             // 1\n                                                                                                                      // 2\nif (Meteor.users) {                                                                                                   // 3\n  // If Meteor.users has been instantiated, attempt to re-assign its prototype:                                       // 4\n  CollectionHooks.reassignPrototype(Meteor.users)                                                                     // 5\n                                                                                                                      // 6\n  // Next, give it the hook aspects:                                                                                  // 7\n  var Collection = typeof Mongo !== 'undefined' && typeof Mongo.Collection !== 'undefined' ? Mongo.Collection : Meteor.Collection\n  CollectionHooks.extendCollectionInstance(Meteor.users, Collection)                                                  // 9\n}                                                                                                                     // 10\n                                                                                                                      // 11\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['matb33:collection-hooks'] = {}, {\n  CollectionHooks: CollectionHooks\n});\n\n})();\n","servePath":"/packages/matb33_collection-hooks.js"}]