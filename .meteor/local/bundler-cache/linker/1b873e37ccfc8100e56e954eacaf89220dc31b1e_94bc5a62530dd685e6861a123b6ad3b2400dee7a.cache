[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar EJSON = Package.ejson.EJSON;\nvar GeoJSON = Package['geojson-utils'].GeoJSON;\nvar IdMap = Package['id-map'].IdMap;\nvar MongoID = Package['mongo-id'].MongoID;\nvar OrderedDict = Package['ordered-dict'].OrderedDict;\nvar Random = Package.random.Random;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar operand, selectorValue, MinimongoTest, MinimongoError, selector, doc, callback, options, oldResults, a, b, LocalCollection, Minimongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"minimongo\":{\"minimongo_server.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/minimongo_server.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.watch(require(\"./minimongo_common.js\"));\nlet hasOwn, isNumericKey, isOperatorObject, pathsToTree, projectionDetails;\nmodule.watch(require(\"./common.js\"), {\n  hasOwn(v) {\n    hasOwn = v;\n  },\n\n  isNumericKey(v) {\n    isNumericKey = v;\n  },\n\n  isOperatorObject(v) {\n    isOperatorObject = v;\n  },\n\n  pathsToTree(v) {\n    pathsToTree = v;\n  },\n\n  projectionDetails(v) {\n    projectionDetails = v;\n  }\n\n}, 0);\n\nMinimongo._pathsElidingNumericKeys = paths => paths.map(path => path.split('.').filter(part => !isNumericKey(part)).join('.')); // Returns true if the modifier applied to some document may change the result\n// of matching the document by selector\n// The modifier is always in a form of Object:\n//  - $set\n//    - 'a.b.22.z': value\n//    - 'foo.bar': 42\n//  - $unset\n//    - 'abc.d': 1\n\n\nMinimongo.Matcher.prototype.affectedByModifier = function (modifier) {\n  // safe check for $set/$unset being objects\n  modifier = Object.assign({\n    $set: {},\n    $unset: {}\n  }, modifier);\n\n  const meaningfulPaths = this._getPaths();\n\n  const modifiedPaths = [].concat(Object.keys(modifier.$set), Object.keys(modifier.$unset));\n  return modifiedPaths.some(path => {\n    const mod = path.split('.');\n    return meaningfulPaths.some(meaningfulPath => {\n      const sel = meaningfulPath.split('.');\n      let i = 0,\n          j = 0;\n\n      while (i < sel.length && j < mod.length) {\n        if (isNumericKey(sel[i]) && isNumericKey(mod[j])) {\n          // foo.4.bar selector affected by foo.4 modifier\n          // foo.3.bar selector unaffected by foo.4 modifier\n          if (sel[i] === mod[j]) {\n            i++;\n            j++;\n          } else {\n            return false;\n          }\n        } else if (isNumericKey(sel[i])) {\n          // foo.4.bar selector unaffected by foo.bar modifier\n          return false;\n        } else if (isNumericKey(mod[j])) {\n          j++;\n        } else if (sel[i] === mod[j]) {\n          i++;\n          j++;\n        } else {\n          return false;\n        }\n      } // One is a prefix of another, taking numeric fields into account\n\n\n      return true;\n    });\n  });\n}; // @param modifier - Object: MongoDB-styled modifier with `$set`s and `$unsets`\n//                           only. (assumed to come from oplog)\n// @returns - Boolean: if after applying the modifier, selector can start\n//                     accepting the modified value.\n// NOTE: assumes that document affected by modifier didn't match this Matcher\n// before, so if modifier can't convince selector in a positive change it would\n// stay 'false'.\n// Currently doesn't support $-operators and numeric indices precisely.\n\n\nMinimongo.Matcher.prototype.canBecomeTrueByModifier = function (modifier) {\n  if (!this.affectedByModifier(modifier)) {\n    return false;\n  }\n\n  if (!this.isSimple()) {\n    return true;\n  }\n\n  modifier = Object.assign({\n    $set: {},\n    $unset: {}\n  }, modifier);\n  const modifierPaths = [].concat(Object.keys(modifier.$set), Object.keys(modifier.$unset));\n\n  if (this._getPaths().some(pathHasNumericKeys) || modifierPaths.some(pathHasNumericKeys)) {\n    return true;\n  } // check if there is a $set or $unset that indicates something is an\n  // object rather than a scalar in the actual object where we saw $-operator\n  // NOTE: it is correct since we allow only scalars in $-operators\n  // Example: for selector {'a.b': {$gt: 5}} the modifier {'a.b.c':7} would\n  // definitely set the result to false as 'a.b' appears to be an object.\n\n\n  const expectedScalarIsObject = Object.keys(this._selector).some(path => {\n    if (!isOperatorObject(this._selector[path])) {\n      return false;\n    }\n\n    return modifierPaths.some(modifierPath => modifierPath.startsWith(`${path}.`));\n  });\n\n  if (expectedScalarIsObject) {\n    return false;\n  } // See if we can apply the modifier on the ideally matching object. If it\n  // still matches the selector, then the modifier could have turned the real\n  // object in the database into something matching.\n\n\n  const matchingDocument = EJSON.clone(this.matchingDocument()); // The selector is too complex, anything can happen.\n\n  if (matchingDocument === null) {\n    return true;\n  }\n\n  try {\n    LocalCollection._modify(matchingDocument, modifier);\n  } catch (error) {\n    // Couldn't set a property on a field which is a scalar or null in the\n    // selector.\n    // Example:\n    // real document: { 'a.b': 3 }\n    // selector: { 'a': 12 }\n    // converted selector (ideal document): { 'a': 12 }\n    // modifier: { $set: { 'a.b': 4 } }\n    // We don't know what real document was like but from the error raised by\n    // $set on a scalar field we can reason that the structure of real document\n    // is completely different.\n    if (error.name === 'MinimongoError' && error.setPropertyError) {\n      return false;\n    }\n\n    throw error;\n  }\n\n  return this.documentMatches(matchingDocument).result;\n}; // Knows how to combine a mongo selector and a fields projection to a new fields\n// projection taking into account active fields from the passed selector.\n// @returns Object - projection object (same as fields option of mongo cursor)\n\n\nMinimongo.Matcher.prototype.combineIntoProjection = function (projection) {\n  const selectorPaths = Minimongo._pathsElidingNumericKeys(this._getPaths()); // Special case for $where operator in the selector - projection should depend\n  // on all fields of the document. getSelectorPaths returns a list of paths\n  // selector depends on. If one of the paths is '' (empty string) representing\n  // the root or the whole document, complete projection should be returned.\n\n\n  if (selectorPaths.includes('')) {\n    return {};\n  }\n\n  return combineImportantPathsIntoProjection(selectorPaths, projection);\n}; // Returns an object that would match the selector if possible or null if the\n// selector is too complex for us to analyze\n// { 'a.b': { ans: 42 }, 'foo.bar': null, 'foo.baz': \"something\" }\n// => { a: { b: { ans: 42 } }, foo: { bar: null, baz: \"something\" } }\n\n\nMinimongo.Matcher.prototype.matchingDocument = function () {\n  // check if it was computed before\n  if (this._matchingDocument !== undefined) {\n    return this._matchingDocument;\n  } // If the analysis of this selector is too hard for our implementation\n  // fallback to \"YES\"\n\n\n  let fallback = false;\n  this._matchingDocument = pathsToTree(this._getPaths(), path => {\n    const valueSelector = this._selector[path];\n\n    if (isOperatorObject(valueSelector)) {\n      // if there is a strict equality, there is a good\n      // chance we can use one of those as \"matching\"\n      // dummy value\n      if (valueSelector.$eq) {\n        return valueSelector.$eq;\n      }\n\n      if (valueSelector.$in) {\n        const matcher = new Minimongo.Matcher({\n          placeholder: valueSelector\n        }); // Return anything from $in that matches the whole selector for this\n        // path. If nothing matches, returns `undefined` as nothing can make\n        // this selector into `true`.\n\n        return valueSelector.$in.find(placeholder => matcher.documentMatches({\n          placeholder\n        }).result);\n      }\n\n      if (onlyContainsKeys(valueSelector, ['$gt', '$gte', '$lt', '$lte'])) {\n        let lowerBound = -Infinity;\n        let upperBound = Infinity;\n        ['$lte', '$lt'].forEach(op => {\n          if (hasOwn.call(valueSelector, op) && valueSelector[op] < upperBound) {\n            upperBound = valueSelector[op];\n          }\n        });\n        ['$gte', '$gt'].forEach(op => {\n          if (hasOwn.call(valueSelector, op) && valueSelector[op] > lowerBound) {\n            lowerBound = valueSelector[op];\n          }\n        });\n        const middle = (lowerBound + upperBound) / 2;\n        const matcher = new Minimongo.Matcher({\n          placeholder: valueSelector\n        });\n\n        if (!matcher.documentMatches({\n          placeholder: middle\n        }).result && (middle === lowerBound || middle === upperBound)) {\n          fallback = true;\n        }\n\n        return middle;\n      }\n\n      if (onlyContainsKeys(valueSelector, ['$nin', '$ne'])) {\n        // Since this._isSimple makes sure $nin and $ne are not combined with\n        // objects or arrays, we can confidently return an empty object as it\n        // never matches any scalar.\n        return {};\n      }\n\n      fallback = true;\n    }\n\n    return this._selector[path];\n  }, x => x);\n\n  if (fallback) {\n    this._matchingDocument = null;\n  }\n\n  return this._matchingDocument;\n}; // Minimongo.Sorter gets a similar method, which delegates to a Matcher it made\n// for this exact purpose.\n\n\nMinimongo.Sorter.prototype.affectedByModifier = function (modifier) {\n  return this._selectorForAffectedByModifier.affectedByModifier(modifier);\n};\n\nMinimongo.Sorter.prototype.combineIntoProjection = function (projection) {\n  return combineImportantPathsIntoProjection(Minimongo._pathsElidingNumericKeys(this._getPaths()), projection);\n};\n\nfunction combineImportantPathsIntoProjection(paths, projection) {\n  const details = projectionDetails(projection); // merge the paths to include\n\n  const tree = pathsToTree(paths, path => true, (node, path, fullPath) => true, details.tree);\n  const mergedProjection = treeToPaths(tree);\n\n  if (details.including) {\n    // both selector and projection are pointing on fields to include\n    // so we can just return the merged tree\n    return mergedProjection;\n  } // selector is pointing at fields to include\n  // projection is pointing at fields to exclude\n  // make sure we don't exclude important paths\n\n\n  const mergedExclProjection = {};\n  Object.keys(mergedProjection).forEach(path => {\n    if (!mergedProjection[path]) {\n      mergedExclProjection[path] = false;\n    }\n  });\n  return mergedExclProjection;\n}\n\nfunction getPaths(selector) {\n  return Object.keys(new Minimongo.Matcher(selector)._paths); // XXX remove it?\n  // return Object.keys(selector).map(k => {\n  //   // we don't know how to handle $where because it can be anything\n  //   if (k === '$where') {\n  //     return ''; // matches everything\n  //   }\n  //   // we branch from $or/$and/$nor operator\n  //   if (['$or', '$and', '$nor'].includes(k)) {\n  //     return selector[k].map(getPaths);\n  //   }\n  //   // the value is a literal or some comparison operator\n  //   return k;\n  // })\n  //   .reduce((a, b) => a.concat(b), [])\n  //   .filter((a, b, c) => c.indexOf(a) === b);\n} // A helper to ensure object has only certain keys\n\n\nfunction onlyContainsKeys(obj, keys) {\n  return Object.keys(obj).every(k => keys.includes(k));\n}\n\nfunction pathHasNumericKeys(path) {\n  return path.split('.').some(isNumericKey);\n} // Returns a set of key paths similar to\n// { 'foo.bar': 1, 'a.b.c': 1 }\n\n\nfunction treeToPaths(tree, prefix = '') {\n  const result = {};\n  Object.keys(tree).forEach(key => {\n    const value = tree[key];\n\n    if (value === Object(value)) {\n      Object.assign(result, treeToPaths(value, `${prefix + key}.`));\n    } else {\n      result[prefix + key] = value;\n    }\n  });\n  return result;\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/common.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  hasOwn: () => hasOwn,\n  ELEMENT_OPERATORS: () => ELEMENT_OPERATORS,\n  compileDocumentSelector: () => compileDocumentSelector,\n  equalityElementMatcher: () => equalityElementMatcher,\n  expandArraysInBranches: () => expandArraysInBranches,\n  isIndexable: () => isIndexable,\n  isNumericKey: () => isNumericKey,\n  isOperatorObject: () => isOperatorObject,\n  makeLookupFunction: () => makeLookupFunction,\n  nothingMatcher: () => nothingMatcher,\n  pathsToTree: () => pathsToTree,\n  populateDocumentWithQueryFields: () => populateDocumentWithQueryFields,\n  projectionDetails: () => projectionDetails,\n  regexpElementMatcher: () => regexpElementMatcher\n});\nlet LocalCollection;\nmodule.watch(require(\"./local_collection.js\"), {\n  default(v) {\n    LocalCollection = v;\n  }\n\n}, 0);\nconst hasOwn = Object.prototype.hasOwnProperty;\nconst ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      } // XXX could require to be ints or round or something\n\n\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => typeof value === 'number' && value % divisor === remainder;\n    }\n\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    }\n\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    }\n\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n\n    compileElementSelector(operand) {\n      if (typeof operand !== 'number') {\n        throw Error('$type needs a number');\n      }\n\n      return value => value !== undefined && LocalCollection._f._type(value) === operand;\n    }\n\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    }\n\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    }\n\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    }\n\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    }\n\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    }\n\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(Object.keys(operand).filter(key => !hasOwn.call(LOGICAL_OPERATORS, key)).reduce((a, b) => Object.assign(a, {\n        [b]: operand[b]\n      }), {}), true);\n      let subMatcher;\n\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher = compileDocumentSelector(operand, matcher, {\n          inElemMatch: true\n        });\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{\n              value: arrayElement,\n              dontIterate: true\n            }];\n          } // XXX support $near in $elemMatch by propagating $distance?\n\n\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    }\n\n  }\n};\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch));\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result); // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n\n      return {\n        result\n      };\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result); // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n\n      return {\n        result\n      };\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    } // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n\n\n    return doc => ({\n      result: selectorValue.call(doc, doc)\n    });\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({\n      result: true\n    });\n  }\n\n}; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\n\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));\n  },\n\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n\n  $ne(operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));\n  },\n\n  $nin(operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },\n\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(value => value !== undefined);\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    } // Not sure why, but this seems to be what MongoDB does.\n\n\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      } // This is always a regexp or equality selector.\n\n\n      return compileValueSelector(criterion, matcher);\n    }); // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n\n    return andBranchedMatchers(branchedMatchers);\n  },\n\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n\n    let maxDistance, point, distance;\n\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(point, {\n            type: 'Point',\n            coordinates: pointToArray(value)\n          });\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {\n        result: false\n      };\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.\n\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          } // Skip anything that's a tie.\n\n\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n      return result;\n    };\n  }\n\n}; // NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\n\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n\n      if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {\n        match.distance = subResult.distance;\n      } // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n\n\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    }); // If we didn't actually match, forget any extra metadata we came up with.\n\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {\n      inElemMatch\n    });\n  });\n} // Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\n\n\nfunction compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    } // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n\n\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    } // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n\n\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));\n} // Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\n\n\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value); // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      } // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n\n\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n    return match;\n  };\n} // Helpers for $near.\n\n\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n} // Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\n\n\nfunction equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  } // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n\n\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {\n    result: true\n  };\n}\n\nfunction expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({\n        arrayIndices: branch.arrayIndices,\n        value: branch.value\n      });\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  } // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n\n\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  } // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n\n\n  if (Array.isArray(operand) && operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n    return view;\n  } // bad operand\n\n\n  throw Error(`operand to ${selector} must be a numeric bitmask (representable as a ` + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT));\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0; // sign extension\n\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  } // bindata\n\n\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  } // no match\n\n\n  return false;\n} // Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\n\n\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (existingKey.length > key.length && existingKey.indexOf(`${key}.`) === 0 || key.length > existingKey.length && key.indexOf(`${existingKey}.`) === 0) {\n      throw new Error(`cannot infer query fields to set, both paths '${existingKey}' and ` + `'${key}' are matched`);\n    } else if (existingKey === key) {\n      throw new Error(`cannot infer query fields to set, path '${key}' is matched twice`);\n    }\n  });\n  document[key] = value;\n} // Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\n\n\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {\n      result: !branchedMatcher(branchValues).result\n    };\n  };\n}\n\nfunction isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nfunction isNumericKey(s) {\n  return (/^[0-9]+$/.test(s)\n  );\n}\n\nfunction isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(`Inconsistent operator: ${JSON.stringify(valueSelector)}`);\n      }\n\n      theseAreOperators = false;\n    }\n  });\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      } // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n\n\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        } // Comparisons are never true among things of different type (except\n        // null vs undefined).\n\n\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    }\n\n  };\n} // makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\n\n\nfunction makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.'));\n\n  const omitUnnecessaryFields = result => {\n    if (!result.dontIterate) {\n      delete result.dontIterate;\n    }\n\n    if (result.arrayIndices && !result.arrayIndices.length) {\n      delete result.arrayIndices;\n    }\n\n    return result;\n  }; // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n\n\n  return (doc, arrayIndices = []) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      } // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n\n\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    } // Do our first lookup.\n\n\n    const firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        arrayIndices,\n        dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),\n        value: firstLevel\n      })];\n    } // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n\n\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return [omitUnnecessaryFields({\n        arrayIndices,\n        value: undefined\n      })];\n    }\n\n    const result = [];\n\n    const appendToResult = more => {\n      result.push(...more);\n    }; // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n\n\n    appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n\n    if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {\n  makeLookupFunction\n};\n\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nfunction nothingMatcher(docOrBranchedValues) {\n  return {\n    result: false\n  };\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n    const simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number';\n    const simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand);\n    const simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(x => x === Object(x));\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n  return andBranchedMatchers(operatorMatchers);\n} // paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\n\n\nfunction pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root; // use .every just for iteration with break\n\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path); // break out of loop if we are failing for this path\n\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n} // Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n// Handles one key/value pair to put in the selector document\n\n\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n} // Handles a key, value pair to put in the selector document\n// if the value is an object\n\n\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element => populateDocumentWithKeyValue(document, key, element));\n      }\n    });\n  }\n} // Fills a document with certain fields from an upsert selector\n\n\nfunction populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element => populateDocumentWithQueryFields(element, document));\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\nfunction projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    } // This error message is copied from MongoDB shell\n\n\n    if (including !== rule) {\n      throw MinimongoError('You cannot currently mix including and excluding fields.');\n    }\n  });\n  const projectionRulesTree = pathsToTree(fieldsKeys, path => including, (node, path, fullPath) => {\n    // Check passed projection fields' keys: If you have two rules such as\n    // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n    // that happens, there is a probability you are doing something wrong,\n    // framework should notify you about such mistake earlier on cursor\n    // compilation step than later during runtime.  Note, that real mongo\n    // doesn't do anything about it and the later rule appears in projection\n    // project, more priority it takes.\n    //\n    // Example, assume following in mongo shell:\n    // > db.coll.insert({ a: { b: 23, c: 44 } })\n    // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n    // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n    // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n    // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n    //\n    // Note, how second time the return set of keys is different.\n    const currentPath = fullPath;\n    const anotherPath = path;\n    throw MinimongoError(`both ${currentPath} and ${anotherPath} found in fields option, ` + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');\n  });\n  return {\n    including,\n    tree: projectionRulesTree\n  };\n}\n\nfunction regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    } // Regexps only work against strings.\n\n\n    if (typeof value !== 'string') {\n      return false;\n    } // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n\n\n    regexp.lastIndex = 0;\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(`The dotted field '${key}' in '${path}.${key} is not valid for storage.`);\n  }\n\n  if (key[0] === '$') {\n    throw new Error(`The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`);\n  }\n} // Recursively validates an object that is nested more than one level deep\n\n\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cursor.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/cursor.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  default: () => Cursor\n});\nlet LocalCollection;\nmodule.watch(require(\"./local_collection.js\"), {\n  default(v) {\n    LocalCollection = v;\n  }\n\n}, 0);\nlet hasOwn;\nmodule.watch(require(\"./common.js\"), {\n  hasOwn(v) {\n    hasOwn = v;\n  }\n\n}, 1);\n\nclass Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || [], {\n          matcher: this.matcher\n        });\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n    this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.\n\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  } /**\n     * @summary Returns the number of documents that match a query.\n     * @memberOf Mongo.Cursor\n     * @method  count\n     * @param {boolean} [applySkipLimit=true] If set to `false`, the value\n     *                                         returned will reflect the total\n     *                                         number of matching documents,\n     *                                         ignoring any value supplied for\n     *                                         limit\n     * @instance\n     * @locus Anywhere\n     * @returns {Number}\n     */\n\n  count(applySkipLimit = true) {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({\n        added: true,\n        removed: true\n      }, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n      applySkipLimit\n    }).length;\n  } /**\n     * @summary Return all matching documents as an Array.\n     * @memberOf Mongo.Cursor\n     * @method  fetch\n     * @instance\n     * @locus Anywhere\n     * @returns {Object[]}\n     */\n\n  fetch() {\n    const result = [];\n    this.forEach(doc => {\n      result.push(doc);\n    });\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true\n      });\n    }\n\n    let index = 0;\n\n    const objects = this._getRawObjects({\n      ordered: true\n    });\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform) element = this._transform(element);\n          return {\n            value: element\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  } /**\n     * @callback IterationCallback\n     * @param {Object} doc\n     * @param {Number} index\n     */ /**\n         * @summary Call `callback` once for each matching document, sequentially and\n         *          synchronously.\n         * @locus Anywhere\n         * @method  forEach\n         * @instance\n         * @memberOf Mongo.Cursor\n         * @param {IterationCallback} callback Function to call. It will be called\n         *                                     with three arguments: the document, a\n         *                                     0-based index, and <em>cursor</em>\n         *                                     itself.\n         * @param {Any} [thisArg] An object which will be the value of `this` inside\n         *                        `callback`.\n         */\n\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true\n      });\n    }\n\n    this._getRawObjects({\n      ordered: true\n    }).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  } /**\n     * @summary Map callback over all matching documents.  Returns an Array.\n     * @locus Anywhere\n     * @method map\n     * @instance\n     * @memberOf Mongo.Cursor\n     * @param {IterationCallback} callback Function to call. It will be called\n     *                                     with three arguments: the document, a\n     *                                     0-based index, and <em>cursor</em>\n     *                                     itself.\n     * @param {Any} [thisArg] An object which will be the value of `this` inside\n     *                        `callback`.\n     */\n\n  map(callback, thisArg) {\n    const result = [];\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n    return result;\n  } // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  } /**\n     * @summary Watch a query. Receive callbacks as the result set changes. Only\n     *          the differences between the old and new documents are passed to\n     *          the callbacks.\n     * @locus Anywhere\n     * @memberOf Mongo.Cursor\n     * @instance\n     * @param {Object} callbacks Functions to call to deliver the result set as it\n     *                           changes\n     */\n\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n\n\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" + \"for observeChanges or 'addedAt' for observe, instead of 'added').\");\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher,\n      // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n    let qid; // Non-reactive queries call added[Before] and then never call anything\n    // else.\n\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({\n      ordered,\n      distances: query.distances\n    });\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();\n    } // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n\n\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function () /* args*/{\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      const results = ordered ? query.results : query.results._map;\n      Object.keys(results).forEach(key => {\n        const doc = results[key];\n        const fields = EJSON.clone(doc);\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle(), {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    } // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n\n\n    this.collection._observeQueue.drain();\n\n    return handle;\n  } // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n\n\n  rewind() {} // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n\n\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency();\n      const notify = dependency.changed.bind(dependency);\n      dependency.depend();\n      const options = {\n        _allow_unordered,\n        _suppress_initial: true\n      };\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(fn => {\n        if (changers[fn]) {\n          options[fn] = notify;\n        }\n      }); // observeChanges will stop() when this computation is invalidated\n\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  } // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n\n\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n\n    const results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value\n\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    } // slow path for arbitrary selector, sort, skip, limit\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n\n\n    let distances;\n\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      } // Override to ensure all docs are matched if ignoring skip & limit\n\n\n      if (!applySkipLimit) {\n        return true;\n      } // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n\n\n      return !this.limit || this.skip || this.sorter || results.length !== this.limit;\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({\n        distances\n      }));\n    } // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n\n\n    if (!applySkipLimit || !this.limit && !this.skip) {\n      return results;\n    }\n\n    return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error('Can\\'t publish from Minimongo without the `mongo` package.');\n    }\n\n    if (!this.collection.name) {\n      throw new Error('Can\\'t publish a cursor from a collection without a name.');\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);\n  }\n\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"local_collection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/local_collection.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  default: () => LocalCollection\n});\nlet Cursor;\nmodule.watch(require(\"./cursor.js\"), {\n  default(v) {\n    Cursor = v;\n  }\n\n}, 0);\nlet ObserveHandle;\nmodule.watch(require(\"./observe_handle.js\"), {\n  default(v) {\n    ObserveHandle = v;\n  }\n\n}, 1);\nlet hasOwn, isIndexable, isNumericKey, isOperatorObject, populateDocumentWithQueryFields, projectionDetails;\nmodule.watch(require(\"./common.js\"), {\n  hasOwn(v) {\n    hasOwn = v;\n  },\n\n  isIndexable(v) {\n    isIndexable = v;\n  },\n\n  isNumericKey(v) {\n    isNumericKey = v;\n  },\n\n  isOperatorObject(v) {\n    isOperatorObject = v;\n  },\n\n  populateDocumentWithQueryFields(v) {\n    populateDocumentWithQueryFields = v;\n  },\n\n  projectionDetails(v) {\n    projectionDetails = v;\n  }\n\n}, 2);\n\nclass LocalCollection {\n  constructor(name) {\n    this.name = name; // _id -> document (also containing id)\n\n    this._docs = new LocalCollection._IdMap();\n    this._observeQueue = new Meteor._SynchronousQueue();\n    this.next_qid = 1; // live query id generator\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n\n    this.queries = Object.create(null); // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n\n    this._savedOriginals = null; // True when observers are paused and we should not send callbacks.\n\n    this.paused = false;\n  } // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n\n\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    } // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n\n\n    options.limit = 1;\n    return this.find(selector, options).fetch()[0];\n  } // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n\n\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n    assertHasValidFieldNames(doc); // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n\n    this._docs.set(id, doc);\n\n    const queriesToRecompute = []; // trigger live queries that match\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResults(query, doc);\n        }\n      }\n    });\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain(); // Defer because the caller likely doesn't expect the callback to be run\n    // immediately.\n\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  } // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n\n\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    } // Set the 'paused' flag such that new observer messages don't fire.\n\n\n    this.paused = true; // Take a snapshot of the query results for each query.\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      const result = this._docs.size();\n\n      this._docs.clear();\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n\n      if (callback) {\n        Meteor.defer(() => {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({\n              qid,\n              doc: removeDoc\n            });\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n\n      this._docs.remove(removeId);\n    } // run live query callbacks _after_ we've removed the documents.\n\n\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n\n        LocalCollection._removeFromResults(query, remove.doc);\n      }\n    });\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  } // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n\n\n  resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    } // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n\n\n    this.paused = false;\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false; // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {\n          projectionFn: query.projectionFn\n        });\n      }\n\n      query.resultsSnapshot = null;\n    });\n\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n    this._savedOriginals = null;\n    return originals;\n  } // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n\n\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap();\n  } // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n\n\n  update(selector, mod, options, callback) {\n    if (!callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true); // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n\n    const qidToOriginalResults = {}; // We should only clone each document once, even if it appears in multiple\n    // queries\n\n    const docMap = new LocalCollection._IdMap();\n\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && !this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        } // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n\n\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = idsMatched && !idsMatched.some(id => EJSON.equals(id, doc._id)) ? doc : EJSON.clone(doc);\n          docMap.set(doc._id, docToMemoize);\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n    const recomputeQids = {};\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n\n        this._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain(); // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n\n\n    let insertedId;\n\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n\n      if (!doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    } // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n\n\n    let result;\n\n    if (options._returnObject) {\n      result = {\n        numberAffected: updateCount\n      };\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  } // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n\n\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(selector, mod, Object.assign({}, options, {\n      upsert: true,\n      _returnObject: true\n    }), callback);\n  } // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n\n\n  _eachPossiblyMatchingDoc(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      specificIds.some(id => {\n        const doc = this._docs.get(id);\n\n        if (doc) {\n          return fn(doc, id) === false;\n        }\n      });\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n    const matched_before = {};\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n    const old_doc = EJSON.clone(doc);\n\n    LocalCollection._modify(doc, mod, {\n      arrayIndices\n    });\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResults(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResults(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResults(query, doc, old_doc);\n      }\n    });\n  } // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n\n\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {\n        projectionFn: query.projectionFn\n      });\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    } // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n\n\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n\n}\n\nLocalCollection.Cursor = Cursor;\nLocalCollection.ObserveHandle = ObserveHandle; // XXX maybe move these into another ObserveHelpers package or something\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\n\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          const doc = EJSON.clone(fields);\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, fields, before);\n          } // This line triggers if we provide added with movedBefore.\n\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          } // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n\n\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          const doc = this.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        }\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap();\n      this.applyChange = {\n        added: (id, fields) => {\n          const doc = EJSON.clone(fields);\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          doc._id = id;\n          this.docs.set(id, doc);\n        }\n      };\n    } // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n\n\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n\n};\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n\n}; // Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\n\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  } // No need to doubly-wrap transforms.\n\n\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id; // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n  return wrapped;\n}; // XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n// This binary search puts a value between any equal values, and the first\n// lesser value.\n\n\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError('Minimongo doesn\\'t support $ operator in projections yet.');\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' && ['$elemMatch', '$meta', '$slice'].some(key => hasOwn.call(value, key))) {\n      throw MinimongoError('Minimongo doesn\\'t support operators in projections yet.');\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError('Projection values should be one of 1, 0, true, or false');\n    }\n  });\n}; // Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\n\n\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n\n  const details = projectionDetails(fields); // returns transformed doc according to ruleTree\n\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n    Object.keys(ruleTree).forEach(key => {\n      if (!hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n    return result;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n}; // Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\n\n\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  } // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n\n\n  LocalCollection._modify(newDoc, {\n    $set: selectorDocument\n  });\n\n  LocalCollection._modify(newDoc, modifier, {\n    isInsert: true\n  });\n\n  if (isModify) {\n    return newDoc;\n  } // Replacement can take _id from query document\n\n\n  const replacement = Object.assign({}, modifier);\n\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n}; // ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\n\n\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) => DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n}; // If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\n\n\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  } // Do we have an _id clause?\n\n\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    } // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n\n\n    if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  } // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n\n\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = (query, doc) => {\n  const fields = EJSON.clone(doc);\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(query.sorter.getComparator({\n        distances: query.distances\n      }), query.results, doc);\n\n      let next = query.results[i + 1];\n\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error('Update parameter cannot have both modifier and non-modifier fields.');\n  }\n\n  return isModify;\n}; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\n\n\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n}; // XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\n\n\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  } // Make sure the caller can't mutate our data structures.\n\n\n  modifier = EJSON.clone(modifier);\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(`The update path '${keypath}' contains an empty field name, ` + 'which is not allowed.');\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(`After applying the update to the document {_id: \"${doc._id}\", ...},` + ' the (immutable) field \\'_id\\' was found to have been altered to ' + `_id: \"${newDoc._id}\"`);\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(`The _id field cannot be changed from {_id: \"${doc._id}\"} to ` + `{_id: \"${modifier._id}\"}`);\n    } // replace the whole document\n\n\n    assertHasValidFieldNames(modifier);\n  } // move new document into place.\n\n\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n\n  let suppressed = !!observeCallbacks._suppress_initial;\n  let observeChangesCallbacks;\n\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {\n          _id: id\n        }));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1; // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);\n      },\n\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        } // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n\n\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {\n            _id: id\n          })));\n        }\n      },\n\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n          DiffSequence.applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));\n        }\n      },\n\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      }\n\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n  const handle = cursor.observeChanges(changeObserver.applyChange);\n  suppressed = false;\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id; // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n}; // Is this selector just shorthand for lookup by _id?\n\n\nLocalCollection._selectorIsId = selector => typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID; // Is the selector just lookup by _id (shorthand or not)?\n\n\nLocalCollection._selectorIsIdPerhapsAsObject = selector => LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;\n\nLocalCollection._updateInResults = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  } // just take it out and put it back in again, and see if the index changes\n\n\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({\n    distances: query.distances\n  }), query.results, doc);\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {\n          field\n        });\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {\n        field\n      });\n    }\n\n    target[field] = new Date();\n  },\n\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {\n        field\n      });\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $min modifier to non-number', {\n          field\n        });\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {\n        field\n      });\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $max modifier to non-number', {\n          field\n        });\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {\n        field\n      });\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $inc modifier to non-number', {\n          field\n        });\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n\n  $set(target, field, arg) {\n    if (target !== Object(target)) {\n      // not an array or an object\n      const error = MinimongoError('Cannot set property on non-object field', {\n        field\n      });\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {\n        field\n      });\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n    target[field] = arg;\n  },\n\n  $setOnInsert(target, field, arg) {// converted to `$set` in `_modify`\n  },\n\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {\n        field\n      });\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n      target[field].push(arg);\n      return;\n    } // Fancy mode: $each (and maybe $slice and $sort and $position)\n\n\n    const toPush = arg.$each;\n\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {\n        field\n      });\n    }\n\n    assertHasValidFieldNames(toPush); // Parse $position\n\n    let position = undefined;\n\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {\n          field\n        });\n      } // XXX should check to make sure integer\n\n\n      if (arg.$position < 0) {\n        throw MinimongoError('$position in $push must be zero or positive', {\n          field\n        });\n      }\n\n      position = arg.$position;\n    } // Parse $slice.\n\n\n    let slice = undefined;\n\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {\n          field\n        });\n      } // XXX should check to make sure integer\n\n\n      slice = arg.$slice;\n    } // Parse $sort.\n\n\n    let sortFunction = undefined;\n\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {\n          field\n        });\n      } // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n\n\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {\n            field\n          });\n        }\n      });\n    } // Actually push.\n\n\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n      target[field].splice(...spliceArguments);\n    } // Actually sort.\n\n\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    } // Actually slice.\n\n\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError('Cannot apply $pushAll modifier to non-array', {\n        field\n      });\n    } else {\n      toPush.push(...arg);\n    }\n  },\n\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n    assertHasValidFieldNames(values);\n    const toAdd = target[field];\n\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError('Cannot apply $addToSet modifier to non-array', {\n        field\n      });\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {\n        field\n      });\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field\n      });\n    }\n\n    let out;\n\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {\n        field\n      });\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field\n      });\n    }\n\n    target[field] = toPull.filter(object => !arg.some(element => LocalCollection._f._equal(object, element)));\n  },\n\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {\n        field\n      });\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {\n        field\n      });\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {\n        field\n      });\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError('The \\'to\\' field for $rename cannot contain an embedded null byte', {\n        field\n      });\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n    delete target[field];\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {\n      forbidArray: true\n    });\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {\n        field\n      });\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {\n      field\n    });\n  }\n\n};\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n}; // Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n}; // checks if all field names in an object are valid\n\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n} // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\n\n\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(`cannot use the part '${keypart}' to traverse ${doc}`);\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(`can't append to array using string field name [${keypart}]`);\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(`can't modify field '${keyparts[i + 1]}' of list value ` + JSON.stringify(doc[keypart]));\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  } // notreached\n\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"matcher.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/matcher.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  default: () => Matcher\n});\nlet LocalCollection;\nmodule.watch(require(\"./local_collection.js\"), {\n  default(v) {\n    LocalCollection = v;\n  }\n\n}, 0);\nlet compileDocumentSelector, hasOwn, nothingMatcher;\nmodule.watch(require(\"./common.js\"), {\n  compileDocumentSelector(v) {\n    compileDocumentSelector = v;\n  },\n\n  hasOwn(v) {\n    hasOwn = v;\n  },\n\n  nothingMatcher(v) {\n    nothingMatcher = v;\n  }\n\n}, 1);\n\nclass Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {}; // Set to true if compilation finds a $near.\n\n    this._hasGeoQuery = false; // Set to true if compilation finds a $where.\n\n    this._hasWhere = false; // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n\n    this._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n\n    this._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector); // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  } // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n\n\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n\n      this._recordPathUsed('');\n\n      return doc => ({\n        result: !!selector.call(doc)\n      });\n    } // shorthand -- scalar _id\n\n\n    if (LocalCollection._selectorIsId(selector)) {\n      this._selector = {\n        _id: selector\n      };\n\n      this._recordPathUsed('_id');\n\n      return doc => ({\n        result: EJSON.equals(doc._id, selector)\n      });\n    } // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n\n\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    } // Top level can't be an array or true or binary.\n\n\n    if (Array.isArray(selector) || EJSON.isBinary(selector) || typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n    return compileDocumentSelector(selector, this, {\n      isRoot: true\n    });\n  } // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n\n\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    } // note that typeof(/x/) === \"object\"\n\n\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    } // object\n\n\n    return 3; // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {\n      keyOrderSensitive: true\n    });\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1, // (not a type)\n    1, // number\n    2, // string\n    3, // object\n    4, // array\n    5, // binary\n    -1, // deprecated\n    6, // ObjectID\n    7, // bool\n    8, // Date\n    0, // null\n    9, // RegExp\n    -1, // deprecated\n    100, // JS code\n    2, // deprecated (symbol)\n    100, // JS code\n    1, // 32-bit int\n    8, // Mongo timestamp\n    1 // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    } // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n\n\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) {\n      // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) {\n      // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) {\n      // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) {\n      // Array\n      for (let i = 0;; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) {\n      // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) {\n      // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  }\n\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"minimongo_common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/minimongo_common.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet LocalCollection_;\nmodule.watch(require(\"./local_collection.js\"), {\n    default(v) {\n        LocalCollection_ = v;\n    }\n\n}, 0);\nlet Matcher;\nmodule.watch(require(\"./matcher.js\"), {\n    default(v) {\n        Matcher = v;\n    }\n\n}, 1);\nlet Sorter;\nmodule.watch(require(\"./sorter.js\"), {\n    default(v) {\n        Sorter = v;\n    }\n\n}, 2);\nLocalCollection = LocalCollection_;\nMinimongo = {\n    LocalCollection: LocalCollection_,\n    Matcher,\n    Sorter\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"observe_handle.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/observe_handle.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  default: () => ObserveHandle\n});\n\nclass ObserveHandle {}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"sorter.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/sorter.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  default: () => Sorter\n});\nlet ELEMENT_OPERATORS, equalityElementMatcher, expandArraysInBranches, hasOwn, isOperatorObject, makeLookupFunction, regexpElementMatcher;\nmodule.watch(require(\"./common.js\"), {\n  ELEMENT_OPERATORS(v) {\n    ELEMENT_OPERATORS = v;\n  },\n\n  equalityElementMatcher(v) {\n    equalityElementMatcher = v;\n  },\n\n  expandArraysInBranches(v) {\n    expandArraysInBranches = v;\n  },\n\n  hasOwn(v) {\n    hasOwn = v;\n  },\n\n  isOperatorObject(v) {\n    isOperatorObject = v;\n  },\n\n  makeLookupFunction(v) {\n    makeLookupFunction = v;\n  },\n\n  regexpElementMatcher(v) {\n    regexpElementMatcher = v;\n  }\n\n}, 0);\n\nclass Sorter {\n  constructor(spec, options = {}) {\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    const addSpecPart = (path, ascending) => {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(`unsupported sort key: ${path}`);\n      }\n\n      this._sortSpecParts.push({\n        ascending,\n        lookup: makeLookupFunction(path, {\n          forSort: true\n        }),\n        path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(element => {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (typeof spec === 'object') {\n      Object.keys(spec).forEach(key => {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(`Bad sort specification: ${JSON.stringify(spec)}`);\n    } // If a function is specified for sorting, we skip the rest.\n\n\n    if (this._sortFunction) {\n      return;\n    } // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n\n\n    if (this.affectedByModifier) {\n      const selector = {};\n\n      this._sortSpecParts.forEach(spec => {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i))); // If you specify a matcher for this Sorter, _keyFilter may be set to a\n    // function which selects whether or not a given \"sort key\" (tuple of values\n    // for the different sort spec fields) is compatible with the selector.\n\n    this._keyFilter = null;\n\n    if (options.matcher) {\n      this._useWithMatcher(options.matcher);\n    }\n  }\n\n  getComparator(options) {\n    // If sort is specified or have no distances, just use the comparator from\n    // the source specification (which defaults to \"everything is equal\".\n    // issue #3599\n    // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n    // sort effectively overrides $near\n    if (this._sortSpecParts.length || !options || !options.distances) {\n      return this._getBaseComparator();\n    }\n\n    const distances = options.distances; // Return a comparator which compares using $near distances.\n\n    return (a, b) => {\n      if (!distances.has(a._id)) {\n        throw Error(`Missing distance for ${a._id}`);\n      }\n\n      if (!distances.has(b._id)) {\n        throw Error(`Missing distance for ${b._id}`);\n      }\n\n      return distances.get(a._id) - distances.get(b._id);\n    };\n  } // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n\n\n  _compareKeys(key1, key2) {\n    if (key1.length !== this._sortSpecParts.length || key2.length !== this._sortSpecParts.length) {\n      throw Error('Key has wrong length');\n    }\n\n    return this._keyComparator(key1, key2);\n  } // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n\n\n  _generateKeysFromDoc(doc, cb) {\n    if (this._sortSpecParts.length === 0) {\n      throw new Error('can\\'t generate keys without a spec');\n    }\n\n    const pathFromIndices = indices => `${indices.join(',')},`;\n\n    let knownPaths = null; // maps index -> ({'' -> value} or {path -> value})\n\n    const valuesByIndexAndPath = this._sortSpecParts.map(spec => {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      let branches = expandArraysInBranches(spec.lookup(doc), true); // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one null value.\n\n      if (!branches.length) {\n        branches = [{\n          value: null\n        }];\n      }\n\n      const element = Object.create(null);\n      let usedPaths = false;\n      branches.forEach(branch => {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1) {\n            throw Error('multiple branches but no array used?');\n          }\n\n          element[''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n        const path = pathFromIndices(branch.arrayIndices);\n\n        if (hasOwn.call(element, path)) {\n          throw Error(`duplicate path: ${path}`);\n        }\n\n        element[path] = branch.value; // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n\n        if (knownPaths && !hasOwn.call(knownPaths, path)) {\n          throw Error('cannot index parallel arrays');\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!hasOwn.call(element, '') && Object.keys(knownPaths).length !== Object.keys(element).length) {\n          throw Error('cannot index parallel arrays!');\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n        Object.keys(element).forEach(path => {\n          knownPaths[path] = true;\n        });\n      }\n\n      return element;\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      const soleKey = valuesByIndexAndPath.map(values => {\n        if (!hasOwn.call(values, '')) {\n          throw Error('no value in sole key case?');\n        }\n\n        return values[''];\n      });\n      cb(soleKey);\n      return;\n    }\n\n    Object.keys(knownPaths).forEach(path => {\n      const key = valuesByIndexAndPath.map(values => {\n        if (hasOwn.call(values, '')) {\n          return values[''];\n        }\n\n        if (!hasOwn.call(values, path)) {\n          throw Error('missing path?');\n        }\n\n        return values[path];\n      });\n      cb(key);\n    });\n  } // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n\n\n  _getBaseComparator() {\n    if (this._sortFunction) {\n      return this._sortFunction;\n    } // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n\n\n    if (!this._sortSpecParts.length) {\n      return (doc1, doc2) => 0;\n    }\n\n    return (doc1, doc2) => {\n      const key1 = this._getMinKeyFromDoc(doc1);\n\n      const key2 = this._getMinKeyFromDoc(doc2);\n\n      return this._compareKeys(key1, key2);\n    };\n  } // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n\n\n  _getMinKeyFromDoc(doc) {\n    let minKey = null;\n\n    this._generateKeysFromDoc(doc, key => {\n      if (!this._keyCompatibleWithSelector(key)) {\n        return;\n      }\n\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n\n      if (this._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    }); // This could happen if our key filter somehow filters out all the keys even\n    // though somehow the selector matches.\n\n\n    if (minKey === null) {\n      throw Error('sort selector found no keys in doc?');\n    }\n\n    return minKey;\n  }\n\n  _getPaths() {\n    return this._sortSpecParts.map(part => part.path);\n  }\n\n  _keyCompatibleWithSelector(key) {\n    return !this._keyFilter || this._keyFilter(key);\n  } // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n\n\n  _keyFieldComparator(i) {\n    const invert = !this._sortSpecParts[i].ascending;\n    return (key1, key2) => {\n      const compare = LocalCollection._f._cmp(key1[i], key2[i]);\n\n      return invert ? -compare : compare;\n    };\n  } // In MongoDB, if you have documents\n  //    {_id: 'x', a: [1, 10]} and\n  //    {_id: 'y', a: [5, 15]},\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n  // match the selector, and 5 comes before 10).\n  //\n  // The way this works is pretty subtle!  For example, if the documents\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n  // both follow this rule (y before x).  (ie, you do have to apply this\n  // through $elemMatch.)\n  //\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\n  // skip sort keys that don't match the selector. The logic here is pretty\n  // subtle and undocumented; we've gotten as close as we can figure out based\n  // on our understanding of Mongo's behavior.\n\n\n  _useWithMatcher(matcher) {\n    if (this._keyFilter) {\n      throw Error('called _useWithMatcher twice?');\n    } // If we are only sorting by distance, then we're not going to bother to\n    // build a key filter.\n    // XXX figure out how geoqueries interact with this stuff\n\n\n    if (!this._sortSpecParts.length) {\n      return;\n    }\n\n    const selector = matcher._selector; // If the user just passed a falsey selector to find(),\n    // then we can't get a key filter from it.\n\n    if (!selector) {\n      return;\n    } // If the user just passed a literal function to find(), then we can't get a\n    // key filter from it.\n\n\n    if (selector instanceof Function) {\n      return;\n    }\n\n    const constraintsByPath = {};\n\n    this._sortSpecParts.forEach(spec => {\n      constraintsByPath[spec.path] = [];\n    });\n\n    Object.keys(selector).forEach(key => {\n      const subSelector = selector[key]; // XXX support $and and $or\n\n      const constraints = constraintsByPath[key];\n\n      if (!constraints) {\n        return;\n      } // XXX it looks like the real MongoDB implementation isn't \"does the\n      // regexp match\" but \"does the value fall into a range named by the\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n      // \"does the regexp match\" is a good approximation.\n\n\n      if (subSelector instanceof RegExp) {\n        // As far as we can tell, using either of the options that both we and\n        // MongoDB support ('i' and 'm') disables use of the key filter. This\n        // makes sense: MongoDB mostly appears to be calculating ranges of an\n        // index to use, which means it only cares about regexps that match\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the\n        // literal prefix of the regexp from actually meaning one range.\n        if (subSelector.ignoreCase || subSelector.multiline) {\n          return;\n        }\n\n        constraints.push(regexpElementMatcher(subSelector));\n        return;\n      }\n\n      if (isOperatorObject(subSelector)) {\n        Object.keys(subSelector).forEach(operator => {\n          const operand = subSelector[operator];\n\n          if (['$lt', '$lte', '$gt', '$gte'].includes(operator)) {\n            // XXX this depends on us knowing that these operators don't use any\n            // of the arguments to compileElementSelector other than operand.\n            constraints.push(ELEMENT_OPERATORS[operator].compileElementSelector(operand));\n          } // See comments in the RegExp block above.\n\n\n          if (operator === '$regex' && !subSelector.$options) {\n            constraints.push(ELEMENT_OPERATORS.$regex.compileElementSelector(operand, subSelector));\n          } // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n\n        });\n        return;\n      } // OK, it's an equality thing.\n\n\n      constraints.push(equalityElementMatcher(subSelector));\n    }); // It appears that the first sort field is treated differently from the\n    // others; we shouldn't create a key filter unless the first sort field is\n    // restricted, though after that point we can restrict the other sort fields\n    // or not as we wish.\n\n    if (!constraintsByPath[this._sortSpecParts[0].path].length) {\n      return;\n    }\n\n    this._keyFilter = key => this._sortSpecParts.every((specPart, index) => constraintsByPath[specPart.path].every(fn => fn(key[index])));\n  }\n\n}\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return (a, b) => {\n    for (let i = 0; i < comparatorArray.length; ++i) {\n      const compare = comparatorArray[i](a, b);\n\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/minimongo/minimongo_server.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.minimongo = exports, {\n  LocalCollection: LocalCollection,\n  Minimongo: Minimongo,\n  MinimongoTest: MinimongoTest,\n  MinimongoError: MinimongoError\n});\n\n})();\n","servePath":"/packages/minimongo.js","sourceMap":{"version":3,"sources":["packages/minimongo/minimongo_server.js","packages/minimongo/common.js","packages/minimongo/cursor.js","packages/minimongo/local_collection.js","packages/minimongo/matcher.js","packages/minimongo/minimongo_common.js","packages/minimongo/observe_handle.js","packages/minimongo/sorter.js"],"names":["module","watch","require","hasOwn","isNumericKey","isOperatorObject","pathsToTree","projectionDetails","v","Minimongo","_pathsElidingNumericKeys","paths","map","path","split","filter","part","join","Matcher","prototype","affectedByModifier","modifier","Object","assign","$set","$unset","meaningfulPaths","_getPaths","modifiedPaths","concat","keys","some","mod","meaningfulPath","sel","i","j","length","canBecomeTrueByModifier","isSimple","modifierPaths","pathHasNumericKeys","expectedScalarIsObject","_selector","modifierPath","startsWith","matchingDocument","EJSON","clone","LocalCollection","_modify","error","name","setPropertyError","documentMatches","result","combineIntoProjection","projection","selectorPaths","includes","combineImportantPathsIntoProjection","_matchingDocument","undefined","fallback","valueSelector","$eq","$in","matcher","placeholder","find","onlyContainsKeys","lowerBound","Infinity","upperBound","forEach","op","call","middle","x","Sorter","_selectorForAffectedByModifier","details","tree","node","fullPath","mergedProjection","treeToPaths","including","mergedExclProjection","getPaths","selector","_paths","obj","every","k","prefix","key","value","export","ELEMENT_OPERATORS","compileDocumentSelector","equalityElementMatcher","expandArraysInBranches","isIndexable","makeLookupFunction","nothingMatcher","populateDocumentWithQueryFields","regexpElementMatcher","default","hasOwnProperty","$lt","makeInequality","cmpValue","$gt","$lte","$gte","$mod","compileElementSelector","operand","Array","isArray","Error","divisor","remainder","elementMatchers","option","RegExp","$size","dontExpandLeafArrays","$type","dontIncludeLeafArrays","_f","_type","$bitsAllSet","mask","getOperandBitmask","bitmask","getValueBitmask","byte","$bitsAnySet","$bitsAllClear","$bitsAnyClear","$regex","regexp","$options","test","source","$elemMatch","_isPlainObject","isDocMatcher","LOGICAL_OPERATORS","reduce","a","b","subMatcher","inElemMatch","compileValueSelector","arrayElement","arg","dontIterate","$and","subSelector","andDocumentMatchers","compileArrayOfDocumentSelectors","$or","matchers","doc","fn","$nor","$where","selectorValue","_recordPathUsed","_hasWhere","Function","$comment","VALUE_OPERATORS","convertElementMatcherToBranchedMatcher","$not","invertBranchedMatcher","$ne","$nin","$exists","exists","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","andBranchedMatchers","isRoot","_hasGeoQuery","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","branch","curDistance","_isUpdate","arrayIndices","andSomeMatchers","subMatchers","docOrBranches","match","subResult","selectors","docSelector","options","docMatchers","substr","_isSimple","lookUpByIndex","valueMatcher","Boolean","operatorBranchedMatcher","elementMatcher","branches","expanded","element","matched","pointA","pointB","Math","hypot","elementSelector","_equal","docOrBranchedValues","skipTheArrays","branchesOut","thisIsArray","push","Number","isInteger","Uint8Array","Int32Array","buffer","isBinary","ArrayBuffer","max","view","isSafeInteger","Uint32Array","BYTES_PER_ELEMENT","insertIntoDocument","document","existingKey","indexOf","branchedMatcher","branchValues","s","inconsistentOK","theseAreOperators","selKey","thisIsOperator","JSON","stringify","cmpValueComparator","operandType","_cmp","parts","firstPart","lookupRest","slice","omitUnnecessaryFields","firstLevel","appendToResult","more","forSort","arrayIndex","MinimongoTest","MinimongoError","message","field","operatorMatchers","operator","simpleRange","simpleEquality","simpleInclusion","newLeafFn","conflictFn","root","pathArray","success","lastKey","y","populateDocumentWithKeyValue","getPrototypeOf","populateDocumentWithObject","unprefixedKeys","validateObject","object","query","_selectorIsId","fields","fieldsKeys","sort","_id","keyPath","rule","projectionRulesTree","currentPath","anotherPath","toString","lastIndex","validateKeyInPath","Cursor","constructor","collection","sorter","_selectorIsIdPerhapsAsObject","_selectorId","hasGeoQuery","skip","limit","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","count","applySkipLimit","_depend","added","removed","_getRawObjects","ordered","fetch","Symbol","iterator","addedBefore","changed","movedBefore","index","objects","next","done","callback","thisArg","getTransform","observe","_observeFromObserveChanges","observeChanges","_observeChangesCallbacksAreOrdered","_allow_unordered","distances","_IdMap","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","self","args","arguments","_observeQueue","queueTask","apply","_suppress_initial","_map","handle","ObserveHandle","stop","active","onInvalidate","drain","rewind","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","selectedDoc","_docs","get","set","clear","id","matchResult","getComparator","_publishCursor","subscription","Package","mongo","Mongo","Collection","Meteor","_SynchronousQueue","create","_savedOriginals","findOne","insert","assertHasValidFieldNames","_useOID","MongoID","ObjectID","Random","has","_saveOriginal","queriesToRecompute","_insertInResults","_recomputeResults","defer","pauseObservers","remove","equals","size","_eachPossiblyMatchingDoc","queryRemove","removeId","removeDoc","_removeFromResults","resumeObservers","_diffQueryChanges","retrieveOriginals","originals","saveOriginals","update","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","memoizedCloneIfNeeded","docToMemoize","recomputeQids","updateCount","queryResult","_modifyAndNotify","multi","insertedId","upsert","_createUpsertDocument","_returnObject","numberAffected","specificIds","matched_before","old_doc","afterMatch","after","before","_updateInResults","oldResults","_CachingChangeObserver","orderedFromCallbacks","callbacks","docs","OrderedDict","idStringify","applyChange","putBefore","moveBefore","DiffSequence","applyChanges","IdMap","idParse","__wrappedTransform__","wrapped","transformed","nonreactive","_binarySearch","cmp","array","first","range","halfRange","floor","_checkSupportedProjection","_idProjection","ruleTree","subdoc","selectorDocument","isModify","_isModificationMod","newDoc","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","subIds","_insertInSortedList","splice","isReplace","isModifier","setOnInsert","modFunc","MODIFIERS","keypath","keyparts","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","observeCallbacks","suppressed","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","addedAt","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","changedFields","makeChangedFields","old_idx","new_idx","$currentDate","Date","$min","$max","$inc","$setOnInsert","$push","$each","toPush","position","$position","$slice","sortFunction","$sort","spliceArguments","$pushAll","$addToSet","isEach","values","toAdd","$pop","toPop","$pull","toPull","out","$pullAll","$rename","target2","$bit","invalidCharMsg","$","assertIsValidFieldName","usedArrayIndex","last","keypart","parseInt","isUpdate","_docMatcher","_compileSelector","hasWhere","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","getTime","toArray","LocalCollection_","spec","_sortSpecParts","_sortFunction","addSpecPart","ascending","charAt","lookup","_keyComparator","composeComparators","_keyFieldComparator","_keyFilter","_useWithMatcher","_getBaseComparator","_compareKeys","key1","key2","_generateKeysFromDoc","cb","pathFromIndices","knownPaths","valuesByIndexAndPath","usedPaths","soleKey","doc1","doc2","_getMinKeyFromDoc","minKey","_keyCompatibleWithSelector","invert","compare","constraintsByPath","constraints","ignoreCase","multiline","specPart","comparatorArray"],"mappings":"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","file":"/packages/minimongo.js","sourcesContent":["import './minimongo_common.js';\nimport {\n  hasOwn,\n  isNumericKey,\n  isOperatorObject,\n  pathsToTree,\n  projectionDetails,\n} from './common.js';\n\nMinimongo._pathsElidingNumericKeys = paths => paths.map(path =>\n  path.split('.').filter(part => !isNumericKey(part)).join('.')\n);\n\n// Returns true if the modifier applied to some document may change the result\n// of matching the document by selector\n// The modifier is always in a form of Object:\n//  - $set\n//    - 'a.b.22.z': value\n//    - 'foo.bar': 42\n//  - $unset\n//    - 'abc.d': 1\nMinimongo.Matcher.prototype.affectedByModifier = function(modifier) {\n  // safe check for $set/$unset being objects\n  modifier = Object.assign({$set: {}, $unset: {}}, modifier);\n\n  const meaningfulPaths = this._getPaths();\n  const modifiedPaths = [].concat(\n    Object.keys(modifier.$set),\n    Object.keys(modifier.$unset)\n  );\n\n  return modifiedPaths.some(path => {\n    const mod = path.split('.');\n\n    return meaningfulPaths.some(meaningfulPath => {\n      const sel = meaningfulPath.split('.');\n\n      let i = 0, j = 0;\n\n      while (i < sel.length && j < mod.length) {\n        if (isNumericKey(sel[i]) && isNumericKey(mod[j])) {\n          // foo.4.bar selector affected by foo.4 modifier\n          // foo.3.bar selector unaffected by foo.4 modifier\n          if (sel[i] === mod[j]) {\n            i++;\n            j++;\n          } else {\n            return false;\n          }\n        } else if (isNumericKey(sel[i])) {\n          // foo.4.bar selector unaffected by foo.bar modifier\n          return false;\n        } else if (isNumericKey(mod[j])) {\n          j++;\n        } else if (sel[i] === mod[j]) {\n          i++;\n          j++;\n        } else {\n          return false;\n        }\n      }\n\n      // One is a prefix of another, taking numeric fields into account\n      return true;\n    });\n  });\n};\n\n// @param modifier - Object: MongoDB-styled modifier with `$set`s and `$unsets`\n//                           only. (assumed to come from oplog)\n// @returns - Boolean: if after applying the modifier, selector can start\n//                     accepting the modified value.\n// NOTE: assumes that document affected by modifier didn't match this Matcher\n// before, so if modifier can't convince selector in a positive change it would\n// stay 'false'.\n// Currently doesn't support $-operators and numeric indices precisely.\nMinimongo.Matcher.prototype.canBecomeTrueByModifier = function(modifier) {\n  if (!this.affectedByModifier(modifier)) {\n    return false;\n  }\n\n  if (!this.isSimple()) {\n    return true;\n  }\n\n  modifier = Object.assign({$set: {}, $unset: {}}, modifier);\n\n  const modifierPaths = [].concat(\n    Object.keys(modifier.$set),\n    Object.keys(modifier.$unset)\n  );\n\n  if (this._getPaths().some(pathHasNumericKeys) ||\n      modifierPaths.some(pathHasNumericKeys)) {\n    return true;\n  }\n\n  // check if there is a $set or $unset that indicates something is an\n  // object rather than a scalar in the actual object where we saw $-operator\n  // NOTE: it is correct since we allow only scalars in $-operators\n  // Example: for selector {'a.b': {$gt: 5}} the modifier {'a.b.c':7} would\n  // definitely set the result to false as 'a.b' appears to be an object.\n  const expectedScalarIsObject = Object.keys(this._selector).some(path => {\n    if (!isOperatorObject(this._selector[path])) {\n      return false;\n    }\n\n    return modifierPaths.some(modifierPath =>\n      modifierPath.startsWith(`${path}.`)\n    );\n  });\n\n  if (expectedScalarIsObject) {\n    return false;\n  }\n\n  // See if we can apply the modifier on the ideally matching object. If it\n  // still matches the selector, then the modifier could have turned the real\n  // object in the database into something matching.\n  const matchingDocument = EJSON.clone(this.matchingDocument());\n\n  // The selector is too complex, anything can happen.\n  if (matchingDocument === null) {\n    return true;\n  }\n\n  try {\n    LocalCollection._modify(matchingDocument, modifier);\n  } catch (error) {\n    // Couldn't set a property on a field which is a scalar or null in the\n    // selector.\n    // Example:\n    // real document: { 'a.b': 3 }\n    // selector: { 'a': 12 }\n    // converted selector (ideal document): { 'a': 12 }\n    // modifier: { $set: { 'a.b': 4 } }\n    // We don't know what real document was like but from the error raised by\n    // $set on a scalar field we can reason that the structure of real document\n    // is completely different.\n    if (error.name === 'MinimongoError' && error.setPropertyError) {\n      return false;\n    }\n\n    throw error;\n  }\n\n  return this.documentMatches(matchingDocument).result;\n};\n\n// Knows how to combine a mongo selector and a fields projection to a new fields\n// projection taking into account active fields from the passed selector.\n// @returns Object - projection object (same as fields option of mongo cursor)\nMinimongo.Matcher.prototype.combineIntoProjection = function(projection) {\n  const selectorPaths = Minimongo._pathsElidingNumericKeys(this._getPaths());\n\n  // Special case for $where operator in the selector - projection should depend\n  // on all fields of the document. getSelectorPaths returns a list of paths\n  // selector depends on. If one of the paths is '' (empty string) representing\n  // the root or the whole document, complete projection should be returned.\n  if (selectorPaths.includes('')) {\n    return {};\n  }\n\n  return combineImportantPathsIntoProjection(selectorPaths, projection);\n};\n\n// Returns an object that would match the selector if possible or null if the\n// selector is too complex for us to analyze\n// { 'a.b': { ans: 42 }, 'foo.bar': null, 'foo.baz': \"something\" }\n// => { a: { b: { ans: 42 } }, foo: { bar: null, baz: \"something\" } }\nMinimongo.Matcher.prototype.matchingDocument = function() {\n  // check if it was computed before\n  if (this._matchingDocument !== undefined) {\n    return this._matchingDocument;\n  }\n\n  // If the analysis of this selector is too hard for our implementation\n  // fallback to \"YES\"\n  let fallback = false;\n\n  this._matchingDocument = pathsToTree(\n    this._getPaths(),\n    path => {\n      const valueSelector = this._selector[path];\n\n      if (isOperatorObject(valueSelector)) {\n        // if there is a strict equality, there is a good\n        // chance we can use one of those as \"matching\"\n        // dummy value\n        if (valueSelector.$eq) {\n          return valueSelector.$eq;\n        }\n\n        if (valueSelector.$in) {\n          const matcher = new Minimongo.Matcher({placeholder: valueSelector});\n\n          // Return anything from $in that matches the whole selector for this\n          // path. If nothing matches, returns `undefined` as nothing can make\n          // this selector into `true`.\n          return valueSelector.$in.find(placeholder =>\n            matcher.documentMatches({placeholder}).result\n          );\n        }\n\n        if (onlyContainsKeys(valueSelector, ['$gt', '$gte', '$lt', '$lte'])) {\n          let lowerBound = -Infinity;\n          let upperBound = Infinity;\n\n          ['$lte', '$lt'].forEach(op => {\n            if (hasOwn.call(valueSelector, op) &&\n                valueSelector[op] < upperBound) {\n              upperBound = valueSelector[op];\n            }\n          });\n\n          ['$gte', '$gt'].forEach(op => {\n            if (hasOwn.call(valueSelector, op) &&\n                valueSelector[op] > lowerBound) {\n              lowerBound = valueSelector[op];\n            }\n          });\n\n          const middle = (lowerBound + upperBound) / 2;\n          const matcher = new Minimongo.Matcher({placeholder: valueSelector});\n\n          if (!matcher.documentMatches({placeholder: middle}).result &&\n              (middle === lowerBound || middle === upperBound)) {\n            fallback = true;\n          }\n\n          return middle;\n        }\n\n        if (onlyContainsKeys(valueSelector, ['$nin', '$ne'])) {\n          // Since this._isSimple makes sure $nin and $ne are not combined with\n          // objects or arrays, we can confidently return an empty object as it\n          // never matches any scalar.\n          return {};\n        }\n\n        fallback = true;\n      }\n\n      return this._selector[path];\n    },\n    x => x);\n\n  if (fallback) {\n    this._matchingDocument = null;\n  }\n\n  return this._matchingDocument;\n};\n\n// Minimongo.Sorter gets a similar method, which delegates to a Matcher it made\n// for this exact purpose.\nMinimongo.Sorter.prototype.affectedByModifier = function(modifier) {\n  return this._selectorForAffectedByModifier.affectedByModifier(modifier);\n};\n\nMinimongo.Sorter.prototype.combineIntoProjection = function(projection) {\n  return combineImportantPathsIntoProjection(\n    Minimongo._pathsElidingNumericKeys(this._getPaths()),\n    projection\n  );\n};\n\nfunction combineImportantPathsIntoProjection(paths, projection) {\n  const details = projectionDetails(projection);\n\n  // merge the paths to include\n  const tree = pathsToTree(\n    paths,\n    path => true,\n    (node, path, fullPath) => true,\n    details.tree\n  );\n  const mergedProjection = treeToPaths(tree);\n\n  if (details.including) {\n    // both selector and projection are pointing on fields to include\n    // so we can just return the merged tree\n    return mergedProjection;\n  }\n\n  // selector is pointing at fields to include\n  // projection is pointing at fields to exclude\n  // make sure we don't exclude important paths\n  const mergedExclProjection = {};\n\n  Object.keys(mergedProjection).forEach(path => {\n    if (!mergedProjection[path]) {\n      mergedExclProjection[path] = false;\n    }\n  });\n\n  return mergedExclProjection;\n}\n\nfunction getPaths(selector) {\n  return Object.keys(new Minimongo.Matcher(selector)._paths);\n\n  // XXX remove it?\n  // return Object.keys(selector).map(k => {\n  //   // we don't know how to handle $where because it can be anything\n  //   if (k === '$where') {\n  //     return ''; // matches everything\n  //   }\n\n  //   // we branch from $or/$and/$nor operator\n  //   if (['$or', '$and', '$nor'].includes(k)) {\n  //     return selector[k].map(getPaths);\n  //   }\n\n  //   // the value is a literal or some comparison operator\n  //   return k;\n  // })\n  //   .reduce((a, b) => a.concat(b), [])\n  //   .filter((a, b, c) => c.indexOf(a) === b);\n}\n\n// A helper to ensure object has only certain keys\nfunction onlyContainsKeys(obj, keys) {\n  return Object.keys(obj).every(k => keys.includes(k));\n}\n\nfunction pathHasNumericKeys(path) {\n  return path.split('.').some(isNumericKey);\n}\n\n// Returns a set of key paths similar to\n// { 'foo.bar': 1, 'a.b.c': 1 }\nfunction treeToPaths(tree, prefix = '') {\n  const result = {};\n\n  Object.keys(tree).forEach(key => {\n    const value = tree[key];\n    if (value === Object(value)) {\n      Object.assign(result, treeToPaths(value, `${prefix + key}.`));\n    } else {\n      result[prefix + key] = value;\n    }\n  });\n\n  return result;\n}\n","import LocalCollection from './local_collection.js';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nexport const ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2\n            && typeof operand[0] === 'number'\n            && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => (\n        typeof value === 'number' && value % divisor === remainder\n      );\n    },\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    },\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    },\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand !== 'number') {\n        throw Error('$type needs a number');\n      }\n\n      return value => (\n        value !== undefined && LocalCollection._f._type(value) === operand\n      );\n    },\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    },\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    },\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    },\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(\n        Object.keys(operand)\n          .filter(key => !hasOwn.call(LOGICAL_OPERATORS, key))\n          .reduce((a, b) => Object.assign(a, {[b]: operand[b]}), {}),\n        true);\n\n      let subMatcher;\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher =\n          compileDocumentSelector(operand, matcher, {inElemMatch: true});\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    },\n  },\n};\n\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(\n      compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)\n    );\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result);\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result};\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result);\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {result};\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return doc => ({result: selectorValue.call(doc, doc)});\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({result: true});\n  },\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)\n    );\n  },\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))\n    );\n  },\n  $nin(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(\n        ELEMENT_OPERATORS.$in.compileElementSelector(operand)\n      )\n    );\n  },\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(\n      value => value !== undefined\n    );\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    let maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(\n            point,\n            {type: 'Point', coordinates: pointToArray(value)}\n          );\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n          ? 0\n          : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {result: false};\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n\n      return result;\n    };\n  },\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result &&\n          subResult.distance !== undefined &&\n          match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {inElemMatch});\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nexport function compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(\n      subSelector,\n      matcher,\n      options.isRoot\n    );\n\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector)\n    );\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(\n    equalityElementMatcher(valueSelector)\n  );\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays\n      ? branches\n      : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nexport function equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {result: true};\n}\n\nexport function expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({arrayIndices: branch.arrayIndices, value: branch.value});\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) &&\n      operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n\n    return view;\n  }\n\n  // bad operand\n  throw Error(\n    `operand to ${selector} must be a numeric bitmask (representable as a ` +\n    'non-negative 32-bit signed integer), a bindata bitmask or an array with ' +\n    'bit positions (non-negative integers)'\n  );\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(\n      Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)\n    );\n\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (\n      (existingKey.length > key.length && existingKey.indexOf(`${key}.`) === 0) ||\n      (key.length > existingKey.length && key.indexOf(`${existingKey}.`) === 0)\n    ) {\n      throw new Error(\n        `cannot infer query fields to set, both paths '${existingKey}' and ` +\n        `'${key}' are matched`\n      );\n    } else if (existingKey === key) {\n      throw new Error(\n        `cannot infer query fields to set, path '${key}' is matched twice`\n      );\n    }\n  });\n\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !branchedMatcher(branchValues).result};\n  };\n}\n\nexport function isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nexport function isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nexport function isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\n          `Inconsistent operator: ${JSON.stringify(valueSelector)}`\n        );\n      }\n\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    },\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nexport function makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = (\n    parts.length > 1 &&\n    makeLookupFunction(parts.slice(1).join('.'))\n  );\n\n  const omitUnnecessaryFields = result => {\n    if (!result.dontIterate) {\n      delete result.dontIterate;\n    }\n\n    if (result.arrayIndices && !result.arrayIndices.length) {\n      delete result.arrayIndices;\n    }\n\n    return result;\n  };\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return (doc, arrayIndices = []) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices.concat(+firstPart, 'x');\n    }\n\n    // Do our first lookup.\n    const firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return [omitUnnecessaryFields({\n        arrayIndices,\n        dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),\n        value: firstLevel\n      })];\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return [omitUnnecessaryFields({arrayIndices, value: undefined})];\n    }\n\n    const result = [];\n    const appendToResult = more => {\n      result.push(...more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) &&\n        !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {makeLookupFunction};\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nexport function nothingMatcher(docOrBranchedValues) {\n  return {result: false};\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n\n    const simpleRange = (\n      ['$lt', '$lte', '$gt', '$gte'].includes(operator) &&\n      typeof operand === 'number'\n    );\n\n    const simpleEquality = (\n      ['$ne', '$eq'].includes(operator) &&\n      operand !== Object(operand)\n    );\n\n    const simpleInclusion = (\n      ['$in', '$nin'].includes(operator)\n      && Array.isArray(operand)\n      && !operand.some(x => x === Object(x))\n    );\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(\n        options.compileElementSelector(operand, valueSelector, matcher),\n        options\n      );\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nexport function pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root;\n\n    // use .every just for iteration with break\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(\n          tree[key],\n          pathArray.slice(0, i + 1).join('.'),\n          path\n        );\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element =>\n          populateDocumentWithKeyValue(document, key, element)\n        );\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nexport function populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element =>\n          populateDocumentWithQueryFields(element, document)\n        );\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nexport function projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError(\n        'You cannot currently mix including and excluding fields.'\n      );\n    }\n  });\n\n  const projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    path => including,\n    (node, path, fullPath) => {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n      //\n      // Note, how second time the return set of keys is different.\n      const currentPath = fullPath;\n      const anotherPath = path;\n      throw MinimongoError(\n        `both ${currentPath} and ${anotherPath} found in fields option, ` +\n        'using both of them may trigger unexpected behavior. Did you mean to ' +\n        'use only one of them?'\n      );\n    });\n\n  return {including, tree: projectionRulesTree};\n}\n\n// Takes a RegExp object and returns an element matcher.\nexport function regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\n      `The dotted field '${key}' in '${path}.${key} is not valid for storage.`\n    );\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\n      `The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`\n    );\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n","import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(\n          options.sort || [],\n          {matcher: this.matcher}\n        );\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @summary Returns the number of documents that match a query.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @param {boolean} [applySkipLimit=true] If set to `false`, the value\n   *                                         returned will reflect the total\n   *                                         number of matching documents,\n   *                                         ignoring any value supplied for\n   *                                         limit\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count(applySkipLimit = true) {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n      applySkipLimit\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      const results = ordered ? query.results : query.results._map;\n\n      Object.keys(results).forEach(key => {\n        const doc = results[key];\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // Since we don't actually have a \"nextObject\" interface, there's really no\n  // reason to have a \"rewind\" interface.  All it did was make multiple calls\n  // to fetch/map/forEach return nothing the second time.\n  // XXX COMPAT WITH 0.8.1\n  rewind() {}\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n","import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = new Meteor._SynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResults(query, doc);\n        }\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // Defer because the caller likely doesn't expect the callback to be run\n    // immediately.\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      const result = this._docs.size();\n\n      this._docs.clear();\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n\n      if (callback) {\n        Meteor.defer(() => {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResults(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    const recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        this._modifyAndNotify(\n          doc,\n          mod,\n          recomputeQids,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (! doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = {numberAffected: updateCount};\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  _eachPossiblyMatchingDoc(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      specificIds.some(id => {\n        const doc = this._docs.get(id);\n\n        if (doc) {\n          return fn(doc, id) === false;\n        }\n      });\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    const old_doc = EJSON.clone(doc);\n\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResults(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResults(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResults(query, doc, old_doc);\n      }\n    });\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          const doc = EJSON.clone(fields);\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, fields, before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          const doc = this.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          const doc = EJSON.clone(fields);\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, fields);\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (!hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return result;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n            doc,\n            indices\n              ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n              : -1,\n            before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n            transform(doc),\n            oldDoc,\n            indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n          ? before\n            ? this.docs.indexOf(before)\n            : this.docs.size()\n          : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n          transform(EJSON.clone(this.docs.get(id))),\n          from,\n          to,\n          before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n            transform(doc),\n            transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  const handle = cursor.observeChanges(changeObserver.applyChange);\n\n  suppressed = false;\n\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResults = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n","import LocalCollection from './local_collection.js';\nimport {\n  compileDocumentSelector,\n  hasOwn,\n  nothingMatcher,\n} from './common.js';\n\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a 'selector' is the EJSON object representing a selector\n//  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a 'result object' is an object with a 'result' field and maybe\n//    distance and arrayIndices.\n//  - a 'branched value' is an object with a 'value' field and maybe\n//    'dontIterate' and 'arrayIndices'.\n//  - a 'document' is a top-level object that can be stored in a collection.\n//  - a 'lookup function' is a function that takes in a document and returns\n//    an array of 'branched values'.\n//  - a 'branched matcher' maps from an array of branched values to a result\n//    object.\n//  - an 'element matcher' maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nexport default class Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {};\n    // Set to true if compilation finds a $near.\n    this._hasGeoQuery = false;\n    // Set to true if compilation finds a $where.\n    this._hasWhere = false;\n    // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n    this._isSimple = true;\n    // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n    this._matchingDocument = undefined;\n    // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector);\n    // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  }\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n      this._recordPathUsed('');\n\n      return doc => ({result: !!selector.call(doc)});\n    }\n\n    // shorthand -- scalar _id\n    if (LocalCollection._selectorIsId(selector)) {\n      this._selector = {_id: selector};\n      this._recordPathUsed('_id');\n\n      return doc => ({result: EJSON.equals(doc._id, selector)});\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (Array.isArray(selector) ||\n        EJSON.isBinary(selector) ||\n        typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n\n    return compileDocumentSelector(selector, this, {isRoot: true});\n  }\n\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    }\n\n    // note that typeof(/x/) === \"object\"\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    }\n\n    // object\n    return 3;\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [\n      -1,  // (not a type)\n      1,   // number\n      2,   // string\n      3,   // object\n      4,   // array\n      5,   // binary\n      -1,  // deprecated\n      6,   // ObjectID\n      7,   // bool\n      8,   // Date\n      0,   // null\n      9,   // RegExp\n      -1,  // deprecated\n      100, // JS code\n      2,   // deprecated (symbol)\n      100, // JS code\n      1,   // 32-bit int\n      8,   // Mongo timestamp\n      1    // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    }\n\n    // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = a.getTime();\n      b = b.getTime();\n    }\n\n    if (ta === 1) // double\n      return a - b;\n\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) { // Array\n      for (let i = 0; ; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) { // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  },\n};\n","import LocalCollection_ from './local_collection.js';\nimport Matcher from './matcher.js';\nimport Sorter from './sorter.js';\n\nLocalCollection = LocalCollection_;\nMinimongo = {\n    LocalCollection: LocalCollection_,\n    Matcher,\n    Sorter\n};\n","// ObserveHandle: the return value of a live query.\nexport default class ObserveHandle {}\n","import {\n  ELEMENT_OPERATORS,\n  equalityElementMatcher,\n  expandArraysInBranches,\n  hasOwn,\n  isOperatorObject,\n  makeLookupFunction,\n  regexpElementMatcher,\n} from './common.js';\n\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nexport default class Sorter {\n  constructor(spec, options = {}) {\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    const addSpecPart = (path, ascending) => {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(`unsupported sort key: ${path}`);\n      }\n\n      this._sortSpecParts.push({\n        ascending,\n        lookup: makeLookupFunction(path, {forSort: true}),\n        path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(element => {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (typeof spec === 'object') {\n      Object.keys(spec).forEach(key => {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(`Bad sort specification: ${JSON.stringify(spec)}`);\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      const selector = {};\n\n      this._sortSpecParts.forEach(spec => {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(\n      this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i))\n    );\n\n    // If you specify a matcher for this Sorter, _keyFilter may be set to a\n    // function which selects whether or not a given \"sort key\" (tuple of values\n    // for the different sort spec fields) is compatible with the selector.\n    this._keyFilter = null;\n\n    if (options.matcher) {\n      this._useWithMatcher(options.matcher);\n    }\n  }\n\n  getComparator(options) {\n    // If sort is specified or have no distances, just use the comparator from\n    // the source specification (which defaults to \"everything is equal\".\n    // issue #3599\n    // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n    // sort effectively overrides $near\n    if (this._sortSpecParts.length || !options || !options.distances) {\n      return this._getBaseComparator();\n    }\n\n    const distances = options.distances;\n\n    // Return a comparator which compares using $near distances.\n    return (a, b) => {\n      if (!distances.has(a._id)) {\n        throw Error(`Missing distance for ${a._id}`);\n      }\n\n      if (!distances.has(b._id)) {\n        throw Error(`Missing distance for ${b._id}`);\n      }\n\n      return distances.get(a._id) - distances.get(b._id);\n    };\n  }\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys(key1, key2) {\n    if (key1.length !== this._sortSpecParts.length ||\n        key2.length !== this._sortSpecParts.length) {\n      throw Error('Key has wrong length');\n    }\n\n    return this._keyComparator(key1, key2);\n  }\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc(doc, cb) {\n    if (this._sortSpecParts.length === 0) {\n      throw new Error('can\\'t generate keys without a spec');\n    }\n\n    const pathFromIndices = indices => `${indices.join(',')},`;\n\n    let knownPaths = null;\n\n    // maps index -> ({'' -> value} or {path -> value})\n    const valuesByIndexAndPath = this._sortSpecParts.map(spec => {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      let branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one null value.\n      if (!branches.length) {\n        branches = [{value: null}];\n      }\n\n      const element = Object.create(null);\n      let usedPaths = false;\n\n      branches.forEach(branch => {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1) {\n            throw Error('multiple branches but no array used?');\n          }\n\n          element[''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n\n        const path = pathFromIndices(branch.arrayIndices);\n\n        if (hasOwn.call(element, path)) {\n          throw Error(`duplicate path: ${path}`);\n        }\n\n        element[path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !hasOwn.call(knownPaths, path)) {\n          throw Error('cannot index parallel arrays');\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!hasOwn.call(element, '') &&\n            Object.keys(knownPaths).length !== Object.keys(element).length) {\n          throw Error('cannot index parallel arrays!');\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n\n        Object.keys(element).forEach(path => {\n          knownPaths[path] = true;\n        });\n      }\n\n      return element;\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      const soleKey = valuesByIndexAndPath.map(values => {\n        if (!hasOwn.call(values, '')) {\n          throw Error('no value in sole key case?');\n        }\n\n        return values[''];\n      });\n\n      cb(soleKey);\n\n      return;\n    }\n\n    Object.keys(knownPaths).forEach(path => {\n      const key = valuesByIndexAndPath.map(values => {\n        if (hasOwn.call(values, '')) {\n          return values[''];\n        }\n\n        if (!hasOwn.call(values, path)) {\n          throw Error('missing path?');\n        }\n\n        return values[path];\n      });\n\n      cb(key);\n    });\n  }\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator() {\n    if (this._sortFunction) {\n      return this._sortFunction;\n    }\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!this._sortSpecParts.length) {\n      return (doc1, doc2) => 0;\n    }\n\n    return (doc1, doc2) => {\n      const key1 = this._getMinKeyFromDoc(doc1);\n      const key2 = this._getMinKeyFromDoc(doc2);\n      return this._compareKeys(key1, key2);\n    };\n  }\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc(doc) {\n    let minKey = null;\n\n    this._generateKeysFromDoc(doc, key => {\n      if (!this._keyCompatibleWithSelector(key)) {\n        return;\n      }\n\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n\n      if (this._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    // This could happen if our key filter somehow filters out all the keys even\n    // though somehow the selector matches.\n    if (minKey === null) {\n      throw Error('sort selector found no keys in doc?');\n    }\n\n    return minKey;\n  }\n\n  _getPaths() {\n    return this._sortSpecParts.map(part => part.path);\n  }\n\n  _keyCompatibleWithSelector(key) {\n    return !this._keyFilter || this._keyFilter(key);\n  }\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator(i) {\n    const invert = !this._sortSpecParts[i].ascending;\n\n    return (key1, key2) => {\n      const compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      return invert ? -compare : compare;\n    };\n  }\n\n  // In MongoDB, if you have documents\n  //    {_id: 'x', a: [1, 10]} and\n  //    {_id: 'y', a: [5, 15]},\n  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).\n  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not\n  // match the selector, and 5 comes before 10).\n  //\n  // The way this works is pretty subtle!  For example, if the documents\n  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and\n  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),\n  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and\n  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})\n  // both follow this rule (y before x).  (ie, you do have to apply this\n  // through $elemMatch.)\n  //\n  // So if you pass a matcher to this sorter's constructor, we will attempt to\n  // skip sort keys that don't match the selector. The logic here is pretty\n  // subtle and undocumented; we've gotten as close as we can figure out based\n  // on our understanding of Mongo's behavior.\n  _useWithMatcher(matcher) {\n    if (this._keyFilter) {\n      throw Error('called _useWithMatcher twice?');\n    }\n\n    // If we are only sorting by distance, then we're not going to bother to\n    // build a key filter.\n    // XXX figure out how geoqueries interact with this stuff\n    if (!this._sortSpecParts.length) {\n      return;\n    }\n\n    const selector = matcher._selector;\n\n    // If the user just passed a falsey selector to find(),\n    // then we can't get a key filter from it.\n    if (!selector) {\n      return;\n    }\n\n    // If the user just passed a literal function to find(), then we can't get a\n    // key filter from it.\n    if (selector instanceof Function) {\n      return;\n    }\n\n    const constraintsByPath = {};\n\n    this._sortSpecParts.forEach(spec => {\n      constraintsByPath[spec.path] = [];\n    });\n\n    Object.keys(selector).forEach(key => {\n      const subSelector = selector[key];\n\n      // XXX support $and and $or\n      const constraints = constraintsByPath[key];\n      if (!constraints) {\n        return;\n      }\n\n      // XXX it looks like the real MongoDB implementation isn't \"does the\n      // regexp match\" but \"does the value fall into a range named by the\n      // literal prefix of the regexp\", ie \"foo\" in /^foo(bar|baz)+/  But\n      // \"does the regexp match\" is a good approximation.\n      if (subSelector instanceof RegExp) {\n        // As far as we can tell, using either of the options that both we and\n        // MongoDB support ('i' and 'm') disables use of the key filter. This\n        // makes sense: MongoDB mostly appears to be calculating ranges of an\n        // index to use, which means it only cares about regexps that match\n        // one range (with a literal prefix), and both 'i' and 'm' prevent the\n        // literal prefix of the regexp from actually meaning one range.\n        if (subSelector.ignoreCase || subSelector.multiline) {\n          return;\n        }\n\n        constraints.push(regexpElementMatcher(subSelector));\n        return;\n      }\n\n      if (isOperatorObject(subSelector)) {\n        Object.keys(subSelector).forEach(operator => {\n          const operand = subSelector[operator];\n\n          if (['$lt', '$lte', '$gt', '$gte'].includes(operator)) {\n            // XXX this depends on us knowing that these operators don't use any\n            // of the arguments to compileElementSelector other than operand.\n            constraints.push(\n              ELEMENT_OPERATORS[operator].compileElementSelector(operand)\n            );\n          }\n\n          // See comments in the RegExp block above.\n          if (operator === '$regex' && !subSelector.$options) {\n            constraints.push(\n              ELEMENT_OPERATORS.$regex.compileElementSelector(\n                operand,\n                subSelector\n              )\n            );\n          }\n\n          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch\n        });\n\n        return;\n      }\n\n      // OK, it's an equality thing.\n      constraints.push(equalityElementMatcher(subSelector));\n    });\n\n    // It appears that the first sort field is treated differently from the\n    // others; we shouldn't create a key filter unless the first sort field is\n    // restricted, though after that point we can restrict the other sort fields\n    // or not as we wish.\n    if (!constraintsByPath[this._sortSpecParts[0].path].length) {\n      return;\n    }\n\n    this._keyFilter = key =>\n      this._sortSpecParts.every((specPart, index) =>\n        constraintsByPath[specPart.path].every(fn => fn(key[index]))\n      )\n    ;\n  }\n}\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return (a, b) => {\n    for (let i = 0; i < comparatorArray.length; ++i) {\n      const compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n"]}}]