[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Collection2 = Package['aldeed:collection2-core'].Collection2;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"aldeed:schema-index\":{\"indexing.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_schema-index/indexing.js                                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar SimpleSchema = void 0;                                                                                          // 1\nmodule.watch(require(\"simpl-schema\"), {                                                                             // 1\n  \"default\": function (v) {                                                                                         // 1\n    SimpleSchema = v;                                                                                               // 1\n  }                                                                                                                 // 1\n}, 0);                                                                                                              // 1\nvar Collection2 = void 0;                                                                                           // 1\nmodule.watch(require(\"meteor/aldeed:collection2-core\"), {                                                           // 1\n  \"default\": function (v) {                                                                                         // 1\n    Collection2 = v;                                                                                                // 1\n  }                                                                                                                 // 1\n}, 1);                                                                                                              // 1\nvar Meteor = void 0;                                                                                                // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                            // 1\n  Meteor: function (v) {                                                                                            // 1\n    Meteor = v;                                                                                                     // 1\n  }                                                                                                                 // 1\n}, 2);                                                                                                              // 1\n// Extend the schema options allowed by SimpleSchema                                                                // 6\nSimpleSchema.extendOptions(['index', // one of Number, String, Boolean                                              // 7\n'unique', // Boolean                                                                                                // 9\n'sparse'] // Boolean                                                                                                // 10\n);                                                                                                                  // 7\nCollection2.on('schema.attached', function (collection, ss) {                                                       // 13\n  // Define validation error messages                                                                               // 14\n  if (ss.version >= 2 && ss.messageBox && typeof ss.messageBox.messages === 'function') {                           // 15\n    ss.messageBox.messages({                                                                                        // 16\n      en: {                                                                                                         // 17\n        notUnique: '{{label}} must be unique'                                                                       // 18\n      }                                                                                                             // 17\n    });                                                                                                             // 16\n  }                                                                                                                 // 21\n});                                                                                                                 // 22\n                                                                                                                    //\nif (Meteor.isServer) {                                                                                              // 24\n  Collection2.on('schema.attached', function (collection, ss) {                                                     // 25\n    function ensureIndex(index, indexName, unique, sparse) {                                                        // 26\n      Meteor.startup(function () {                                                                                  // 27\n        collection._collection._ensureIndex(index, {                                                                // 28\n          background: true,                                                                                         // 29\n          name: indexName,                                                                                          // 30\n          unique: unique,                                                                                           // 31\n          sparse: sparse                                                                                            // 32\n        });                                                                                                         // 28\n      });                                                                                                           // 34\n    }                                                                                                               // 35\n                                                                                                                    //\n    function dropIndex(indexName) {                                                                                 // 37\n      Meteor.startup(function () {                                                                                  // 38\n        try {                                                                                                       // 39\n          collection._collection._dropIndex(indexName);                                                             // 40\n        } catch (err) {// no index with that name, which is what we want                                            // 41\n        }                                                                                                           // 43\n      });                                                                                                           // 44\n    }                                                                                                               // 45\n                                                                                                                    //\n    var propName = ss.version === 2 ? 'mergedSchema' : 'schema'; // Loop over fields definitions and ensure collection indexes (server side only)\n                                                                                                                    //\n    var schema = ss[propName]();                                                                                    // 50\n    Object.keys(schema).forEach(function (fieldName) {                                                              // 51\n      var definition = schema[fieldName];                                                                           // 52\n                                                                                                                    //\n      if ('index' in definition || definition.unique === true) {                                                    // 53\n        var index = {},                                                                                             // 54\n            indexValue; // If they specified `unique: true` but not `index`,                                        // 54\n        // we assume `index: 1` to set up the unique index in mongo                                                 // 56\n                                                                                                                    //\n        if ('index' in definition) {                                                                                // 57\n          indexValue = definition.index;                                                                            // 58\n          if (indexValue === true) indexValue = 1;                                                                  // 59\n        } else {                                                                                                    // 60\n          indexValue = 1;                                                                                           // 61\n        }                                                                                                           // 62\n                                                                                                                    //\n        var indexName = 'c2_' + fieldName; // In the index object, we want object array keys without the \".$\" piece\n                                                                                                                    //\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");                                                       // 65\n        index[idxFieldName] = indexValue;                                                                           // 66\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);                                // 67\n        var sparse = definition.sparse || false; // If unique and optional, force sparse to prevent errors          // 68\n                                                                                                                    //\n        if (!sparse && unique && definition.optional) sparse = true;                                                // 71\n                                                                                                                    //\n        if (indexValue === false) {                                                                                 // 73\n          dropIndex(indexName);                                                                                     // 74\n        } else {                                                                                                    // 75\n          ensureIndex(index, indexName, unique, sparse);                                                            // 76\n        }                                                                                                           // 77\n      }                                                                                                             // 78\n    });                                                                                                             // 79\n  });                                                                                                               // 80\n}                                                                                                                   // 81\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/aldeed:schema-index/indexing.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aldeed:schema-index'] = exports;\n\n})();\n","servePath":"/packages/aldeed_schema-index.js","sourceMap":{"version":3,"sources":["packages/aldeed:schema-index/indexing.js"],"names":["SimpleSchema","module","watch","require","v","Collection2","Meteor","extendOptions","on","collection","ss","version","messageBox","messages","en","notUnique","isServer","ensureIndex","index","indexName","unique","sparse","startup","_collection","_ensureIndex","background","name","dropIndex","_dropIndex","err","propName","schema","Object","keys","forEach","fieldName","definition","indexValue","idxFieldName","replace","optional"],"mappings":"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","file":"/packages/aldeed_schema-index.js","sourcesContent":["// collection2-core checks to make sure that simpl-schema package is added\nimport SimpleSchema from 'simpl-schema';\nimport Collection2 from 'meteor/aldeed:collection2-core';\nimport { Meteor } from 'meteor/meteor';\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions([\n  'index', // one of Number, String, Boolean\n  'unique', // Boolean\n  'sparse', // Boolean\n]);\n\nCollection2.on('schema.attached', function (collection, ss) {\n  // Define validation error messages\n  if (ss.version >= 2 && ss.messageBox && typeof ss.messageBox.messages === 'function') {\n    ss.messageBox.messages({\n      en: {\n        notUnique: '{{label}} must be unique',\n      },\n    });\n  }\n});\n\nif (Meteor.isServer) {\n  Collection2.on('schema.attached', function (collection, ss) {\n    function ensureIndex(index, indexName, unique, sparse) {\n      Meteor.startup(function () {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name: indexName,\n          unique: unique,\n          sparse: sparse\n        });\n      });\n    }\n\n    function dropIndex(indexName) {\n      Meteor.startup(function () {\n        try {\n          collection._collection._dropIndex(indexName);\n        } catch (err) {\n          // no index with that name, which is what we want\n        }\n      });\n    }\n\n    const propName = ss.version === 2 ? 'mergedSchema' : 'schema';\n\n    // Loop over fields definitions and ensure collection indexes (server side only)\n    var schema = ss[propName]();\n    Object.keys(schema).forEach(function (fieldName) {\n      var definition = schema[fieldName];\n      if ('index' in definition || definition.unique === true) {\n        var index = {}, indexValue;\n        // If they specified `unique: true` but not `index`,\n        // we assume `index: 1` to set up the unique index in mongo\n        if ('index' in definition) {\n          indexValue = definition.index;\n          if (indexValue === true) indexValue = 1;\n        } else {\n          indexValue = 1;\n        }\n        var indexName = 'c2_' + fieldName;\n        // In the index object, we want object array keys without the \".$\" piece\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false;\n\n        // If unique and optional, force sparse to prevent errors\n        if (!sparse && unique && definition.optional) sparse = true;\n\n        if (indexValue === false) {\n          dropIndex(indexName);\n        } else {\n          ensureIndex(index, indexName, unique, sparse);\n        }\n      }\n    });\n  });\n}\n"]}}]