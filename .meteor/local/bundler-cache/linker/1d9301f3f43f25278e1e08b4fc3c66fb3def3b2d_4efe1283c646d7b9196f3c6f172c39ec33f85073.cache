[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Mongo = Package.mongo.Mongo;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar EJSON = Package.ejson.EJSON;\nvar EventEmitter = Package['raix:eventemitter'].EventEmitter;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Collection2;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"aldeed:collection2-core\":{\"collection2.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/aldeed_collection2-core/collection2.js                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                               //\n                                                                                                                      //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                      //\n                                                                                                                      //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                     //\n                                                                                                                      //\nvar EventEmitter = void 0;                                                                                            // 1\nmodule.watch(require(\"meteor/raix:eventemitter\"), {                                                                   // 1\n  EventEmitter: function (v) {                                                                                        // 1\n    EventEmitter = v;                                                                                                 // 1\n  }                                                                                                                   // 1\n}, 0);                                                                                                                // 1\nvar Meteor = void 0;                                                                                                  // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                              // 1\n  Meteor: function (v) {                                                                                              // 1\n    Meteor = v;                                                                                                       // 1\n  }                                                                                                                   // 1\n}, 1);                                                                                                                // 1\nvar EJSON = void 0;                                                                                                   // 1\nmodule.watch(require(\"meteor/ejson\"), {                                                                               // 1\n  EJSON: function (v) {                                                                                               // 1\n    EJSON = v;                                                                                                        // 1\n  }                                                                                                                   // 1\n}, 2);                                                                                                                // 1\n                                                                                                                      //\nvar _ = void 0;                                                                                                       // 1\n                                                                                                                      //\nmodule.watch(require(\"meteor/underscore\"), {                                                                          // 1\n  _: function (v) {                                                                                                   // 1\n    _ = v;                                                                                                            // 1\n  }                                                                                                                   // 1\n}, 3);                                                                                                                // 1\nvar checkNpmVersions = void 0;                                                                                        // 1\nmodule.watch(require(\"meteor/tmeasday:check-npm-versions\"), {                                                         // 1\n  checkNpmVersions: function (v) {                                                                                    // 1\n    checkNpmVersions = v;                                                                                             // 1\n  }                                                                                                                   // 1\n}, 4);                                                                                                                // 1\ncheckNpmVersions({                                                                                                    // 7\n  'simpl-schema': '>=0.0.0'                                                                                           // 7\n}, 'aldeed:meteor-collection2-core');                                                                                 // 7\n                                                                                                                      //\nvar SimpleSchema = require('simpl-schema').default; // Exported only for listening to events                          // 9\n                                                                                                                      //\n                                                                                                                      //\nvar Collection2 = new EventEmitter(); /**                                                                             // 12\n                                       * Mongo.Collection.prototype.attachSchema                                      //\n                                       * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n                                       *    from which to create a new SimpleSchema instance                          //\n                                       * @param {Object} [options]                                                    //\n                                       * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n                                       *    through the collection's transform to properly validate.                  //\n                                       * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n                                       * @return {undefined}                                                          //\n                                       *                                                                              //\n                                       * Use this method to attach a schema to a collection created by another package,\n                                       * such as Meteor.users. It is most likely unsafe to call this method more than\n                                       * once for a single collection, or to call this for a collection that had a    //\n                                       * schema object passed to its constructor.                                     //\n                                       */                                                                             //\n                                                                                                                      //\nMongo.Collection.prototype.attachSchema = function () {                                                               // 29\n  function c2AttachSchema(ss, options) {                                                                              // 29\n    var self = this;                                                                                                  // 30\n    options = options || {}; // Allow passing just the schema object                                                  // 31\n                                                                                                                      //\n    if (!(ss instanceof SimpleSchema)) {                                                                              // 34\n      ss = new SimpleSchema(ss);                                                                                      // 35\n    }                                                                                                                 // 36\n                                                                                                                      //\n    self._c2 = self._c2 || {}; // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`\n                                                                                                                      //\n    if (self._c2._simpleSchema && options.replace !== true) {                                                         // 41\n      if (ss.version >= 2) {                                                                                          // 42\n        var newSS = new SimpleSchema(self._c2._simpleSchema);                                                         // 43\n        newSS.extend(ss);                                                                                             // 44\n        ss = newSS;                                                                                                   // 45\n      } else {                                                                                                        // 46\n        ss = new SimpleSchema([self._c2._simpleSchema, ss]);                                                          // 47\n      }                                                                                                               // 48\n    }                                                                                                                 // 49\n                                                                                                                      //\n    var selector = options.selector;                                                                                  // 51\n                                                                                                                      //\n    function attachTo(obj) {                                                                                          // 53\n      if ((typeof selector === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(selector)) === \"object\") {           // 54\n        // Index of existing schema with identical selector                                                           // 55\n        var schemaIndex = -1; // we need an array to hold multiple schemas                                            // 56\n                                                                                                                      //\n        obj._c2._simpleSchemas = obj._c2._simpleSchemas || []; // Loop through existing schemas with selectors        // 59\n                                                                                                                      //\n        obj._c2._simpleSchemas.forEach(function (schema, index) {                                                     // 62\n          // if we find a schema with an identical selector, save it's index                                          // 63\n          if (_.isEqual(schema.selector, selector)) {                                                                 // 64\n            schemaIndex = index;                                                                                      // 65\n          }                                                                                                           // 66\n        });                                                                                                           // 67\n                                                                                                                      //\n        if (schemaIndex === -1) {                                                                                     // 68\n          // We didn't find the schema in our array - push it into the array                                          // 69\n          obj._c2._simpleSchemas.push({                                                                               // 70\n            schema: new SimpleSchema(ss),                                                                             // 71\n            selector: selector                                                                                        // 72\n          });                                                                                                         // 70\n        } else {                                                                                                      // 74\n          // We found a schema with an identical selector in our array,                                               // 75\n          if (options.replace !== true) {                                                                             // 76\n            // Merge with existing schema unless options.replace is `true`                                            // 77\n            if (obj._c2._simpleSchemas[schemaIndex].schema.version >= 2) {                                            // 78\n              obj._c2._simpleSchemas[schemaIndex].schema.extend(ss);                                                  // 79\n            } else {                                                                                                  // 80\n              obj._c2._simpleSchemas[schemaIndex].schema = new SimpleSchema([obj._c2._simpleSchemas[schemaIndex].schema, ss]);\n            }                                                                                                         // 82\n          } else {                                                                                                    // 83\n            // If options.repalce is `true` replace existing schema with new schema                                   // 84\n            obj._c2._simpleSchemas[schemaIndex].schema = ss;                                                          // 85\n          }                                                                                                           // 86\n        } // Remove existing schemas without selector                                                                 // 88\n                                                                                                                      //\n                                                                                                                      //\n        delete obj._c2._simpleSchema;                                                                                 // 91\n      } else {                                                                                                        // 92\n        // Track the schema in the collection                                                                         // 93\n        obj._c2._simpleSchema = ss; // Remove existing schemas with selector                                          // 94\n                                                                                                                      //\n        delete obj._c2._simpleSchemas;                                                                                // 97\n      }                                                                                                               // 98\n    }                                                                                                                 // 99\n                                                                                                                      //\n    attachTo(self); // Attach the schema to the underlying LocalCollection, too                                       // 101\n                                                                                                                      //\n    if (self._collection instanceof LocalCollection) {                                                                // 103\n      self._collection._c2 = self._collection._c2 || {};                                                              // 104\n      attachTo(self._collection);                                                                                     // 105\n    }                                                                                                                 // 106\n                                                                                                                      //\n    defineDeny(self, options);                                                                                        // 108\n    keepInsecure(self);                                                                                               // 109\n    Collection2.emit('schema.attached', self, ss, options);                                                           // 111\n  }                                                                                                                   // 112\n                                                                                                                      //\n  return c2AttachSchema;                                                                                              // 29\n}();                                                                                                                  // 29\n                                                                                                                      //\n_.each([Mongo.Collection, LocalCollection], function (obj) {                                                          // 114\n  /**                                                                                                                 // 115\n   * simpleSchema                                                                                                     //\n   * @description function detect the correct schema by given params. If it                                           //\n   * detect multi-schema presence in `self`, then it made an attempt to find a                                        //\n   * `selector` in args                                                                                               //\n   * @param {Object} doc - It could be <update> on update/upsert or document                                          //\n   * itself on insert/remove                                                                                          //\n   * @param {Object} [options] - It could be <update> on update/upsert etc                                            //\n   * @param {Object} [query] - it could be <query> on update/upsert                                                   //\n   * @return {Object} Schema                                                                                          //\n   */obj.prototype.simpleSchema = function (doc, options, query) {                                                    //\n    if (!this._c2) return null;                                                                                       // 127\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;                                                        // 128\n    var schemas = this._c2._simpleSchemas;                                                                            // 130\n                                                                                                                      //\n    if (schemas && schemas.length > 0) {                                                                              // 131\n      if (!doc) throw new Error('collection.simpleSchema() requires doc argument when there are multiple schemas');   // 132\n      var schema, selector, target;                                                                                   // 134\n                                                                                                                      //\n      for (var i = 0; i < schemas.length; i++) {                                                                      // 135\n        schema = schemas[i];                                                                                          // 136\n        selector = Object.keys(schema.selector)[0]; // We will set this to undefined because in theory you might want to select\n        // on a null value.                                                                                           // 140\n                                                                                                                      //\n        target = undefined; // here we are looking for selector in different places                                   // 141\n        // $set should have more priority here                                                                        // 144\n                                                                                                                      //\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {                                                  // 145\n          target = doc.$set[selector];                                                                                // 146\n        } else if (typeof doc[selector] !== 'undefined') {                                                            // 147\n          target = doc[selector];                                                                                     // 148\n        } else if (options && options.selector) {                                                                     // 149\n          target = options.selector[selector];                                                                        // 150\n        } else if (query && query[selector]) {                                                                        // 151\n          // on upsert/update operations                                                                              // 151\n          target = query[selector];                                                                                   // 152\n        } // we need to compare given selector with doc property or option to                                         // 153\n        // find right schema                                                                                          // 156\n                                                                                                                      //\n                                                                                                                      //\n        if (target !== undefined && target === schema.selector[selector]) {                                           // 157\n          return schema.schema;                                                                                       // 158\n        }                                                                                                             // 159\n      }                                                                                                               // 160\n    }                                                                                                                 // 161\n                                                                                                                      //\n    return null;                                                                                                      // 163\n  };                                                                                                                  // 164\n}); // Wrap DB write operation methods                                                                                // 165\n                                                                                                                      //\n                                                                                                                      //\n_.each(['insert', 'update'], function (methodName) {                                                                  // 168\n  var _super = Mongo.Collection.prototype[methodName];                                                                // 169\n                                                                                                                      //\n  Mongo.Collection.prototype[methodName] = function () {                                                              // 170\n    var self = this,                                                                                                  // 171\n        options,                                                                                                      // 171\n        args = _.toArray(arguments);                                                                                  // 171\n                                                                                                                      //\n    options = methodName === \"insert\" ? args[1] : args[2]; // Support missing options arg                             // 174\n                                                                                                                      //\n    if (!options || typeof options === \"function\") {                                                                  // 177\n      options = {};                                                                                                   // 178\n    }                                                                                                                 // 179\n                                                                                                                      //\n    if (self._c2 && options.bypassCollection2 !== true) {                                                             // 181\n      var userId = null;                                                                                              // 182\n                                                                                                                      //\n      try {                                                                                                           // 183\n        // https://github.com/aldeed/meteor-collection2/issues/175                                                    // 183\n        userId = Meteor.userId();                                                                                     // 184\n      } catch (err) {}                                                                                                // 185\n                                                                                                                      //\n      args = doValidate.call(self, methodName, args, Meteor.isServer || self._connection === null, // getAutoValues   // 187\n      userId, Meteor.isServer // isFromTrustedCode                                                                    // 192\n      );                                                                                                              // 187\n                                                                                                                      //\n      if (!args) {                                                                                                    // 195\n        // doValidate already called the callback or threw the error so we're done.                                   // 196\n        // But insert should always return an ID to match core behavior.                                              // 197\n        return methodName === \"insert\" ? self._makeNewID() : undefined;                                               // 198\n      }                                                                                                               // 199\n    } else {                                                                                                          // 200\n      // We still need to adjust args because insert does not take options                                            // 201\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);                                // 202\n    }                                                                                                                 // 203\n                                                                                                                      //\n    return _super.apply(self, args);                                                                                  // 205\n  };                                                                                                                  // 206\n}); /*                                                                                                                // 207\n     * Private                                                                                                        //\n     */                                                                                                               //\n                                                                                                                      //\nfunction doValidate(type, args, getAutoValues, userId, isFromTrustedCode) {                                           // 213\n  var self = this,                                                                                                    // 214\n      doc,                                                                                                            // 214\n      callback,                                                                                                       // 214\n      error,                                                                                                          // 214\n      options,                                                                                                        // 214\n      isUpsert,                                                                                                       // 214\n      selector,                                                                                                       // 214\n      last,                                                                                                           // 214\n      hasCallback;                                                                                                    // 214\n                                                                                                                      //\n  if (!args.length) {                                                                                                 // 216\n    throw new Error(type + \" requires an argument\");                                                                  // 217\n  } // Gather arguments and cache the selector                                                                        // 218\n                                                                                                                      //\n                                                                                                                      //\n  if (type === \"insert\") {                                                                                            // 221\n    doc = args[0];                                                                                                    // 222\n    options = args[1];                                                                                                // 223\n    callback = args[2]; // The real insert doesn't take options                                                       // 224\n                                                                                                                      //\n    if (typeof options === \"function\") {                                                                              // 227\n      args = [doc, options];                                                                                          // 228\n    } else if (typeof callback === \"function\") {                                                                      // 229\n      args = [doc, callback];                                                                                         // 230\n    } else {                                                                                                          // 231\n      args = [doc];                                                                                                   // 232\n    }                                                                                                                 // 233\n  } else if (type === \"update\") {                                                                                     // 234\n    selector = args[0];                                                                                               // 235\n    doc = args[1];                                                                                                    // 236\n    options = args[2];                                                                                                // 237\n    callback = args[3];                                                                                               // 238\n  } else {                                                                                                            // 239\n    throw new Error(\"invalid type argument\");                                                                         // 240\n  }                                                                                                                   // 241\n                                                                                                                      //\n  var validatedObjectWasInitiallyEmpty = _.isEmpty(doc); // Support missing options arg                               // 243\n                                                                                                                      //\n                                                                                                                      //\n  if (!callback && typeof options === \"function\") {                                                                   // 246\n    callback = options;                                                                                               // 247\n    options = {};                                                                                                     // 248\n  }                                                                                                                   // 249\n                                                                                                                      //\n  options = options || {};                                                                                            // 250\n  last = args.length - 1;                                                                                             // 252\n  hasCallback = typeof args[last] === 'function'; // If update was called with upsert:true, flag as an upsert         // 254\n                                                                                                                      //\n  isUpsert = type === \"update\" && options.upsert === true; // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here                                                                                    // 260\n                                                                                                                      //\n  var schema = self.simpleSchema(doc, options, selector);                                                             // 261\n  var isLocalCollection = self._connection === null; // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n                                                                                                                      //\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {                                    // 265\n    getAutoValues = false;                                                                                            // 266\n  } // Determine validation context                                                                                   // 267\n                                                                                                                      //\n                                                                                                                      //\n  var validationContext = options.validationContext;                                                                  // 270\n                                                                                                                      //\n  if (validationContext) {                                                                                            // 271\n    if (typeof validationContext === 'string') {                                                                      // 272\n      validationContext = schema.namedContext(validationContext);                                                     // 273\n    }                                                                                                                 // 274\n  } else {                                                                                                            // 275\n    validationContext = schema.namedContext();                                                                        // 276\n  } // Add a default callback function if we're on the client and no callback was given                               // 277\n                                                                                                                      //\n                                                                                                                      //\n  if (Meteor.isClient && !callback) {                                                                                 // 280\n    // Client can't block, so it can't report errors by exception,                                                    // 281\n    // only by callback. If they forget the callback, give them a                                                     // 282\n    // default one that logs the error, so they aren't totally                                                        // 283\n    // baffled if their writes don't work because their database is                                                   // 284\n    // down.                                                                                                          // 285\n    callback = function (err) {                                                                                       // 286\n      if (err) {                                                                                                      // 287\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));                                                // 288\n      }                                                                                                               // 289\n    };                                                                                                                // 290\n  } // If client validation is fine or is skipped but then something                                                  // 291\n  // is found to be invalid on the server, we get that error back                                                     // 294\n  // as a special Meteor.Error that we need to parse.                                                                 // 295\n                                                                                                                      //\n                                                                                                                      //\n  if (Meteor.isClient && hasCallback) {                                                                               // 296\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);                          // 297\n  }                                                                                                                   // 298\n                                                                                                                      //\n  var schemaAllowsId = schema.allowsKey(\"_id\");                                                                       // 300\n                                                                                                                      //\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {                                                              // 301\n    doc._id = self._makeNewID();                                                                                      // 302\n  } // Get the docId for passing in the autoValue/custom context                                                      // 303\n                                                                                                                      //\n                                                                                                                      //\n  var docId;                                                                                                          // 306\n                                                                                                                      //\n  if (type === 'insert') {                                                                                            // 307\n    docId = doc._id; // might be undefined                                                                            // 308\n  } else if (type === \"update\" && selector) {                                                                         // 309\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;             // 310\n  } // If _id has already been added, remove it temporarily if it's                                                   // 311\n  // not explicitly defined in the schema.                                                                            // 314\n                                                                                                                      //\n                                                                                                                      //\n  var cachedId;                                                                                                       // 315\n                                                                                                                      //\n  if (doc._id && !schemaAllowsId) {                                                                                   // 316\n    cachedId = doc._id;                                                                                               // 317\n    delete doc._id;                                                                                                   // 318\n  }                                                                                                                   // 319\n                                                                                                                      //\n  function doClean(docToClean, getAutoValues, filter, autoConvert, removeEmptyStrings, trimStrings) {                 // 321\n    // Clean the doc/modifier in place                                                                                // 322\n    schema.clean(docToClean, {                                                                                        // 323\n      mutate: true,                                                                                                   // 324\n      filter: filter,                                                                                                 // 325\n      autoConvert: autoConvert,                                                                                       // 326\n      getAutoValues: getAutoValues,                                                                                   // 327\n      isModifier: type !== \"insert\",                                                                                  // 328\n      removeEmptyStrings: removeEmptyStrings,                                                                         // 329\n      trimStrings: trimStrings,                                                                                       // 330\n      extendAutoValueContext: _.extend({                                                                              // 331\n        isInsert: type === \"insert\",                                                                                  // 332\n        isUpdate: type === \"update\" && options.upsert !== true,                                                       // 333\n        isUpsert: isUpsert,                                                                                           // 334\n        userId: userId,                                                                                               // 335\n        isFromTrustedCode: isFromTrustedCode,                                                                         // 336\n        docId: docId,                                                                                                 // 337\n        isLocalCollection: isLocalCollection                                                                          // 338\n      }, options.extendAutoValueContext || {})                                                                        // 331\n    });                                                                                                               // 323\n  } // Preliminary cleaning on both client and server. On the server and for local                                    // 341\n  // collections, automatic values will also be set at this point.                                                    // 344\n                                                                                                                      //\n                                                                                                                      //\n  doClean(doc, getAutoValues, options.filter !== false, options.autoConvert !== false, options.removeEmptyStrings !== false, options.trimStrings !== false); // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our                                              // 355\n  // changes would persist into the database.                                                                         // 356\n                                                                                                                      //\n  var docToValidate = {};                                                                                             // 357\n                                                                                                                      //\n  for (var prop in meteorBabelHelpers.sanitizeForInObject(doc)) {                                                     // 358\n    // We omit prototype properties when cloning because they will not be valid                                       // 359\n    // and mongo omits them when saving to the database anyway.                                                       // 360\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {                                                            // 361\n      docToValidate[prop] = doc[prop];                                                                                // 362\n    }                                                                                                                 // 363\n  } // On the server, upserts are possible; SimpleSchema handles upserts pretty                                       // 364\n  // well by default, but it will not know about the fields in the selector,                                          // 367\n  // which are also stored in the database if an insert is performed. So we                                           // 368\n  // will allow these fields to be considered for validation by adding them                                           // 369\n  // to the $set in the modifier. This is no doubt prone to errors, but there                                         // 370\n  // probably isn't any better way right now.                                                                         // 371\n                                                                                                                      //\n                                                                                                                      //\n  if (Meteor.isServer && isUpsert && _.isObject(selector)) {                                                          // 372\n    var set = docToValidate.$set || {}; // If selector uses $and format, convert to plain object selector             // 373\n                                                                                                                      //\n    if (Array.isArray(selector.$and)) {                                                                               // 376\n      var plainSelector = {};                                                                                         // 377\n      selector.$and.forEach(function (sel) {                                                                          // 378\n        _.extend(plainSelector, sel);                                                                                 // 379\n      });                                                                                                             // 380\n      docToValidate.$set = plainSelector;                                                                             // 381\n    } else {                                                                                                          // 382\n      docToValidate.$set = _.clone(selector);                                                                         // 383\n    }                                                                                                                 // 384\n                                                                                                                      //\n    if (!schemaAllowsId) delete docToValidate.$set._id;                                                               // 386\n                                                                                                                      //\n    _.extend(docToValidate.$set, set);                                                                                // 387\n  } // Set automatic values for validation on the client.                                                             // 388\n  // On the server, we already updated doc with auto values, but on the client,                                       // 391\n  // we will add them to docToValidate for validation purposes only.                                                  // 392\n  // This is because we want all actual values generated on the server.                                               // 393\n                                                                                                                      //\n                                                                                                                      //\n  if (Meteor.isClient && !isLocalCollection) {                                                                        // 394\n    doClean(docToValidate, true, false, false, false, false);                                                         // 395\n  } // XXX Maybe move this into SimpleSchema                                                                          // 396\n                                                                                                                      //\n                                                                                                                      //\n  if (!validatedObjectWasInitiallyEmpty && _.isEmpty(docToValidate)) {                                                // 399\n    throw new Error('After filtering out keys not in the schema, your ' + (type === 'update' ? 'modifier' : 'object') + ' is now empty');\n  } // Validate doc                                                                                                   // 403\n                                                                                                                      //\n                                                                                                                      //\n  var isValid;                                                                                                        // 406\n                                                                                                                      //\n  if (options.validate === false) {                                                                                   // 407\n    isValid = true;                                                                                                   // 408\n  } else {                                                                                                            // 409\n    isValid = validationContext.validate(docToValidate, {                                                             // 410\n      modifier: type === \"update\" || type === \"upsert\",                                                               // 411\n      upsert: isUpsert,                                                                                               // 412\n      extendedCustomContext: _.extend({                                                                               // 413\n        isInsert: type === \"insert\",                                                                                  // 414\n        isUpdate: type === \"update\" && options.upsert !== true,                                                       // 415\n        isUpsert: isUpsert,                                                                                           // 416\n        userId: userId,                                                                                               // 417\n        isFromTrustedCode: isFromTrustedCode,                                                                         // 418\n        docId: docId,                                                                                                 // 419\n        isLocalCollection: isLocalCollection                                                                          // 420\n      }, options.extendedCustomContext || {})                                                                         // 413\n    });                                                                                                               // 410\n  }                                                                                                                   // 423\n                                                                                                                      //\n  if (isValid) {                                                                                                      // 425\n    // Add the ID back                                                                                                // 426\n    if (cachedId) {                                                                                                   // 427\n      doc._id = cachedId;                                                                                             // 428\n    } // Update the args to reflect the cleaned doc                                                                   // 429\n    // XXX not sure this is necessary since we mutate                                                                 // 432\n                                                                                                                      //\n                                                                                                                      //\n    if (type === \"insert\") {                                                                                          // 433\n      args[0] = doc;                                                                                                  // 434\n    } else {                                                                                                          // 435\n      args[1] = doc;                                                                                                  // 436\n    } // If callback, set invalidKey when we get a mongo unique error                                                 // 437\n                                                                                                                      //\n                                                                                                                      //\n    if (Meteor.isServer && hasCallback) {                                                                             // 440\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);                        // 441\n    }                                                                                                                 // 442\n                                                                                                                      //\n    return args;                                                                                                      // 444\n  } else {                                                                                                            // 445\n    error = getErrorObject(validationContext);                                                                        // 446\n                                                                                                                      //\n    if (callback) {                                                                                                   // 447\n      // insert/update/upsert pass `false` when there's an error, so we do that                                       // 448\n      callback(error, false);                                                                                         // 449\n    } else {                                                                                                          // 450\n      throw error;                                                                                                    // 451\n    }                                                                                                                 // 452\n  }                                                                                                                   // 453\n}                                                                                                                     // 454\n                                                                                                                      //\nfunction getErrorObject(context) {                                                                                    // 456\n  var message;                                                                                                        // 457\n  var invalidKeys = typeof context.validationErrors === 'function' ? context.validationErrors() : context.invalidKeys();\n                                                                                                                      //\n  if (invalidKeys.length) {                                                                                           // 459\n    message = context.keyErrorMessage(invalidKeys[0].name);                                                           // 460\n  } else {                                                                                                            // 461\n    message = \"Failed validation\";                                                                                    // 462\n  }                                                                                                                   // 463\n                                                                                                                      //\n  var error = new Error(message);                                                                                     // 464\n  error.invalidKeys = invalidKeys;                                                                                    // 465\n  error.validationContext = context; // If on the server, we add a sanitized error, too, in case we're                // 466\n  // called from a method.                                                                                            // 468\n                                                                                                                      //\n  if (Meteor.isServer) {                                                                                              // 469\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));                        // 470\n  }                                                                                                                   // 471\n                                                                                                                      //\n  return error;                                                                                                       // 472\n}                                                                                                                     // 473\n                                                                                                                      //\nfunction addUniqueError(context, errorMessage) {                                                                      // 475\n  var name = errorMessage.split('c2_')[1].split(' ')[0];                                                              // 476\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];                                                          // 477\n  var addValidationErrorsPropName = typeof context.addValidationErrors === 'function' ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{                                                                             // 480\n    name: name,                                                                                                       // 481\n    type: 'notUnique',                                                                                                // 482\n    value: val                                                                                                        // 483\n  }]);                                                                                                                // 480\n}                                                                                                                     // 485\n                                                                                                                      //\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {                                         // 487\n  return function () {                                                                                                // 488\n    function wrappedCallbackForParsingMongoValidationErrors(error) {                                                  // 488\n      var args = _.toArray(arguments);                                                                                // 489\n                                                                                                                      //\n      if (error && (error.name === \"MongoError\" && error.code === 11001 || error.message.indexOf('MongoError: E11000' !== -1)) && error.message.indexOf('c2_') !== -1) {\n        addUniqueError(validationContext, error.message);                                                             // 493\n        args[0] = getErrorObject(validationContext);                                                                  // 494\n      }                                                                                                               // 495\n                                                                                                                      //\n      return cb.apply(this, args);                                                                                    // 496\n    }                                                                                                                 // 497\n                                                                                                                      //\n    return wrappedCallbackForParsingMongoValidationErrors;                                                            // 488\n  }();                                                                                                                // 488\n}                                                                                                                     // 498\n                                                                                                                      //\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {                                                  // 500\n  var addValidationErrorsPropName = typeof validationContext.addValidationErrors === 'function' ? 'addValidationErrors' : 'addInvalidKeys';\n  return function () {                                                                                                // 502\n    function wrappedCallbackForParsingServerErrors(error) {                                                           // 502\n      var args = _.toArray(arguments); // Handle our own validation errors                                            // 503\n                                                                                                                      //\n                                                                                                                      //\n      if (error instanceof Meteor.Error && error.error === 400 && error.reason === \"INVALID\" && typeof error.details === \"string\") {\n        var invalidKeysFromServer = EJSON.parse(error.details);                                                       // 509\n        validationContext[addValidationErrorsPropName](invalidKeysFromServer);                                        // 510\n        args[0] = getErrorObject(validationContext);                                                                  // 511\n      } // Handle Mongo unique index errors, which are forwarded to the client as 409 errors                          // 512\n      else if (error instanceof Meteor.Error && error.error === 409 && error.reason && error.reason.indexOf('E11000') !== -1 && error.reason.indexOf('c2_') !== -1) {\n          addUniqueError(validationContext, error.reason);                                                            // 519\n          args[0] = getErrorObject(validationContext);                                                                // 520\n        }                                                                                                             // 521\n                                                                                                                      //\n      return cb.apply(this, args);                                                                                    // 522\n    }                                                                                                                 // 523\n                                                                                                                      //\n    return wrappedCallbackForParsingServerErrors;                                                                     // 502\n  }();                                                                                                                // 502\n}                                                                                                                     // 524\n                                                                                                                      //\nvar alreadyInsecured = {};                                                                                            // 526\n                                                                                                                      //\nfunction keepInsecure(c) {                                                                                            // 527\n  // If insecure package is in use, we need to add allow rules that return                                            // 528\n  // true. Otherwise, it would seemingly turn off insecure mode.                                                      // 529\n  if (Package && Package.insecure && !alreadyInsecured[c._name]) {                                                    // 530\n    c.allow({                                                                                                         // 531\n      insert: function () {                                                                                           // 532\n        return true;                                                                                                  // 533\n      },                                                                                                              // 534\n      update: function () {                                                                                           // 535\n        return true;                                                                                                  // 536\n      },                                                                                                              // 537\n      remove: function () {                                                                                           // 538\n        return true;                                                                                                  // 539\n      },                                                                                                              // 540\n      fetch: [],                                                                                                      // 541\n      transform: null                                                                                                 // 542\n    });                                                                                                               // 531\n    alreadyInsecured[c._name] = true;                                                                                 // 544\n  } // If insecure package is NOT in use, then adding the two deny functions                                          // 545\n  // does not have any effect on the main app's security paradigm. The                                                // 547\n  // user will still be required to add at least one allow function of her                                            // 548\n  // own for each operation for this collection. And the user may still add                                           // 549\n  // additional deny functions, but does not have to.                                                                 // 550\n                                                                                                                      //\n}                                                                                                                     // 551\n                                                                                                                      //\nvar alreadyDefined = {};                                                                                              // 553\n                                                                                                                      //\nfunction defineDeny(c, options) {                                                                                     // 554\n  if (!alreadyDefined[c._name]) {                                                                                     // 555\n    var isLocalCollection = c._connection === null; // First define deny functions to extend doc with the results of clean\n    // and autovalues. This must be done with \"transform: null\" or we would be                                        // 560\n    // extending a clone of doc and therefore have no effect.                                                         // 561\n                                                                                                                      //\n    c.deny({                                                                                                          // 562\n      insert: function (userId, doc) {                                                                                // 563\n        // Referenced doc is cleaned in place                                                                         // 564\n        c.simpleSchema(doc).clean(doc, {                                                                              // 565\n          mutate: true,                                                                                               // 566\n          isModifier: false,                                                                                          // 567\n          // We don't do these here because they are done on the client if desired                                    // 568\n          filter: false,                                                                                              // 569\n          autoConvert: false,                                                                                         // 570\n          removeEmptyStrings: false,                                                                                  // 571\n          trimStrings: false,                                                                                         // 572\n          extendAutoValueContext: {                                                                                   // 573\n            isInsert: true,                                                                                           // 574\n            isUpdate: false,                                                                                          // 575\n            isUpsert: false,                                                                                          // 576\n            userId: userId,                                                                                           // 577\n            isFromTrustedCode: false,                                                                                 // 578\n            docId: doc._id,                                                                                           // 579\n            isLocalCollection: isLocalCollection                                                                      // 580\n          }                                                                                                           // 573\n        });                                                                                                           // 565\n        return false;                                                                                                 // 584\n      },                                                                                                              // 585\n      update: function (userId, doc, fields, modifier) {                                                              // 586\n        // Referenced modifier is cleaned in place                                                                    // 587\n        c.simpleSchema(modifier).clean(modifier, {                                                                    // 588\n          mutate: true,                                                                                               // 589\n          isModifier: true,                                                                                           // 590\n          // We don't do these here because they are done on the client if desired                                    // 591\n          filter: false,                                                                                              // 592\n          autoConvert: false,                                                                                         // 593\n          removeEmptyStrings: false,                                                                                  // 594\n          trimStrings: false,                                                                                         // 595\n          extendAutoValueContext: {                                                                                   // 596\n            isInsert: false,                                                                                          // 597\n            isUpdate: true,                                                                                           // 598\n            isUpsert: false,                                                                                          // 599\n            userId: userId,                                                                                           // 600\n            isFromTrustedCode: false,                                                                                 // 601\n            docId: doc && doc._id,                                                                                    // 602\n            isLocalCollection: isLocalCollection                                                                      // 603\n          }                                                                                                           // 596\n        });                                                                                                           // 588\n        return false;                                                                                                 // 607\n      },                                                                                                              // 608\n      fetch: ['_id'],                                                                                                 // 609\n      transform: null                                                                                                 // 610\n    }); // Second define deny functions to validate again on the server                                               // 562\n    // for client-initiated inserts and updates. These should be                                                      // 614\n    // called after the clean/autovalue functions since we're adding                                                  // 615\n    // them after. These must *not* have \"transform: null\" if options.transform is true because                       // 616\n    // we need to pass the doc through any transforms to be sure                                                      // 617\n    // that custom types are properly recognized for type validation.                                                 // 618\n                                                                                                                      //\n    c.deny(_.extend({                                                                                                 // 619\n      insert: function (userId, doc) {                                                                                // 620\n        // We pass the false options because we will have done them on client if desired                              // 621\n        doValidate.call(c, \"insert\", [doc, {                                                                          // 622\n          trimStrings: false,                                                                                         // 628\n          removeEmptyStrings: false,                                                                                  // 629\n          filter: false,                                                                                              // 630\n          autoConvert: false                                                                                          // 631\n        }, function (error) {                                                                                         // 627\n          if (error) {                                                                                                // 634\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));                               // 635\n          }                                                                                                           // 636\n        }], false, // getAutoValues                                                                                   // 637\n        userId, false // isFromTrustedCode                                                                            // 640\n        );                                                                                                            // 622\n        return false;                                                                                                 // 644\n      },                                                                                                              // 645\n      update: function (userId, doc, fields, modifier) {                                                              // 646\n        // NOTE: This will never be an upsert because client-side upserts                                             // 647\n        // are not allowed once you define allow/deny functions.                                                      // 648\n        // We pass the false options because we will have done them on client if desired                              // 649\n        doValidate.call(c, \"update\", [{                                                                               // 650\n          _id: doc && doc._id                                                                                         // 654\n        }, modifier, {                                                                                                // 654\n          trimStrings: false,                                                                                         // 657\n          removeEmptyStrings: false,                                                                                  // 658\n          filter: false,                                                                                              // 659\n          autoConvert: false                                                                                          // 660\n        }, function (error) {                                                                                         // 656\n          if (error) {                                                                                                // 663\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));                               // 664\n          }                                                                                                           // 665\n        }], false, // getAutoValues                                                                                   // 666\n        userId, false // isFromTrustedCode                                                                            // 669\n        );                                                                                                            // 650\n        return false;                                                                                                 // 673\n      },                                                                                                              // 674\n      fetch: ['_id']                                                                                                  // 675\n    }, options.transform === true ? {} : {                                                                            // 619\n      transform: null                                                                                                 // 676\n    })); // note that we've already done this collection so that we don't do it again                                 // 676\n    // if attachSchema is called again                                                                                // 679\n                                                                                                                      //\n    alreadyDefined[c._name] = true;                                                                                   // 680\n  }                                                                                                                   // 681\n}                                                                                                                     // 682\n                                                                                                                      //\nmodule.exportDefault(Collection2);                                                                                    // 1\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/aldeed:collection2-core/collection2.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['aldeed:collection2-core'] = exports, {\n  Collection2: Collection2\n});\n\n})();\n","servePath":"/packages/aldeed_collection2-core.js","sourceMap":{"version":3,"sources":["packages/aldeed:collection2-core/collection2.js"],"names":["EventEmitter","module","watch","require","v","Meteor","EJSON","_","checkNpmVersions","SimpleSchema","default","Collection2","Mongo","Collection","prototype","attachSchema","c2AttachSchema","ss","options","self","_c2","_simpleSchema","replace","version","newSS","extend","selector","attachTo","obj","schemaIndex","_simpleSchemas","forEach","schema","index","isEqual","push","_collection","LocalCollection","defineDeny","keepInsecure","emit","each","simpleSchema","doc","query","schemas","length","Error","target","i","Object","keys","undefined","$set","methodName","_super","args","toArray","arguments","bypassCollection2","userId","err","doValidate","call","isServer","_connection","_makeNewID","splice","apply","type","getAutoValues","isFromTrustedCode","callback","error","isUpsert","last","hasCallback","validatedObjectWasInitiallyEmpty","isEmpty","upsert","isLocalCollection","validationContext","namedContext","isClient","_debug","reason","stack","wrapCallbackForParsingServerErrors","schemaAllowsId","allowsKey","_id","docId","ObjectID","cachedId","doClean","docToClean","filter","autoConvert","removeEmptyStrings","trimStrings","clean","mutate","isModifier","extendAutoValueContext","isInsert","isUpdate","docToValidate","prop","hasOwnProperty","isObject","set","Array","isArray","$and","plainSelector","sel","clone","isValid","validate","modifier","extendedCustomContext","wrapCallbackForParsingMongoValidationErrors","getErrorObject","context","message","invalidKeys","validationErrors","keyErrorMessage","name","sanitizedError","stringify","addUniqueError","errorMessage","split","val","addValidationErrorsPropName","addValidationErrors","value","cb","wrappedCallbackForParsingMongoValidationErrors","code","indexOf","wrappedCallbackForParsingServerErrors","details","invalidKeysFromServer","parse","alreadyInsecured","c","Package","insecure","_name","allow","insert","update","remove","fetch","transform","alreadyDefined","deny","fields","exportDefault"],"mappings":"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","file":"/packages/aldeed_collection2-core.js","sourcesContent":["import { EventEmitter } from 'meteor/raix:eventemitter';\nimport { Meteor } from 'meteor/meteor';\nimport { EJSON } from 'meteor/ejson';\nimport { _ } from 'meteor/underscore';\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\n\ncheckNpmVersions({ 'simpl-schema': '>=0.0.0' }, 'aldeed:meteor-collection2-core');\n\nconst SimpleSchema = require('simpl-schema').default;\n\n// Exported only for listening to events\nconst Collection2 = new EventEmitter();\n\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  var self = this;\n  options = options || {};\n\n  // Allow passing just the schema object\n  if (!(ss instanceof SimpleSchema)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  self._c2 = self._c2 || {};\n\n  // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`\n  if (self._c2._simpleSchema && options.replace !== true) {\n    if (ss.version >= 2) {\n      var newSS = new SimpleSchema(self._c2._simpleSchema);\n      newSS.extend(ss);\n      ss = newSS;\n    } else {\n      ss = new SimpleSchema([self._c2._simpleSchema, ss]);\n    }\n  }\n\n  var selector = options.selector;\n\n  function attachTo(obj) {\n    if (typeof selector === \"object\") {\n      // Index of existing schema with identical selector\n      var schemaIndex = -1;\n\n      // we need an array to hold multiple schemas\n      obj._c2._simpleSchemas = obj._c2._simpleSchemas || [];\n\n      // Loop through existing schemas with selectors\n      obj._c2._simpleSchemas.forEach(function (schema, index) {\n        // if we find a schema with an identical selector, save it's index\n        if(_.isEqual(schema.selector, selector)) {\n          schemaIndex = index;\n        }\n      });\n      if (schemaIndex === -1) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: new SimpleSchema(ss),\n          selector: selector,\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace !== true) {\n          // Merge with existing schema unless options.replace is `true`\n          if (obj._c2._simpleSchemas[schemaIndex].schema.version >= 2) {\n            obj._c2._simpleSchemas[schemaIndex].schema.extend(ss);\n          } else {\n            obj._c2._simpleSchemas[schemaIndex].schema = new SimpleSchema([obj._c2._simpleSchemas[schemaIndex].schema, ss]);\n          }\n        } else {\n          // If options.repalce is `true` replace existing schema with new schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        }\n\n      }\n\n      // Remove existing schemas without selector\n      delete obj._c2._simpleSchema;\n    } else {\n      // Track the schema in the collection\n      obj._c2._simpleSchema = ss;\n\n      // Remove existing schemas with selector\n      delete obj._c2._simpleSchemas;\n    }\n  }\n\n  attachTo(self);\n  // Attach the schema to the underlying LocalCollection, too\n  if (self._collection instanceof LocalCollection) {\n    self._collection._c2 = self._collection._c2 || {};\n    attachTo(self._collection);\n  }\n\n  defineDeny(self, options);\n  keepInsecure(self);\n\n  Collection2.emit('schema.attached', self, ss, options);\n};\n\n_.each([Mongo.Collection, LocalCollection], function (obj) {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in `self`, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n\n    var schemas = this._c2._simpleSchemas;\n    if (schemas && schemas.length > 0) {\n      if (!doc) throw new Error('collection.simpleSchema() requires doc argument when there are multiple schemas');\n\n      var schema, selector, target;\n      for (var i = 0; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0];\n\n        // We will set this to undefined because in theory you might want to select\n        // on a null value.\n        target = undefined;\n\n        // here we are looking for selector in different places\n        // $set should have more priority here\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) { // on upsert/update operations\n          target = query[selector];\n        }\n\n        // we need to compare given selector with doc property or option to\n        // find right schema\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n    }\n\n    return null;\n  };\n});\n\n// Wrap DB write operation methods\n_.each(['insert', 'update'], function(methodName) {\n  var _super = Mongo.Collection.prototype[methodName];\n  Mongo.Collection.prototype[methodName] = function() {\n    var self = this, options,\n        args = _.toArray(arguments);\n\n    options = (methodName === \"insert\") ? args[1] : args[2];\n\n    // Support missing options arg\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (self._c2 && options.bypassCollection2 !== true) {\n      var userId = null;\n      try { // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate.call(\n        self,\n        methodName,\n        args,\n        Meteor.isServer || self._connection === null, // getAutoValues\n        userId,\n        Meteor.isServer // isFromTrustedCode\n      );\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? self._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(self, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(type, args, getAutoValues, userId, isFromTrustedCode) {\n  var self = this, doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  var validatedObjectWasInitiallyEmpty = _.isEmpty(doc);\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  last = args.length - 1;\n\n  hasCallback = (typeof args[last] === 'function');\n\n  // If update was called with upsert:true, flag as an upsert\n  isUpsert = (type === \"update\" && options.upsert === true);\n\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n  var schema = self.simpleSchema(doc, options, selector);\n  var isLocalCollection = (self._connection === null);\n\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  }\n\n  // Determine validation context\n  var validationContext = options.validationContext;\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  }\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function(err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  var schemaAllowsId = schema.allowsKey(\"_id\");\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = self._makeNewID();\n  }\n\n  // Get the docId for passing in the autoValue/custom context\n  var docId;\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  var cachedId;\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  function doClean(docToClean, getAutoValues, filter, autoConvert, removeEmptyStrings, trimStrings) {\n    // Clean the doc/modifier in place\n    schema.clean(docToClean, {\n      mutate: true,\n      filter: filter,\n      autoConvert: autoConvert,\n      getAutoValues: getAutoValues,\n      isModifier: (type !== \"insert\"),\n      removeEmptyStrings: removeEmptyStrings,\n      trimStrings: trimStrings,\n      extendAutoValueContext: _.extend({\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert: isUpsert,\n        userId: userId,\n        isFromTrustedCode: isFromTrustedCode,\n        docId: docId,\n        isLocalCollection: isLocalCollection\n      }, options.extendAutoValueContext || {})\n    });\n  }\n\n  // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n  doClean(\n    doc,\n    getAutoValues,\n    options.filter !== false,\n    options.autoConvert !== false,\n    options.removeEmptyStrings !== false,\n    options.trimStrings !== false\n  );\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  var docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier. This is no doubt prone to errors, but there\n  // probably isn't any better way right now.\n  if (Meteor.isServer && isUpsert && _.isObject(selector)) {\n    var set = docToValidate.$set || {};\n\n    // If selector uses $and format, convert to plain object selector\n    if (Array.isArray(selector.$and)) {\n      const plainSelector = {};\n      selector.$and.forEach(sel => {\n        _.extend(plainSelector, sel);\n      });\n      docToValidate.$set = plainSelector;\n    } else {\n      docToValidate.$set = _.clone(selector);\n    }\n\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    _.extend(docToValidate.$set, set);\n  }\n\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient && !isLocalCollection) {\n    doClean(docToValidate, true, false, false, false, false);\n  }\n\n  // XXX Maybe move this into SimpleSchema\n  if (!validatedObjectWasInitiallyEmpty && _.isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' +\n      (type === 'update' ? 'modifier' : 'object') +\n      ' is now empty');\n  }\n\n  // Validate doc\n  var isValid;\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: (type === \"update\" || type === \"upsert\"),\n      upsert: isUpsert,\n      extendedCustomContext: _.extend({\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert: isUpsert,\n        userId: userId,\n        isFromTrustedCode: isFromTrustedCode,\n        docId: docId,\n        isLocalCollection: isLocalCollection\n      }, options.extendedCustomContext || {})\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    }\n\n    // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext);\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context) {\n  var message;\n  var invalidKeys = (typeof context.validationErrors === 'function') ? context.validationErrors() : context.invalidKeys();\n  if (invalidKeys.length) {\n    message = context.keyErrorMessage(invalidKeys[0].name);\n  } else {\n    message = \"Failed validation\";\n  }\n  var error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  var name = errorMessage.split('c2_')[1].split(' ')[0];\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];\n\n  var addValidationErrorsPropName = (typeof context.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors(error) {\n    var args = _.toArray(arguments);\n    if (error &&\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000' !== -1)) &&\n        error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  var addValidationErrorsPropName = (typeof validationContext.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  return function wrappedCallbackForParsingServerErrors(error) {\n    var args = _.toArray(arguments);\n    // Handle our own validation errors\n    if (error instanceof Meteor.Error &&\n        error.error === 400 &&\n        error.reason === \"INVALID\" &&\n        typeof error.details === \"string\") {\n      var invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error &&\n             error.error === 409 &&\n             error.reason &&\n             error.reason.indexOf('E11000') !== -1 &&\n             error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.reason);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nvar alreadyInsecured = {};\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecured[c._name]) {\n    c.allow({\n      insert: function() {\n        return true;\n      },\n      update: function() {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecured[c._name] = true;\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n}\n\nvar alreadyDefined = {};\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n\n    var isLocalCollection = (c._connection === null);\n\n    // First define deny functions to extend doc with the results of clean\n    // and autovalues. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n    c.deny({\n      insert: function(userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    });\n\n    // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/autovalue functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n    c.deny(_.extend({\n      insert: function(userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate.call(\n          c,\n          \"insert\",\n          [\n            doc,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate.call(\n          c,\n          \"update\",\n          [\n            {_id: doc && doc._id},\n            modifier,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      fetch: ['_id']\n    }, options.transform === true ? {} : {transform: null}));\n\n    // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n    alreadyDefined[c._name] = true;\n  }\n}\n\nexport default Collection2;\n"]}}]