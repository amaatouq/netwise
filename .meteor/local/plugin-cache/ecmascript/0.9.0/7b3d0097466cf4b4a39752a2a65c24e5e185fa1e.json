{"metadata":{"usedHelpers":["classCallCheck","typeof","inherits","possibleConstructorReturn","extends","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"React"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/tracker","imported":["Tracker"],"specifiers":[{"kind":"named","imported":"Tracker","local":"Tracker"}]}],"exports":{"exported":["ReactMeteorData","connect","options"],"specifiers":[{"kind":"local","local":"ReactMeteorData","exported":"ReactMeteorData"},{"kind":"local","local":"connect","exported":"default"},{"kind":"local","local":"options","exported":"default"}]}}},"options":{"filename":"packages/react-meteor-data/ReactMeteorData.jsx","filenameRelative":"packages/react-meteor-data/ReactMeteorData.jsx","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/react-meteor-data/ReactMeteorData.jsx.map","sourceFileName":"packages/react-meteor-data/ReactMeteorData.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ReactMeteorData"},"ignored":false,"code":"var _extends2 = require(\"babel-runtime/helpers/extends\");\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  ReactMeteorData: function () {\n    return ReactMeteorData;\n  },\n  \"default\": function () {\n    return connect;\n  }\n});\nvar React = void 0;\nmodule.watch(require(\"react\"), {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Tracker = void 0;\nmodule.watch(require(\"meteor/tracker\"), {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 2);\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nvar MeteorDataManager = function () {\n  function MeteorDataManager(component) {\n    (0, _classCallCheck3.default)(this, MeteorDataManager);\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  MeteorDataManager.prototype.dispose = function () {\n    function dispose() {\n      if (this.computation) {\n        this.computation.stop();\n        this.computation = null;\n      }\n    }\n\n    return dispose;\n  }();\n\n  MeteorDataManager.prototype.calculateData = function () {\n    function calculateData() {\n      var component = this.component;\n\n      if (!component.getMeteorData) {\n        return null;\n      } // When rendering on the server, we don't want to use the Tracker.\n      // We only do the first rendering on the server so we can get the data right away\n\n\n      if (Meteor.isServer) {\n        return component.getMeteorData();\n      }\n\n      if (this.computation) {\n        this.computation.stop();\n        this.computation = null;\n      }\n\n      var data = void 0; // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n      // This can happen if someone calls `ReactDOM.render` inside a Computation.\n      // In that case, we want to opt out of the normal behavior of nested\n      // Computations, where if the outer one is invalidated or stopped,\n      // it stops the inner one.\n\n      this.computation = Tracker.nonreactive(function () {\n        return Tracker.autorun(function (c) {\n          if (c.firstRun) {\n            var savedSetState = component.setState;\n\n            try {\n              component.setState = function () {\n                throw new Error('Can\\'t call `setState` inside `getMeteorData` as this could ' + 'cause an endless loop. To respond to Meteor data changing, ' + 'consider making this component a \\\"wrapper component\\\" that ' + 'only fetches data and passes it in as props to a child ' + 'component. Then you can use `componentWillReceiveProps` in ' + 'that child component.');\n              };\n\n              data = component.getMeteorData();\n            } finally {\n              component.setState = savedSetState;\n            }\n          } else {\n            // Stop this computation instead of using the re-run.\n            // We use a brand-new autorun for each call to getMeteorData\n            // to capture dependencies on any reactive data sources that\n            // are accessed.  The reason we can't use a single autorun\n            // for the lifetime of the component is that Tracker only\n            // re-runs autoruns at flush time, while we need to be able to\n            // re-call getMeteorData synchronously whenever we want, e.g.\n            // from componentWillUpdate.\n            c.stop(); // Calling forceUpdate() triggers componentWillUpdate which\n            // recalculates getMeteorData() and re-renders the component.\n\n            component.forceUpdate();\n          }\n        });\n      });\n\n      if (Package.mongo && Package.mongo.Mongo) {\n        Object.keys(data).forEach(function (key) {\n          if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n            console.warn('Warning: you are returning a Mongo cursor from getMeteorData. ' + 'This value will not be reactive. You probably want to call ' + '`.fetch()` on the cursor before returning it.');\n          }\n        });\n      }\n\n      return data;\n    }\n\n    return calculateData;\n  }();\n\n  MeteorDataManager.prototype.updateData = function () {\n    function updateData(newData) {\n      var component = this.component;\n      var oldData = this.oldData;\n\n      if (!(newData && (typeof newData === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(newData)) === 'object')) {\n        throw new Error('Expected object returned from getMeteorData');\n      } // update componentData in place based on newData\n\n\n      for (var key in meteorBabelHelpers.sanitizeForInObject(newData)) {\n        component.data[key] = newData[key];\n      } // if there is oldData (which is every time this method is called\n      // except the first), delete keys in newData that aren't in\n      // oldData.  don't interfere with other keys, in case we are\n      // co-existing with something else that writes to a component's\n      // this.data.\n\n\n      if (oldData) {\n        for (var _key in meteorBabelHelpers.sanitizeForInObject(oldData)) {\n          if (!(_key in newData)) {\n            delete component.data[_key];\n          }\n        }\n      }\n\n      this.oldData = newData;\n    }\n\n    return updateData;\n  }();\n\n  return MeteorDataManager;\n}();\n\nvar ReactMeteorData = {\n  componentWillMount: function () {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n\n    var newData = this._meteorDataManager.calculateData();\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate: function (nextProps, nextState) {\n    var saveProps = this.props;\n    var saveState = this.state;\n    var newData = void 0;\n\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount: function () {\n    this._meteorDataManager.dispose();\n  }\n};\n\nvar ReactComponent = function (_React$Component) {\n  (0, _inherits3.default)(ReactComponent, _React$Component);\n\n  function ReactComponent() {\n    (0, _classCallCheck3.default)(this, ReactComponent);\n    return (0, _possibleConstructorReturn3.default)(this, _React$Component.apply(this, arguments));\n  }\n\n  return ReactComponent;\n}(React.Component);\n\nObject.assign(ReactComponent.prototype, ReactMeteorData);\n\nvar ReactPureComponent = function (_React$PureComponent) {\n  (0, _inherits3.default)(ReactPureComponent, _React$PureComponent);\n\n  function ReactPureComponent() {\n    (0, _classCallCheck3.default)(this, ReactPureComponent);\n    return (0, _possibleConstructorReturn3.default)(this, _React$PureComponent.apply(this, arguments));\n  }\n\n  return ReactPureComponent;\n}(React.PureComponent);\n\nObject.assign(ReactPureComponent.prototype, ReactMeteorData);\n\nfunction connect(options) {\n  var expandedOptions = options;\n\n  if (typeof options === 'function') {\n    expandedOptions = {\n      getMeteorData: options\n    };\n  }\n\n  var _expandedOptions = expandedOptions,\n      _getMeteorData = _expandedOptions.getMeteorData,\n      _expandedOptions$pure = _expandedOptions.pure,\n      pure = _expandedOptions$pure === undefined ? true : _expandedOptions$pure;\n  var BaseComponent = pure ? ReactPureComponent : ReactComponent;\n  return function (WrappedComponent) {\n    return function (_BaseComponent) {\n      (0, _inherits3.default)(ReactMeteorDataComponent, _BaseComponent);\n\n      function ReactMeteorDataComponent() {\n        (0, _classCallCheck3.default)(this, ReactMeteorDataComponent);\n        return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));\n      }\n\n      ReactMeteorDataComponent.prototype.getMeteorData = function () {\n        function getMeteorData() {\n          return _getMeteorData(this.props);\n        }\n\n        return getMeteorData;\n      }();\n\n      ReactMeteorDataComponent.prototype.render = function () {\n        function render() {\n          return React.createElement(WrappedComponent, (0, _extends3.default)({}, this.props, this.data));\n        }\n\n        return render;\n      }();\n\n      return ReactMeteorDataComponent;\n    }(BaseComponent);\n  };\n}","map":{"version":3,"sources":["packages/react-meteor-data/ReactMeteorData.jsx"],"names":["module","export","ReactMeteorData","connect","React","watch","require","v","Meteor","Tracker","MeteorDataManager","component","computation","oldData","dispose","stop","calculateData","getMeteorData","isServer","data","nonreactive","autorun","c","firstRun","savedSetState","setState","Error","forceUpdate","Package","mongo","Mongo","Object","keys","forEach","key","Cursor","console","warn","updateData","newData","componentWillMount","_meteorDataManager","componentWillUpdate","nextProps","nextState","saveProps","props","saveState","state","componentWillUnmount","ReactComponent","Component","assign","prototype","ReactPureComponent","PureComponent","options","expandedOptions","pure","BaseComponent","WrappedComponent","render"],"mappings":"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","file":"packages/react-meteor-data/ReactMeteorData.jsx.map","sourcesContent":["/* global Package */\n/* eslint-disable react/prefer-stateless-function */\n\nimport React from 'react';\nimport { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n\n    if (!component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `ReactDOM.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(() => (\n      Tracker.autorun((c) => {\n        if (c.firstRun) {\n          const savedSetState = component.setState;\n          try {\n            component.setState = () => {\n              throw new Error(\n                'Can\\'t call `setState` inside `getMeteorData` as this could '\n                + 'cause an endless loop. To respond to Meteor data changing, '\n                + 'consider making this component a \\\"wrapper component\\\" that '\n                + 'only fetches data and passes it in as props to a child '\n                + 'component. Then you can use `componentWillReceiveProps` in '\n                + 'that child component.');\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      })\n    ));\n\n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach((key) => {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\n            'Warning: you are returning a Mongo cursor from getMeteorData. '\n            + 'This value will not be reactive. You probably want to call '\n            + '`.fetch()` on the cursor before returning it.'\n          );\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (!(newData && (typeof newData) === 'object')) {\n      throw new Error('Expected object returned from getMeteorData');\n    }\n    // update componentData in place based on newData\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n    this.oldData = newData;\n  }\n}\n\nexport const ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    const newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  },\n};\n\nclass ReactComponent extends React.Component {}\nObject.assign(ReactComponent.prototype, ReactMeteorData);\nclass ReactPureComponent extends React.PureComponent {}\nObject.assign(ReactPureComponent.prototype, ReactMeteorData);\n\nexport default function connect(options) {\n  let expandedOptions = options;\n  if (typeof options === 'function') {\n    expandedOptions = {\n      getMeteorData: options,\n    };\n  }\n\n  const { getMeteorData, pure = true } = expandedOptions;\n\n  const BaseComponent = pure ? ReactPureComponent : ReactComponent;\n  return (WrappedComponent) => (\n    class ReactMeteorDataComponent extends BaseComponent {\n      getMeteorData() {\n        return getMeteorData(this.props);\n      }\n      render() {\n        return <WrappedComponent {...this.props} {...this.data} />;\n      }\n    }\n  );\n}\n"]},"hash":"7b3d0097466cf4b4a39752a2a65c24e5e185fa1e"}
