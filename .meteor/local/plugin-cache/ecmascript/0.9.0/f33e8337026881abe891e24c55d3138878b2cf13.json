{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/check","imported":["Match","check"],"specifiers":[{"kind":"named","imported":"Match","local":"Match"},{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"./logging","imported":["debugLog"],"specifiers":[{"kind":"named","imported":"debugLog","local":"debugLog"}]},{"source":"./published_document_list","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"PublishedDocumentList"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/reywood:publish-composite/lib/publication.js","filenameRelative":"packages/reywood:publish-composite/lib/publication.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/reywood:publish-composite/lib/publication.js.map","sourceFileName":"packages/reywood:publish-composite/lib/publication.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"publication"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n    Meteor: function (v) {\n        Meteor = v;\n    }\n}, 0);\nvar Match = void 0,\n    check = void 0;\nmodule.watch(require(\"meteor/check\"), {\n    Match: function (v) {\n        Match = v;\n    },\n    check: function (v) {\n        check = v;\n    }\n}, 1);\n\nvar _ = void 0;\n\nmodule.watch(require(\"meteor/underscore\"), {\n    _: function (v) {\n        _ = v;\n    }\n}, 2);\nvar debugLog = void 0;\nmodule.watch(require(\"./logging\"), {\n    debugLog: function (v) {\n        debugLog = v;\n    }\n}, 3);\nvar PublishedDocumentList = void 0;\nmodule.watch(require(\"./published_document_list\"), {\n    \"default\": function (v) {\n        PublishedDocumentList = v;\n    }\n}, 4);\n\nvar Publication = function () {\n    function Publication(subscription, options, args) {\n        (0, _classCallCheck3.default)(this, Publication);\n        check(options, {\n            find: Function,\n            children: Match.Optional([Object]),\n            collectionName: Match.Optional(String)\n        });\n        this.subscription = subscription;\n        this.options = options;\n        this.args = args || [];\n        this.childrenOptions = options.children || [];\n        this.publishedDocs = new PublishedDocumentList();\n        this.collectionName = options.collectionName;\n    }\n\n    Publication.prototype.publish = function () {\n        function publish() {\n            var _this = this;\n\n            this.cursor = this._getCursor();\n\n            if (!this.cursor) {\n                return;\n            }\n\n            var collectionName = this._getCollectionName(); // Use Meteor.bindEnvironment to make sure the callbacks are run with the same\n            // environmentVariables as when publishing the \"parent\".\n            // It's only needed when publish is being recursively run.\n\n\n            this.observeHandle = this.cursor.observe({\n                added: Meteor.bindEnvironment(function (doc) {\n                    var alreadyPublished = _this.publishedDocs.has(doc._id);\n\n                    if (alreadyPublished) {\n                        debugLog('Publication.observeHandle.added', collectionName + \":\" + doc._id + \" already published\");\n\n                        _this.publishedDocs.unflagForRemoval(doc._id);\n\n                        _this._republishChildrenOf(doc);\n\n                        _this.subscription.changed(collectionName, doc._id, doc);\n                    } else {\n                        _this.publishedDocs.add(collectionName, doc._id);\n\n                        _this._publishChildrenOf(doc);\n\n                        _this.subscription.added(collectionName, doc);\n                    }\n                }),\n                changed: Meteor.bindEnvironment(function (newDoc) {\n                    debugLog('Publication.observeHandle.changed', collectionName + \":\" + newDoc._id);\n\n                    _this._republishChildrenOf(newDoc);\n                }),\n                removed: function (doc) {\n                    debugLog('Publication.observeHandle.removed', collectionName + \":\" + doc._id);\n\n                    _this._removeDoc(collectionName, doc._id);\n                }\n            });\n            this.observeChangesHandle = this.cursor.observeChanges({\n                changed: function (id, fields) {\n                    debugLog('Publication.observeChangesHandle.changed', collectionName + \":\" + id);\n\n                    _this.subscription.changed(collectionName, id, fields);\n                }\n            });\n        }\n\n        return publish;\n    }();\n\n    Publication.prototype.unpublish = function () {\n        function unpublish() {\n            debugLog('Publication.unpublish', this._getCollectionName());\n\n            this._stopObservingCursor();\n\n            this._unpublishAllDocuments();\n        }\n\n        return unpublish;\n    }();\n\n    Publication.prototype._republish = function () {\n        function _republish() {\n            this._stopObservingCursor();\n\n            this.publishedDocs.flagAllForRemoval();\n            debugLog('Publication._republish', 'run .publish again');\n            this.publish();\n            debugLog('Publication._republish', 'unpublish docs from old cursor');\n\n            this._removeFlaggedDocs();\n        }\n\n        return _republish;\n    }();\n\n    Publication.prototype._getCursor = function () {\n        function _getCursor() {\n            return this.options.find.apply(this.subscription.meteorSub, this.args);\n        }\n\n        return _getCursor;\n    }();\n\n    Publication.prototype._getCollectionName = function () {\n        function _getCollectionName() {\n            return this.collectionName || this.cursor && this.cursor._getCollectionName();\n        }\n\n        return _getCollectionName;\n    }();\n\n    Publication.prototype._publishChildrenOf = function () {\n        function _publishChildrenOf(doc) {\n            _.each(this.childrenOptions, function () {\n                function createChildPublication(options) {\n                    var pub = new Publication(this.subscription, options, [doc].concat(this.args));\n                    this.publishedDocs.addChildPub(doc._id, pub);\n                    pub.publish();\n                }\n\n                return createChildPublication;\n            }(), this);\n        }\n\n        return _publishChildrenOf;\n    }();\n\n    Publication.prototype._republishChildrenOf = function () {\n        function _republishChildrenOf(doc) {\n            this.publishedDocs.eachChildPub(doc._id, function (publication) {\n                publication.args[0] = doc;\n\n                publication._republish();\n            });\n        }\n\n        return _republishChildrenOf;\n    }();\n\n    Publication.prototype._unpublishAllDocuments = function () {\n        function _unpublishAllDocuments() {\n            var _this2 = this;\n\n            this.publishedDocs.eachDocument(function (doc) {\n                _this2._removeDoc(doc.collectionName, doc.docId);\n            }, this);\n        }\n\n        return _unpublishAllDocuments;\n    }();\n\n    Publication.prototype._stopObservingCursor = function () {\n        function _stopObservingCursor() {\n            debugLog('Publication._stopObservingCursor', 'stop observing cursor');\n\n            if (this.observeHandle) {\n                this.observeHandle.stop();\n                delete this.observeHandle;\n            }\n\n            if (this.observeChangesHandle) {\n                this.observeChangesHandle.stop();\n                delete this.observeChangesHandle;\n            }\n        }\n\n        return _stopObservingCursor;\n    }();\n\n    Publication.prototype._removeFlaggedDocs = function () {\n        function _removeFlaggedDocs() {\n            var _this3 = this;\n\n            this.publishedDocs.eachDocument(function (doc) {\n                if (doc.isFlaggedForRemoval()) {\n                    _this3._removeDoc(doc.collectionName, doc.docId);\n                }\n            }, this);\n        }\n\n        return _removeFlaggedDocs;\n    }();\n\n    Publication.prototype._removeDoc = function () {\n        function _removeDoc(collectionName, docId) {\n            this.subscription.removed(collectionName, docId);\n\n            this._unpublishChildrenOf(docId);\n\n            this.publishedDocs.remove(docId);\n        }\n\n        return _removeDoc;\n    }();\n\n    Publication.prototype._unpublishChildrenOf = function () {\n        function _unpublishChildrenOf(docId) {\n            debugLog('Publication._unpublishChildrenOf', \"unpublishing children of \" + this._getCollectionName() + \":\" + docId);\n            this.publishedDocs.eachChildPub(docId, function (publication) {\n                publication.unpublish();\n            });\n        }\n\n        return _unpublishChildrenOf;\n    }();\n\n    return Publication;\n}();\n\nmodule.exportDefault(Publication);","map":{"version":3,"sources":["packages/reywood:publish-composite/lib/publication.js"],"names":["Meteor","module","watch","require","v","Match","check","_","debugLog","PublishedDocumentList","Publication","subscription","options","args","find","Function","children","Optional","Object","collectionName","String","childrenOptions","publishedDocs","publish","cursor","_getCursor","_getCollectionName","observeHandle","observe","added","bindEnvironment","doc","alreadyPublished","has","_id","unflagForRemoval","_republishChildrenOf","changed","add","_publishChildrenOf","newDoc","removed","_removeDoc","observeChangesHandle","observeChanges","id","fields","unpublish","_stopObservingCursor","_unpublishAllDocuments","_republish","flagAllForRemoval","_removeFlaggedDocs","apply","meteorSub","each","createChildPublication","pub","concat","addChildPub","eachChildPub","publication","eachDocument","docId","stop","isFlaggedForRemoval","_unpublishChildrenOf","remove","exportDefault"],"mappings":"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","file":"packages/reywood:publish-composite/lib/publication.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { _ } from 'meteor/underscore';\n\nimport { debugLog } from './logging';\nimport PublishedDocumentList from './published_document_list';\n\n\nclass Publication {\n    constructor(subscription, options, args) {\n        check(options, {\n            find: Function,\n            children: Match.Optional([Object]),\n            collectionName: Match.Optional(String),\n        });\n\n        this.subscription = subscription;\n        this.options = options;\n        this.args = args || [];\n        this.childrenOptions = options.children || [];\n        this.publishedDocs = new PublishedDocumentList();\n        this.collectionName = options.collectionName;\n    }\n\n    publish() {\n        this.cursor = this._getCursor();\n        if (!this.cursor) { return; }\n\n        const collectionName = this._getCollectionName();\n\n        // Use Meteor.bindEnvironment to make sure the callbacks are run with the same\n        // environmentVariables as when publishing the \"parent\".\n        // It's only needed when publish is being recursively run.\n        this.observeHandle = this.cursor.observe({\n            added: Meteor.bindEnvironment((doc) => {\n                const alreadyPublished = this.publishedDocs.has(doc._id);\n\n                if (alreadyPublished) {\n                    debugLog('Publication.observeHandle.added', `${collectionName}:${doc._id} already published`);\n                    this.publishedDocs.unflagForRemoval(doc._id);\n                    this._republishChildrenOf(doc);\n                    this.subscription.changed(collectionName, doc._id, doc);\n                } else {\n                    this.publishedDocs.add(collectionName, doc._id);\n                    this._publishChildrenOf(doc);\n                    this.subscription.added(collectionName, doc);\n                }\n            }),\n            changed: Meteor.bindEnvironment((newDoc) => {\n                debugLog('Publication.observeHandle.changed', `${collectionName}:${newDoc._id}`);\n                this._republishChildrenOf(newDoc);\n            }),\n            removed: (doc) => {\n                debugLog('Publication.observeHandle.removed', `${collectionName}:${doc._id}`);\n                this._removeDoc(collectionName, doc._id);\n            },\n        });\n\n        this.observeChangesHandle = this.cursor.observeChanges({\n            changed: (id, fields) => {\n                debugLog('Publication.observeChangesHandle.changed', `${collectionName}:${id}`);\n                this.subscription.changed(collectionName, id, fields);\n            },\n        });\n    }\n\n    unpublish() {\n        debugLog('Publication.unpublish', this._getCollectionName());\n        this._stopObservingCursor();\n        this._unpublishAllDocuments();\n    }\n\n    _republish() {\n        this._stopObservingCursor();\n\n        this.publishedDocs.flagAllForRemoval();\n\n        debugLog('Publication._republish', 'run .publish again');\n        this.publish();\n\n        debugLog('Publication._republish', 'unpublish docs from old cursor');\n        this._removeFlaggedDocs();\n    }\n\n    _getCursor() {\n        return this.options.find.apply(this.subscription.meteorSub, this.args);\n    }\n\n    _getCollectionName() {\n        return this.collectionName || (this.cursor && this.cursor._getCollectionName());\n    }\n\n    _publishChildrenOf(doc) {\n        _.each(this.childrenOptions, function createChildPublication(options) {\n            const pub = new Publication(this.subscription, options, [doc].concat(this.args));\n            this.publishedDocs.addChildPub(doc._id, pub);\n            pub.publish();\n        }, this);\n    }\n\n    _republishChildrenOf(doc) {\n        this.publishedDocs.eachChildPub(doc._id, (publication) => {\n            publication.args[0] = doc;\n            publication._republish();\n        });\n    }\n\n    _unpublishAllDocuments() {\n        this.publishedDocs.eachDocument((doc) => {\n            this._removeDoc(doc.collectionName, doc.docId);\n        }, this);\n    }\n\n    _stopObservingCursor() {\n        debugLog('Publication._stopObservingCursor', 'stop observing cursor');\n\n        if (this.observeHandle) {\n            this.observeHandle.stop();\n            delete this.observeHandle;\n        }\n\n        if (this.observeChangesHandle) {\n            this.observeChangesHandle.stop();\n            delete this.observeChangesHandle;\n        }\n    }\n\n    _removeFlaggedDocs() {\n        this.publishedDocs.eachDocument((doc) => {\n            if (doc.isFlaggedForRemoval()) {\n                this._removeDoc(doc.collectionName, doc.docId);\n            }\n        }, this);\n    }\n\n    _removeDoc(collectionName, docId) {\n        this.subscription.removed(collectionName, docId);\n        this._unpublishChildrenOf(docId);\n        this.publishedDocs.remove(docId);\n    }\n\n    _unpublishChildrenOf(docId) {\n        debugLog('Publication._unpublishChildrenOf', `unpublishing children of ${this._getCollectionName()}:${docId}`);\n\n        this.publishedDocs.eachChildPub(docId, (publication) => {\n            publication.unpublish();\n        });\n    }\n}\n\nexport default Publication;\n"]},"hash":"f33e8337026881abe891e24c55d3138878b2cf13"}
