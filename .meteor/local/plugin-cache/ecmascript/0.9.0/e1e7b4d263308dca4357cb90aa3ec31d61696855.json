{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"simpl-schema","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SimpleSchema"}]},{"source":"meteor/aldeed:collection2-core","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Collection2"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/aldeed:schema-index/indexing.js","filenameRelative":"packages/aldeed:schema-index/indexing.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/aldeed:schema-index/indexing.js.map","sourceFileName":"packages/aldeed:schema-index/indexing.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"indexing"},"ignored":false,"code":"let SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Collection2;\nmodule.watch(require(\"meteor/aldeed:collection2-core\"), {\n  default(v) {\n    Collection2 = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions(['index', // one of Number, String, Boolean\n'unique', // Boolean\n'sparse'] // Boolean\n);\nCollection2.on('schema.attached', function (collection, ss) {\n  // Define validation error messages\n  if (ss.version >= 2 && ss.messageBox && typeof ss.messageBox.messages === 'function') {\n    ss.messageBox.messages({\n      en: {\n        notUnique: '{{label}} must be unique'\n      }\n    });\n  }\n});\n\nif (Meteor.isServer) {\n  Collection2.on('schema.attached', function (collection, ss) {\n    function ensureIndex(index, indexName, unique, sparse) {\n      Meteor.startup(function () {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name: indexName,\n          unique: unique,\n          sparse: sparse\n        });\n      });\n    }\n\n    function dropIndex(indexName) {\n      Meteor.startup(function () {\n        try {\n          collection._collection._dropIndex(indexName);\n        } catch (err) {// no index with that name, which is what we want\n        }\n      });\n    }\n\n    const propName = ss.version === 2 ? 'mergedSchema' : 'schema'; // Loop over fields definitions and ensure collection indexes (server side only)\n\n    var schema = ss[propName]();\n    Object.keys(schema).forEach(function (fieldName) {\n      var definition = schema[fieldName];\n\n      if ('index' in definition || definition.unique === true) {\n        var index = {},\n            indexValue; // If they specified `unique: true` but not `index`,\n        // we assume `index: 1` to set up the unique index in mongo\n\n        if ('index' in definition) {\n          indexValue = definition.index;\n          if (indexValue === true) indexValue = 1;\n        } else {\n          indexValue = 1;\n        }\n\n        var indexName = 'c2_' + fieldName; // In the index object, we want object array keys without the \".$\" piece\n\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false; // If unique and optional, force sparse to prevent errors\n\n        if (!sparse && unique && definition.optional) sparse = true;\n\n        if (indexValue === false) {\n          dropIndex(indexName);\n        } else {\n          ensureIndex(index, indexName, unique, sparse);\n        }\n      }\n    });\n  });\n}","map":{"version":3,"sources":["packages/aldeed:schema-index/indexing.js"],"names":["SimpleSchema","module","watch","require","default","v","Collection2","Meteor","extendOptions","on","collection","ss","version","messageBox","messages","en","notUnique","isServer","ensureIndex","index","indexName","unique","sparse","startup","_collection","_ensureIndex","background","name","dropIndex","_dropIndex","err","propName","schema","Object","keys","forEach","fieldName","definition","indexValue","idxFieldName","replace","optional"],"mappings":"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","file":"packages/aldeed:schema-index/indexing.js.map","sourcesContent":["// collection2-core checks to make sure that simpl-schema package is added\nimport SimpleSchema from 'simpl-schema';\nimport Collection2 from 'meteor/aldeed:collection2-core';\nimport { Meteor } from 'meteor/meteor';\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions([\n  'index', // one of Number, String, Boolean\n  'unique', // Boolean\n  'sparse', // Boolean\n]);\n\nCollection2.on('schema.attached', function (collection, ss) {\n  // Define validation error messages\n  if (ss.version >= 2 && ss.messageBox && typeof ss.messageBox.messages === 'function') {\n    ss.messageBox.messages({\n      en: {\n        notUnique: '{{label}} must be unique',\n      },\n    });\n  }\n});\n\nif (Meteor.isServer) {\n  Collection2.on('schema.attached', function (collection, ss) {\n    function ensureIndex(index, indexName, unique, sparse) {\n      Meteor.startup(function () {\n        collection._collection._ensureIndex(index, {\n          background: true,\n          name: indexName,\n          unique: unique,\n          sparse: sparse\n        });\n      });\n    }\n\n    function dropIndex(indexName) {\n      Meteor.startup(function () {\n        try {\n          collection._collection._dropIndex(indexName);\n        } catch (err) {\n          // no index with that name, which is what we want\n        }\n      });\n    }\n\n    const propName = ss.version === 2 ? 'mergedSchema' : 'schema';\n\n    // Loop over fields definitions and ensure collection indexes (server side only)\n    var schema = ss[propName]();\n    Object.keys(schema).forEach(function (fieldName) {\n      var definition = schema[fieldName];\n      if ('index' in definition || definition.unique === true) {\n        var index = {}, indexValue;\n        // If they specified `unique: true` but not `index`,\n        // we assume `index: 1` to set up the unique index in mongo\n        if ('index' in definition) {\n          indexValue = definition.index;\n          if (indexValue === true) indexValue = 1;\n        } else {\n          indexValue = 1;\n        }\n        var indexName = 'c2_' + fieldName;\n        // In the index object, we want object array keys without the \".$\" piece\n        var idxFieldName = fieldName.replace(/\\.\\$\\./g, \".\");\n        index[idxFieldName] = indexValue;\n        var unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n        var sparse = definition.sparse || false;\n\n        // If unique and optional, force sparse to prevent errors\n        if (!sparse && unique && definition.optional) sparse = true;\n\n        if (indexValue === false) {\n          dropIndex(indexName);\n        } else {\n          ensureIndex(index, indexName, unique, sparse);\n        }\n      }\n    });\n  });\n}\n"]},"hash":"e1e7b4d263308dca4357cb90aa3ec31d61696855"}
