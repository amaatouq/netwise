{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"simpl-schema","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"SimpleSchema"}]},{"source":"meteor/aldeed:collection2-core","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Collection2"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/aldeed:schema-deny/deny.js","filenameRelative":"packages/aldeed:schema-deny/deny.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/aldeed:schema-deny/deny.js.map","sourceFileName":"packages/aldeed:schema-deny/deny.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"deny"},"ignored":false,"code":"let SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Collection2;\nmodule.watch(require(\"meteor/aldeed:collection2-core\"), {\n  default(v) {\n    Collection2 = v;\n  }\n\n}, 1);\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions(['denyInsert', 'denyUpdate']);\nCollection2.on('schema.attached', function (collection, ss) {\n  if (ss.version >= 2 && ss.messageBox && typeof ss.messageBox.messages === 'function') {\n    ss.messageBox.messages({\n      en: {\n        insertNotAllowed: '{{label}} cannot be set during an insert.',\n        updateNotAllowed: '{{label}} cannot be set during an update.'\n      }\n    });\n  }\n\n  ss.addValidator(function () {\n    if (!this.isSet) return;\n    const def = this.definition;\n    if (def.denyInsert && this.isInsert) return 'insertNotAllowed';\n    if (def.denyUpdate && (this.isUpdate || this.isUpsert)) return 'updateNotAllowed';\n  });\n});","map":{"version":3,"sources":["packages/aldeed:schema-deny/deny.js"],"names":["SimpleSchema","module","watch","require","default","v","Collection2","extendOptions","on","collection","ss","version","messageBox","messages","en","insertNotAllowed","updateNotAllowed","addValidator","isSet","def","definition","denyInsert","isInsert","denyUpdate","isUpdate","isUpsert"],"mappings":"AAAA,IAAIA,YAAJ;AAAiBC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACC,UAAQC,CAAR,EAAU;AAACL,mBAAaK,CAAb;AAAe;;AAA3B,CAArC,EAAkE,CAAlE;AAAqE,IAAIC,WAAJ;AAAgBL,OAAOC,KAAP,CAAaC,QAAQ,gCAAR,CAAb,EAAuD;AAACC,UAAQC,CAAR,EAAU;AAACC,kBAAYD,CAAZ;AAAc;;AAA1B,CAAvD,EAAmF,CAAnF;AAItG;AACAL,aAAaO,aAAb,CAA2B,CAAC,YAAD,EAAe,YAAf,CAA3B;AAEAD,YAAYE,EAAZ,CAAe,iBAAf,EAAkC,UAAUC,UAAV,EAAsBC,EAAtB,EAA0B;AAC1D,MAAIA,GAAGC,OAAH,IAAc,CAAd,IAAmBD,GAAGE,UAAtB,IAAoC,OAAOF,GAAGE,UAAH,CAAcC,QAArB,KAAkC,UAA1E,EAAsF;AACpFH,OAAGE,UAAH,CAAcC,QAAd,CAAuB;AACrBC,UAAI;AACFC,0BAAkB,2CADhB;AAEFC,0BAAkB;AAFhB;AADiB,KAAvB;AAMD;;AAEDN,KAAGO,YAAH,CAAgB,YAAW;AACzB,QAAI,CAAC,KAAKC,KAAV,EAAiB;AAEjB,UAAMC,MAAM,KAAKC,UAAjB;AAEA,QAAID,IAAIE,UAAJ,IAAkB,KAAKC,QAA3B,EAAqC,OAAO,kBAAP;AACrC,QAAIH,IAAII,UAAJ,KAAmB,KAAKC,QAAL,IAAiB,KAAKC,QAAzC,CAAJ,EAAwD,OAAO,kBAAP;AACzD,GAPD;AAQD,CAlBD","file":"packages/aldeed:schema-deny/deny.js.map","sourcesContent":["// collection2-core checks to make sure that simpl-schema package is added\nimport SimpleSchema from 'simpl-schema';\nimport Collection2 from 'meteor/aldeed:collection2-core';\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions(['denyInsert', 'denyUpdate']);\n\nCollection2.on('schema.attached', function (collection, ss) {\n  if (ss.version >= 2 && ss.messageBox && typeof ss.messageBox.messages === 'function') {\n    ss.messageBox.messages({\n      en: {\n        insertNotAllowed: '{{label}} cannot be set during an insert.',\n        updateNotAllowed: '{{label}} cannot be set during an update.'\n      }\n    });\n  }\n\n  ss.addValidator(function() {\n    if (!this.isSet) return;\n\n    const def = this.definition;\n\n    if (def.denyInsert && this.isInsert) return 'insertNotAllowed';\n    if (def.denyUpdate && (this.isUpdate || this.isUpsert)) return 'updateNotAllowed';\n  });\n});\n"]},"hash":"1b748cb29826dc1f156a339a81683c55e8611e8c"}
