{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"./doc_ref_counter","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DocumentRefCounter"}]},{"source":"./logging","imported":["debugLog"],"specifiers":[{"kind":"named","imported":"debugLog","local":"debugLog"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/reywood:publish-composite/lib/subscription.js","filenameRelative":"packages/reywood:publish-composite/lib/subscription.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/reywood:publish-composite/lib/subscription.js.map","sourceFileName":"packages/reywood:publish-composite/lib/subscription.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"subscription"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _ = void 0;\n\nmodule.watch(require(\"meteor/underscore\"), {\n    _: function (v) {\n        _ = v;\n    }\n}, 0);\nvar DocumentRefCounter = void 0;\nmodule.watch(require(\"./doc_ref_counter\"), {\n    \"default\": function (v) {\n        DocumentRefCounter = v;\n    }\n}, 1);\nvar debugLog = void 0;\nmodule.watch(require(\"./logging\"), {\n    debugLog: function (v) {\n        debugLog = v;\n    }\n}, 2);\n\nvar Subscription = function () {\n    function Subscription(meteorSub) {\n        var _this = this;\n\n        (0, _classCallCheck3.default)(this, Subscription);\n        this.meteorSub = meteorSub;\n        this.docHash = {};\n        this.refCounter = new DocumentRefCounter({\n            onChange: function (collectionName, docId, refCount) {\n                debugLog('Subscription.refCounter.onChange', collectionName + \":\" + docId.valueOf() + \" \" + refCount);\n\n                if (refCount <= 0) {\n                    meteorSub.removed(collectionName, docId);\n\n                    _this._removeDocHash(collectionName, docId);\n                }\n            }\n        });\n    }\n\n    Subscription.prototype.added = function () {\n        function added(collectionName, doc) {\n            this.refCounter.increment(collectionName, doc._id);\n\n            if (this._hasDocChanged(collectionName, doc._id, doc)) {\n                debugLog('Subscription.added', collectionName + \":\" + doc._id);\n                this.meteorSub.added(collectionName, doc._id, doc);\n\n                this._addDocHash(collectionName, doc);\n            }\n        }\n\n        return added;\n    }();\n\n    Subscription.prototype.changed = function () {\n        function changed(collectionName, id, changes) {\n            if (this._shouldSendChanges(collectionName, id, changes)) {\n                debugLog('Subscription.changed', collectionName + \":\" + id);\n                this.meteorSub.changed(collectionName, id, changes);\n\n                this._updateDocHash(collectionName, id, changes);\n            }\n        }\n\n        return changed;\n    }();\n\n    Subscription.prototype.removed = function () {\n        function removed(collectionName, id) {\n            debugLog('Subscription.removed', collectionName + \":\" + id.valueOf());\n            this.refCounter.decrement(collectionName, id);\n        }\n\n        return removed;\n    }();\n\n    Subscription.prototype._addDocHash = function () {\n        function _addDocHash(collectionName, doc) {\n            this.docHash[buildHashKey(collectionName, doc._id)] = doc;\n        }\n\n        return _addDocHash;\n    }();\n\n    Subscription.prototype._updateDocHash = function () {\n        function _updateDocHash(collectionName, id, changes) {\n            var key = buildHashKey(collectionName, id);\n            var existingDoc = this.docHash[key] || {};\n            this.docHash[key] = _.extend(existingDoc, changes);\n        }\n\n        return _updateDocHash;\n    }();\n\n    Subscription.prototype._shouldSendChanges = function () {\n        function _shouldSendChanges(collectionName, id, changes) {\n            return this._isDocPublished(collectionName, id) && this._hasDocChanged(collectionName, id, changes);\n        }\n\n        return _shouldSendChanges;\n    }();\n\n    Subscription.prototype._isDocPublished = function () {\n        function _isDocPublished(collectionName, id) {\n            var key = buildHashKey(collectionName, id);\n            return !!this.docHash[key];\n        }\n\n        return _isDocPublished;\n    }();\n\n    Subscription.prototype._hasDocChanged = function () {\n        function _hasDocChanged(collectionName, id, doc) {\n            var existingDoc = this.docHash[buildHashKey(collectionName, id)];\n\n            if (!existingDoc) {\n                return true;\n            }\n\n            return _.any(_.keys(doc), function (key) {\n                return !_.isEqual(doc[key], existingDoc[key]);\n            });\n        }\n\n        return _hasDocChanged;\n    }();\n\n    Subscription.prototype._removeDocHash = function () {\n        function _removeDocHash(collectionName, id) {\n            var key = buildHashKey(collectionName, id);\n            delete this.docHash[key];\n        }\n\n        return _removeDocHash;\n    }();\n\n    return Subscription;\n}();\n\nfunction buildHashKey(collectionName, id) {\n    return collectionName + \"::\" + id.valueOf();\n}\n\nmodule.exportDefault(Subscription);","map":{"version":3,"sources":["packages/reywood:publish-composite/lib/subscription.js"],"names":["_","module","watch","require","v","DocumentRefCounter","debugLog","Subscription","meteorSub","docHash","refCounter","onChange","collectionName","docId","refCount","valueOf","removed","_removeDocHash","added","doc","increment","_id","_hasDocChanged","_addDocHash","changed","id","changes","_shouldSendChanges","_updateDocHash","decrement","buildHashKey","key","existingDoc","extend","_isDocPublished","any","keys","isEqual","exportDefault"],"mappings":"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","file":"packages/reywood:publish-composite/lib/subscription.js.map","sourcesContent":["import { _ } from 'meteor/underscore';\n\nimport DocumentRefCounter from './doc_ref_counter';\nimport { debugLog } from './logging';\n\n\nclass Subscription {\n    constructor(meteorSub) {\n        this.meteorSub = meteorSub;\n        this.docHash = {};\n        this.refCounter = new DocumentRefCounter({\n            onChange: (collectionName, docId, refCount) => {\n                debugLog('Subscription.refCounter.onChange', `${collectionName}:${docId.valueOf()} ${refCount}`);\n                if (refCount <= 0) {\n                    meteorSub.removed(collectionName, docId);\n                    this._removeDocHash(collectionName, docId);\n                }\n            },\n        });\n    }\n\n    added(collectionName, doc) {\n        this.refCounter.increment(collectionName, doc._id);\n\n        if (this._hasDocChanged(collectionName, doc._id, doc)) {\n            debugLog('Subscription.added', `${collectionName}:${doc._id}`);\n            this.meteorSub.added(collectionName, doc._id, doc);\n            this._addDocHash(collectionName, doc);\n        }\n    }\n\n    changed(collectionName, id, changes) {\n        if (this._shouldSendChanges(collectionName, id, changes)) {\n            debugLog('Subscription.changed', `${collectionName}:${id}`);\n            this.meteorSub.changed(collectionName, id, changes);\n            this._updateDocHash(collectionName, id, changes);\n        }\n    }\n\n    removed(collectionName, id) {\n        debugLog('Subscription.removed', `${collectionName}:${id.valueOf()}`);\n        this.refCounter.decrement(collectionName, id);\n    }\n\n    _addDocHash(collectionName, doc) {\n        this.docHash[buildHashKey(collectionName, doc._id)] = doc;\n    }\n\n    _updateDocHash(collectionName, id, changes) {\n        const key = buildHashKey(collectionName, id);\n        const existingDoc = this.docHash[key] || {};\n        this.docHash[key] = _.extend(existingDoc, changes);\n    }\n\n    _shouldSendChanges(collectionName, id, changes) {\n        return this._isDocPublished(collectionName, id) &&\n            this._hasDocChanged(collectionName, id, changes);\n    }\n\n    _isDocPublished(collectionName, id) {\n        const key = buildHashKey(collectionName, id);\n        return !!this.docHash[key];\n    }\n\n    _hasDocChanged(collectionName, id, doc) {\n        const existingDoc = this.docHash[buildHashKey(collectionName, id)];\n\n        if (!existingDoc) { return true; }\n\n        return _.any(_.keys(doc), key => !_.isEqual(doc[key], existingDoc[key]));\n    }\n\n    _removeDocHash(collectionName, id) {\n        const key = buildHashKey(collectionName, id);\n        delete this.docHash[key];\n    }\n}\n\nfunction buildHashKey(collectionName, id) {\n    return `${collectionName}::${id.valueOf()}`;\n}\n\nexport default Subscription;\n"]},"hash":"caee932277c04712ab841530cd36770f0424cf6b"}
