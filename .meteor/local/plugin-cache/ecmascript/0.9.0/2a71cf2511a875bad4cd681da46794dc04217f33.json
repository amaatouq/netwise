{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"./doc_ref_counter","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"DocumentRefCounter"}]},{"source":"./logging","imported":["debugLog"],"specifiers":[{"kind":"named","imported":"debugLog","local":"debugLog"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/reywood:publish-composite/lib/subscription.js","filenameRelative":"packages/reywood:publish-composite/lib/subscription.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/reywood:publish-composite/lib/subscription.js.map","sourceFileName":"packages/reywood:publish-composite/lib/subscription.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"subscription"},"ignored":false,"code":"let _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n    _(v) {\n        _ = v;\n    }\n\n}, 0);\nlet DocumentRefCounter;\nmodule.watch(require(\"./doc_ref_counter\"), {\n    default(v) {\n        DocumentRefCounter = v;\n    }\n\n}, 1);\nlet debugLog;\nmodule.watch(require(\"./logging\"), {\n    debugLog(v) {\n        debugLog = v;\n    }\n\n}, 2);\n\nclass Subscription {\n    constructor(meteorSub) {\n        this.meteorSub = meteorSub;\n        this.docHash = {};\n        this.refCounter = new DocumentRefCounter({\n            onChange: (collectionName, docId, refCount) => {\n                debugLog('Subscription.refCounter.onChange', `${collectionName}:${docId.valueOf()} ${refCount}`);\n\n                if (refCount <= 0) {\n                    meteorSub.removed(collectionName, docId);\n\n                    this._removeDocHash(collectionName, docId);\n                }\n            }\n        });\n    }\n\n    added(collectionName, doc) {\n        this.refCounter.increment(collectionName, doc._id);\n\n        if (this._hasDocChanged(collectionName, doc._id, doc)) {\n            debugLog('Subscription.added', `${collectionName}:${doc._id}`);\n            this.meteorSub.added(collectionName, doc._id, doc);\n\n            this._addDocHash(collectionName, doc);\n        }\n    }\n\n    changed(collectionName, id, changes) {\n        if (this._shouldSendChanges(collectionName, id, changes)) {\n            debugLog('Subscription.changed', `${collectionName}:${id}`);\n            this.meteorSub.changed(collectionName, id, changes);\n\n            this._updateDocHash(collectionName, id, changes);\n        }\n    }\n\n    removed(collectionName, id) {\n        debugLog('Subscription.removed', `${collectionName}:${id.valueOf()}`);\n        this.refCounter.decrement(collectionName, id);\n    }\n\n    _addDocHash(collectionName, doc) {\n        this.docHash[buildHashKey(collectionName, doc._id)] = doc;\n    }\n\n    _updateDocHash(collectionName, id, changes) {\n        const key = buildHashKey(collectionName, id);\n        const existingDoc = this.docHash[key] || {};\n        this.docHash[key] = _.extend(existingDoc, changes);\n    }\n\n    _shouldSendChanges(collectionName, id, changes) {\n        return this._isDocPublished(collectionName, id) && this._hasDocChanged(collectionName, id, changes);\n    }\n\n    _isDocPublished(collectionName, id) {\n        const key = buildHashKey(collectionName, id);\n        return !!this.docHash[key];\n    }\n\n    _hasDocChanged(collectionName, id, doc) {\n        const existingDoc = this.docHash[buildHashKey(collectionName, id)];\n\n        if (!existingDoc) {\n            return true;\n        }\n\n        return _.any(_.keys(doc), key => !_.isEqual(doc[key], existingDoc[key]));\n    }\n\n    _removeDocHash(collectionName, id) {\n        const key = buildHashKey(collectionName, id);\n        delete this.docHash[key];\n    }\n\n}\n\nfunction buildHashKey(collectionName, id) {\n    return `${collectionName}::${id.valueOf()}`;\n}\n\nmodule.exportDefault(Subscription);","map":{"version":3,"sources":["packages/reywood:publish-composite/lib/subscription.js"],"names":["_","module","watch","require","v","DocumentRefCounter","default","debugLog","Subscription","constructor","meteorSub","docHash","refCounter","onChange","collectionName","docId","refCount","valueOf","removed","_removeDocHash","added","doc","increment","_id","_hasDocChanged","_addDocHash","changed","id","changes","_shouldSendChanges","_updateDocHash","decrement","buildHashKey","key","existingDoc","extend","_isDocPublished","any","keys","isEqual","exportDefault"],"mappings":"AAAA,IAAIA,CAAJ;;AAAMC,OAAOC,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACH,MAAEI,CAAF,EAAI;AAACJ,YAAEI,CAAF;AAAI;;AAAV,CAA1C,EAAsD,CAAtD;AAAyD,IAAIC,kBAAJ;AAAuBJ,OAAOC,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACG,YAAQF,CAAR,EAAU;AAACC,6BAAmBD,CAAnB;AAAqB;;AAAjC,CAA1C,EAA6E,CAA7E;AAAgF,IAAIG,QAAJ;AAAaN,OAAOC,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACI,aAASH,CAAT,EAAW;AAACG,mBAASH,CAAT;AAAW;;AAAxB,CAAlC,EAA4D,CAA5D;;AAMnL,MAAMI,YAAN,CAAmB;AACfC,gBAAYC,SAAZ,EAAuB;AACnB,aAAKA,SAAL,GAAiBA,SAAjB;AACA,aAAKC,OAAL,GAAe,EAAf;AACA,aAAKC,UAAL,GAAkB,IAAIP,kBAAJ,CAAuB;AACrCQ,sBAAU,CAACC,cAAD,EAAiBC,KAAjB,EAAwBC,QAAxB,KAAqC;AAC3CT,yBAAS,kCAAT,EAA8C,GAAEO,cAAe,IAAGC,MAAME,OAAN,EAAgB,IAAGD,QAAS,EAA9F;;AACA,oBAAIA,YAAY,CAAhB,EAAmB;AACfN,8BAAUQ,OAAV,CAAkBJ,cAAlB,EAAkCC,KAAlC;;AACA,yBAAKI,cAAL,CAAoBL,cAApB,EAAoCC,KAApC;AACH;AACJ;AAPoC,SAAvB,CAAlB;AASH;;AAEDK,UAAMN,cAAN,EAAsBO,GAAtB,EAA2B;AACvB,aAAKT,UAAL,CAAgBU,SAAhB,CAA0BR,cAA1B,EAA0CO,IAAIE,GAA9C;;AAEA,YAAI,KAAKC,cAAL,CAAoBV,cAApB,EAAoCO,IAAIE,GAAxC,EAA6CF,GAA7C,CAAJ,EAAuD;AACnDd,qBAAS,oBAAT,EAAgC,GAAEO,cAAe,IAAGO,IAAIE,GAAI,EAA5D;AACA,iBAAKb,SAAL,CAAeU,KAAf,CAAqBN,cAArB,EAAqCO,IAAIE,GAAzC,EAA8CF,GAA9C;;AACA,iBAAKI,WAAL,CAAiBX,cAAjB,EAAiCO,GAAjC;AACH;AACJ;;AAEDK,YAAQZ,cAAR,EAAwBa,EAAxB,EAA4BC,OAA5B,EAAqC;AACjC,YAAI,KAAKC,kBAAL,CAAwBf,cAAxB,EAAwCa,EAAxC,EAA4CC,OAA5C,CAAJ,EAA0D;AACtDrB,qBAAS,sBAAT,EAAkC,GAAEO,cAAe,IAAGa,EAAG,EAAzD;AACA,iBAAKjB,SAAL,CAAegB,OAAf,CAAuBZ,cAAvB,EAAuCa,EAAvC,EAA2CC,OAA3C;;AACA,iBAAKE,cAAL,CAAoBhB,cAApB,EAAoCa,EAApC,EAAwCC,OAAxC;AACH;AACJ;;AAEDV,YAAQJ,cAAR,EAAwBa,EAAxB,EAA4B;AACxBpB,iBAAS,sBAAT,EAAkC,GAAEO,cAAe,IAAGa,GAAGV,OAAH,EAAa,EAAnE;AACA,aAAKL,UAAL,CAAgBmB,SAAhB,CAA0BjB,cAA1B,EAA0Ca,EAA1C;AACH;;AAEDF,gBAAYX,cAAZ,EAA4BO,GAA5B,EAAiC;AAC7B,aAAKV,OAAL,CAAaqB,aAAalB,cAAb,EAA6BO,IAAIE,GAAjC,CAAb,IAAsDF,GAAtD;AACH;;AAEDS,mBAAehB,cAAf,EAA+Ba,EAA/B,EAAmCC,OAAnC,EAA4C;AACxC,cAAMK,MAAMD,aAAalB,cAAb,EAA6Ba,EAA7B,CAAZ;AACA,cAAMO,cAAc,KAAKvB,OAAL,CAAasB,GAAb,KAAqB,EAAzC;AACA,aAAKtB,OAAL,CAAasB,GAAb,IAAoBjC,EAAEmC,MAAF,CAASD,WAAT,EAAsBN,OAAtB,CAApB;AACH;;AAEDC,uBAAmBf,cAAnB,EAAmCa,EAAnC,EAAuCC,OAAvC,EAAgD;AAC5C,eAAO,KAAKQ,eAAL,CAAqBtB,cAArB,EAAqCa,EAArC,KACH,KAAKH,cAAL,CAAoBV,cAApB,EAAoCa,EAApC,EAAwCC,OAAxC,CADJ;AAEH;;AAEDQ,oBAAgBtB,cAAhB,EAAgCa,EAAhC,EAAoC;AAChC,cAAMM,MAAMD,aAAalB,cAAb,EAA6Ba,EAA7B,CAAZ;AACA,eAAO,CAAC,CAAC,KAAKhB,OAAL,CAAasB,GAAb,CAAT;AACH;;AAEDT,mBAAeV,cAAf,EAA+Ba,EAA/B,EAAmCN,GAAnC,EAAwC;AACpC,cAAMa,cAAc,KAAKvB,OAAL,CAAaqB,aAAalB,cAAb,EAA6Ba,EAA7B,CAAb,CAApB;;AAEA,YAAI,CAACO,WAAL,EAAkB;AAAE,mBAAO,IAAP;AAAc;;AAElC,eAAOlC,EAAEqC,GAAF,CAAMrC,EAAEsC,IAAF,CAAOjB,GAAP,CAAN,EAAmBY,OAAO,CAACjC,EAAEuC,OAAF,CAAUlB,IAAIY,GAAJ,CAAV,EAAoBC,YAAYD,GAAZ,CAApB,CAA3B,CAAP;AACH;;AAEDd,mBAAeL,cAAf,EAA+Ba,EAA/B,EAAmC;AAC/B,cAAMM,MAAMD,aAAalB,cAAb,EAA6Ba,EAA7B,CAAZ;AACA,eAAO,KAAKhB,OAAL,CAAasB,GAAb,CAAP;AACH;;AArEc;;AAwEnB,SAASD,YAAT,CAAsBlB,cAAtB,EAAsCa,EAAtC,EAA0C;AACtC,WAAQ,GAAEb,cAAe,KAAIa,GAAGV,OAAH,EAAa,EAA1C;AACH;;AAhFDhB,OAAOuC,aAAP,CAkFehC,YAlFf","file":"packages/reywood:publish-composite/lib/subscription.js.map","sourcesContent":["import { _ } from 'meteor/underscore';\n\nimport DocumentRefCounter from './doc_ref_counter';\nimport { debugLog } from './logging';\n\n\nclass Subscription {\n    constructor(meteorSub) {\n        this.meteorSub = meteorSub;\n        this.docHash = {};\n        this.refCounter = new DocumentRefCounter({\n            onChange: (collectionName, docId, refCount) => {\n                debugLog('Subscription.refCounter.onChange', `${collectionName}:${docId.valueOf()} ${refCount}`);\n                if (refCount <= 0) {\n                    meteorSub.removed(collectionName, docId);\n                    this._removeDocHash(collectionName, docId);\n                }\n            },\n        });\n    }\n\n    added(collectionName, doc) {\n        this.refCounter.increment(collectionName, doc._id);\n\n        if (this._hasDocChanged(collectionName, doc._id, doc)) {\n            debugLog('Subscription.added', `${collectionName}:${doc._id}`);\n            this.meteorSub.added(collectionName, doc._id, doc);\n            this._addDocHash(collectionName, doc);\n        }\n    }\n\n    changed(collectionName, id, changes) {\n        if (this._shouldSendChanges(collectionName, id, changes)) {\n            debugLog('Subscription.changed', `${collectionName}:${id}`);\n            this.meteorSub.changed(collectionName, id, changes);\n            this._updateDocHash(collectionName, id, changes);\n        }\n    }\n\n    removed(collectionName, id) {\n        debugLog('Subscription.removed', `${collectionName}:${id.valueOf()}`);\n        this.refCounter.decrement(collectionName, id);\n    }\n\n    _addDocHash(collectionName, doc) {\n        this.docHash[buildHashKey(collectionName, doc._id)] = doc;\n    }\n\n    _updateDocHash(collectionName, id, changes) {\n        const key = buildHashKey(collectionName, id);\n        const existingDoc = this.docHash[key] || {};\n        this.docHash[key] = _.extend(existingDoc, changes);\n    }\n\n    _shouldSendChanges(collectionName, id, changes) {\n        return this._isDocPublished(collectionName, id) &&\n            this._hasDocChanged(collectionName, id, changes);\n    }\n\n    _isDocPublished(collectionName, id) {\n        const key = buildHashKey(collectionName, id);\n        return !!this.docHash[key];\n    }\n\n    _hasDocChanged(collectionName, id, doc) {\n        const existingDoc = this.docHash[buildHashKey(collectionName, id)];\n\n        if (!existingDoc) { return true; }\n\n        return _.any(_.keys(doc), key => !_.isEqual(doc[key], existingDoc[key]));\n    }\n\n    _removeDocHash(collectionName, id) {\n        const key = buildHashKey(collectionName, id);\n        delete this.docHash[key];\n    }\n}\n\nfunction buildHashKey(collectionName, id) {\n    return `${collectionName}::${id.valueOf()}`;\n}\n\nexport default Subscription;\n"]},"hash":"2a71cf2511a875bad4cd681da46794dc04217f33"}
